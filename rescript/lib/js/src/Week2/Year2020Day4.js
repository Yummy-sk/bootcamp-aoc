// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Input = require("../Input.js");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function formatPassportInfo(line) {
  return Belt_Array.reduce(line.split(" "), {
              byr: 0,
              iyr: 0,
              eyr: 0,
              hgt: 0,
              hcl: /* None */0,
              ecl: /* None */0,
              pid: /* None */0
            }, (function (acc, info) {
                var match = info.split(":");
                if (match.length !== 2) {
                  return acc;
                }
                var key = match[0];
                var value = match[1];
                switch (key) {
                  case "byr" :
                      var newrecord = Caml_obj.obj_dup(acc);
                      newrecord.byr = Belt_Option.getExn(Belt_Int.fromString(value));
                      return newrecord;
                  case "cid" :
                      var newrecord$1 = Caml_obj.obj_dup(acc);
                      newrecord$1.cid = Belt_Option.getExn(Belt_Int.fromString(value));
                      return newrecord$1;
                  case "ecl" :
                      var newrecord$2 = Caml_obj.obj_dup(acc);
                      var tmp;
                      switch (value) {
                        case "amb" :
                            tmp = {
                              TAG: /* Amb */0,
                              _0: value
                            };
                            break;
                        case "blu" :
                            tmp = {
                              TAG: /* Blu */1,
                              _0: value
                            };
                            break;
                        case "brn" :
                            tmp = {
                              TAG: /* Brn */6,
                              _0: value
                            };
                            break;
                        case "grn" :
                            tmp = {
                              TAG: /* Grn */2,
                              _0: value
                            };
                            break;
                        case "gry" :
                            tmp = {
                              TAG: /* Gry */3,
                              _0: value
                            };
                            break;
                        case "hzl" :
                            tmp = {
                              TAG: /* Hzl */4,
                              _0: value
                            };
                            break;
                        case "oth" :
                            tmp = {
                              TAG: /* Oth */5,
                              _0: value
                            };
                            break;
                        default:
                          tmp = {
                            TAG: /* Unknown */7,
                            _0: value
                          };
                      }
                      newrecord$2.ecl = tmp;
                      return newrecord$2;
                  case "eyr" :
                      var newrecord$3 = Caml_obj.obj_dup(acc);
                      newrecord$3.eyr = Belt_Option.getExn(Belt_Int.fromString(value));
                      return newrecord$3;
                  case "hcl" :
                      var newrecord$4 = Caml_obj.obj_dup(acc);
                      newrecord$4.hcl = /* Hcl */{
                        _0: value
                      };
                      return newrecord$4;
                  case "hgt" :
                      var newrecord$5 = Caml_obj.obj_dup(acc);
                      newrecord$5.hgt = Belt_Option.getExn(Belt_Int.fromString(value));
                      return newrecord$5;
                  case "iyr" :
                      var newrecord$6 = Caml_obj.obj_dup(acc);
                      newrecord$6.iyr = Belt_Option.getExn(Belt_Int.fromString(value));
                      return newrecord$6;
                  case "pid" :
                      var newrecord$7 = Caml_obj.obj_dup(acc);
                      newrecord$7.pid = /* Pid */{
                        _0: value
                      };
                      return newrecord$7;
                  default:
                    return acc;
                }
              }));
}

function parsePassport(param) {
  return Belt_Array.map(Belt_Array.map(Input.readFile("input/Week2/Year2020Day4.sample.txt").split("\n\n"), (function (line) {
                    return line.replace(/\n/g, " ").trim();
                  })), formatPassportInfo);
}

function checkAllFieldsAreExist(passport) {
  if (passport.byr > 0 && passport.iyr > 0 && passport.eyr > 0 && passport.hgt > 0 && passport.hcl !== /* None */0 && passport.ecl !== /* None */0) {
    return passport.pid !== /* None */0;
  } else {
    return false;
  }
}

function countPassport(passports) {
  return Belt_Array.keep(passports, checkAllFieldsAreExist).length;
}

console.log(countPassport(parsePassport(undefined)));

exports.formatPassportInfo = formatPassportInfo;
exports.parsePassport = parsePassport;
exports.checkAllFieldsAreExist = checkAllFieldsAreExist;
exports.countPassport = countPassport;
/*  Not a pure module */
