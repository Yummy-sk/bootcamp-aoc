// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Input = require("../Input.js");
var Belt_Id = require("rescript/lib/js/belt_Id.js");
var Belt_Set = require("rescript/lib/js/belt_Set.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

var cmp = Caml_obj.compare;

var StrCmp = Belt_Id.MakeComparable({
      cmp: cmp
    });

function parseInput(param) {
  return Belt_Array.map(Input.readFile("input/Week1/Year2020Day6.sample.txt").trim().split("\n\n").map(function (str) {
                  return str.split("\n");
                }), (function (arr) {
                return Belt_Array.map(arr, (function (str) {
                              return str.split("");
                            }));
              }));
}

function handleSet(groups, setType) {
  return Belt_Array.map(groups, (function (group) {
                return Belt_Option.getExn(Belt_Array.reduce(group, Belt_Array.get(group, 0), (function (acc, person) {
                                  if (acc === undefined) {
                                    return ;
                                  }
                                  var prev = Belt_Set.fromArray(acc, StrCmp);
                                  var curr = Belt_Set.fromArray(person, StrCmp);
                                  if (setType) {
                                    return Belt_Set.toArray(Belt_Set.intersect(prev, curr));
                                  } else {
                                    return Belt_Set.toArray(Belt_Set.union(prev, curr));
                                  }
                                })));
              }));
}

function parseData(solType) {
  var groups = parseInput(undefined);
  if (solType) {
    return handleSet(groups, /* Intersection */1);
  } else {
    return handleSet(groups, /* Union */0);
  }
}

function countAnswers(groups) {
  return Belt_Array.map(groups, (function (group) {
                return group.length;
              }));
}

function getSumOfCounts(counts) {
  return Belt_Array.reduce(counts, 0, (function (acc, count) {
                return acc + count | 0;
              }));
}

function solve(solType) {
  var groups = parseData(solType);
  console.log(getSumOfCounts(Belt_Array.map(groups, (function (group) {
                  return group.length;
                }))));
}

function solution(solType) {
  if (solType) {
    return solve(/* Solution2 */1);
  } else {
    return solve(/* Solution1 */0);
  }
}

solve(/* Solution1 */0);

solve(/* Solution2 */1);

exports.StrCmp = StrCmp;
exports.parseInput = parseInput;
exports.handleSet = handleSet;
exports.parseData = parseData;
exports.countAnswers = countAnswers;
exports.getSumOfCounts = getSumOfCounts;
exports.solve = solve;
exports.solution = solution;
/* StrCmp Not a pure module */
