// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_SetString = require("rescript/lib/js/belt_SetString.js");

function parseInput(param) {
  return Fs.readFileSync("../../../../input/Week1/Year2020Day6.sample.txt", "utf8").trim().split("\n\n").map(function (str) {
              return str.split("\n");
            });
}

function splitQuestions(questions) {
  return Belt_Array.map(questions, (function (question) {
                return Belt_Array.map(question, (function (str) {
                              return str.split("");
                            }));
              }));
}

var collectQuestion = Belt_Array.concatMany;

function collectQuestions(questions) {
  return Belt_Array.map(questions, collectQuestion);
}

function getUniqueQuestion(question) {
  return Belt_SetString.toArray(Belt_SetString.fromArray(question));
}

function getUniqueQuestions(questions) {
  return Belt_Array.map(questions, getUniqueQuestion);
}

function getCountOfQuestions(questions) {
  return Belt_Array.map(questions, (function (question) {
                return question.length;
              }));
}

function getInfoOfGroup(questions) {
  return Belt_Array.map(questions, (function (question) {
                var numberOfPeople = question.length;
                var collectedQuestion = Belt_Array.concatMany(question);
                return {
                        num: numberOfPeople,
                        ques: collectedQuestion
                      };
              }));
}

function checkQuestionsAreAllAnswered(infos) {
  return Belt_Array.map(infos, (function (info) {
                var ques = info.ques;
                var num = info.num;
                var uniqueQuestion = Belt_SetString.toArray(Belt_SetString.fromArray(ques));
                return uniqueQuestion.map(function (question) {
                            var count = ques.filter(function (q) {
                                  return q === question;
                                }).length;
                            return count === num;
                          });
              }));
}

function countAnsweredQuestions(questions) {
  return Belt_Array.map(questions, (function (question) {
                return question.filter(function (q) {
                            return q;
                          }).length;
              }));
}

function getSumOfCounts(counts) {
  return Belt_Array.reduce(counts, 0, (function (acc, count) {
                return acc + count | 0;
              }));
}

function solutionPart1(param) {
  var questions = Belt_Array.map(Belt_Array.map(splitQuestions(parseInput(undefined)), collectQuestion), getUniqueQuestion);
  console.log(getSumOfCounts(Belt_Array.map(questions, (function (question) {
                  return question.length;
                }))));
  
}

function solutionPart2(param) {
  console.log(getSumOfCounts(countAnsweredQuestions(checkQuestionsAreAllAnswered(getInfoOfGroup(splitQuestions(parseInput(undefined)))))));
  
}

solutionPart1(undefined);

solutionPart2(undefined);

exports.parseInput = parseInput;
exports.splitQuestions = splitQuestions;
exports.collectQuestion = collectQuestion;
exports.collectQuestions = collectQuestions;
exports.getUniqueQuestion = getUniqueQuestion;
exports.getUniqueQuestions = getUniqueQuestions;
exports.getCountOfQuestions = getCountOfQuestions;
exports.getInfoOfGroup = getInfoOfGroup;
exports.checkQuestionsAreAllAnswered = checkQuestionsAreAllAnswered;
exports.countAnsweredQuestions = countAnsweredQuestions;
exports.getSumOfCounts = getSumOfCounts;
exports.solutionPart1 = solutionPart1;
exports.solutionPart2 = solutionPart2;
/*  Not a pure module */
