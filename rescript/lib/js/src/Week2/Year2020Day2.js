// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Input = require("../Input.js");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Pervasives = require("rescript/lib/js/pervasives.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function getInputData(param) {
  return Input.readFile("input/Week1/Year2020Day2.sample.txt").split("\n");
}

function formatData(line) {
  var match = line.split(" ");
  if (match.length !== 3) {
    return Pervasives.failwith("Invalid line");
  }
  var range = match[0];
  var letter = match[1];
  var password = match[2];
  var match$1 = range.split("-");
  if (match$1.length !== 2) {
    return Pervasives.failwith("Invalid range");
  }
  var lower = match$1[0];
  var upper = match$1[1];
  return {
          upper: Belt_Option.getExn(Belt_Int.fromString(upper)),
          lower: Belt_Option.getExn(Belt_Int.fromString(lower)),
          letter: letter.replace(/:/g, ""),
          password: password
        };
}

function parseInputData(param) {
  return Belt_Array.map(Input.readFile("input/Week1/Year2020Day2.sample.txt").split("\n"), formatData);
}

function checkLetterCountIsValid(infos) {
  return Belt_Array.keep(infos, (function (info) {
                var letter = info.letter;
                var letterCount = Belt_Array.keep(info.password.split(""), (function (x) {
                        return x === letter;
                      })).length;
                if (letterCount >= info.lower) {
                  return letterCount <= info.upper;
                } else {
                  return false;
                }
              }));
}

function checkLetterPositionIsValid(infos) {
  return Belt_Array.keep(infos, (function (info) {
                var password = info.password;
                var letter = info.letter;
                var letterAtLower = password[info.lower - 1 | 0] === letter;
                var letterAtUpper = password[info.upper - 1 | 0] === letter;
                return letterAtLower !== letterAtUpper;
              }));
}

var a = {
  a: 1,
  b: "b"
};

var b = {
  a: 1,
  b: "b"
};

var c = Caml_obj.equal(a, b);

var d = a === b;

console.log(c);

console.log(d);

function countValidPasswords(status) {
  return status.length;
}

function solution(partType) {
  if (partType) {
    console.log(checkLetterPositionIsValid(parseInputData(undefined)).length);
  } else {
    console.log(checkLetterCountIsValid(parseInputData(undefined)).length);
  }
}

solution(/* Part1 */0);

solution(/* Part2 */1);

exports.getInputData = getInputData;
exports.formatData = formatData;
exports.parseInputData = parseInputData;
exports.checkLetterCountIsValid = checkLetterCountIsValid;
exports.checkLetterPositionIsValid = checkLetterPositionIsValid;
exports.a = a;
exports.b = b;
exports.c = c;
exports.d = d;
exports.countValidPasswords = countValidPasswords;
exports.solution = solution;
/* c Not a pure module */
