Hello - from /Users/greenlabs/.vscode/extensions/jaredly.reason-vscode-1.7.13/bin.native
Previous log location: /var/folders/kg/7h_kzctx1ynd1vchshcn211w0000gn/T/lsp.log
Sending notification {"jsonrpc": "2.0", "method": "client/registerCapability", "params": {"registrations": [{"id": "watching", "method": "workspace/didChangeWatchedFiles", "registerOptions": {"watchers": [{"globPattern": "**/bsconfig.json"}, {"globPattern": "**/.merlin"}]}}]}}
Sending response {"id": 0, "jsonrpc": "2.0", "result": {"capabilities": {"textDocumentSync": 1, "hoverProvider": true, "completionProvider": {"resolveProvider": true, "triggerCharacters": ["."]}, "signatureHelpProvider": {"triggerCharacters": ["("]}, "definitionProvider": true, "typeDefinitionProvider": true, "referencesProvider": true, "documentSymbolProvider": true, "codeActionProvider": true, "executeCommandProvider": {"commands": ["reason-language-server.add_to_interface_inner"]}, "codeLensProvider": {"resolveProvider": true}, "documentHighlightProvider": true, "documentRangeFormattingProvider": true, "documentFormattingProvider": true, "renameProvider": true}}}
Read message 
{"jsonrpc":"2.0","method":"initialized","params":{}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/js_string2.ml","languageId":"ocaml","version":1,"text":"(* Copyright (C) 2015-2016 Bloomberg Finance L.P.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * In addition to the permissions granted to you by the LGPL, you may combine\n * or link a \"work that uses the Library\" with a publicly distributed version\n * of this file to produce a combined library or application, then distribute\n * that combined work under the terms of your choosing, with no requirement\n * to comply with the obligations normally placed on you by section 4 of the\n * LGPL version 3 (or the corresponding section of a later version of the LGPL\n * should you choose to use a later version).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)\n\n(** Provide bindings to JS string. Optimized for pipe-first. *)\n\ntype t = string\n\nexternal make : 'a -> t = \"String\"\n  [@@bs.val]\n(**\n`make(value)` converts the given value to a `string`.\n\n```res example\nJs.String2.make(3.5) == \"3.5\"\nJs.String2.make([1, 2, 3]) == \"1,2,3\"\n```\n*)\n\nexternal fromCharCode : int -> t = \"String.fromCharCode\"\n  [@@bs.val]\n(**\n`fromCharCode(n)` creates a `string` containing the character corresponding to\nthat number; `n` ranges from 0 to 65535.If out of range, the lower 16 bits of\nthe value are used. Thus, `fromCharCode(0x1F63A)` gives the same result as\n`fromCharCode(0xF63A)`.\n\nSee [`String.fromCharCode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)\non MDN.\n\n```res example\nJs.String2.fromCharCode(65) == \"A\"\nJs.String2.fromCharCode(0x3c8) == `Ïˆ`\nJs.String2.fromCharCode(0xd55c) == `í•œ`\nJs.String2.fromCharCode(-64568) == `Ïˆ`\n```\n*)\n\nexternal fromCharCodeMany : int array -> t = \"String.fromCharCode\"\n  [@@bs.val] [@@bs.splice]\n(**\n`fromCharCodeMany([n1, n2, n3])` creates a `string` from the characters\ncorresponding to the given numbers, using the same rules as `fromCharCode`.\n\nSee [`String.fromCharCode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)\non MDN.\n*)\n\nexternal fromCodePoint : int -> t = \"String.fromCodePoint\"\n  [@@bs.val]\n(**\n`fromCodePoint(n)` creates a `string` containing the character corresponding to\nthat numeric code point. If the number is not a valid code point, it raises\n`RangeError`. Thus, `fromCodePoint(0x1F63A)` will produce a correct value,\nunlike `fromCharCode(0x1F63A)`, and `fromCodePoint(-5)` will raise a\n`RangeError`.\n\nSee [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\non MDN.\n\n```res example\nJs.String2.fromCodePoint(65) == \"A\"\nJs.String2.fromCodePoint(0x3c8) == `Ïˆ`\nJs.String2.fromCodePoint(0xd55c) == `í•œ`\nJs.String2.fromCodePoint(0x1f63a) == `ðŸ˜º`\n```\n*)\n\nexternal fromCodePointMany : int array -> t = \"String.fromCodePoint\"\n  [@@bs.val] [@@bs.splice]\n(**\n`fromCodePointMany([n1, n2, n3])` creates a `string` from the characters\ncorresponding to the given code point numbers, using the same rules as\n`fromCodePoint`.\n\nSee [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\non MDN.\n\n```res example\nJs.String2.fromCodePointMany([0xd55c, 0xae00, 0x1f63a]) == `í•œê¸€ðŸ˜º`\n```\n*)\n\n(* String.raw: ES2015, meant to be used with template strings, not directly *)\n\nexternal length : t -> int = \"length\"\n  [@@bs.get]\n(**\n`length(s)` returns the length of the given `string`.\n\nSee [`String.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length)\non MDN.\n\n```res example\nJs.String2.length(\"abcd\") == 4\n```\n*)\n\nexternal get : t -> int -> t = \"\"\n  [@@bs.get_index]\n(**\n`get(s, n)` returns as a `string` the character at the given index number. If\n`n` is out of range, this function returns `undefined`,so at some point this\nfunction may be modified to return `option(string)`.\n\n```res example\nJs.String2.get(\"Reason\", 0) == \"R\"\nJs.String2.get(\"Reason\", 4) == \"o\"\nJs.String2.get(`Ráº½asÃ¶Å„`, 5) == `Å„`\n```\n*)\n\nexternal charAt : t -> int -> t = \"charAt\"\n  [@@bs.send]\n(**\n`charAt(s, n)` gets the character at index `n` within string `s`. If `n` is\nnegative or greater than the length of `s`, it returns the empty string. If the\nstring contains characters outside the range \\u0000-\\uffff, it will return the\nfirst 16-bit value at that position in the string.\n\nSee [`String.charAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt)\non MDN.\n\n```res example\nJs.String2.charAt(\"Reason\", 0) == \"R\"\nJs.String2.charAt(\"Reason\", 12) == \"\"\nJs.String2.charAt(`Ráº½asÃ¶Å„`, 5) == `Å„`\n```\n*)\n\nexternal charCodeAt : t -> int -> float = \"charCodeAt\"\n  [@@bs.send]\n(**\n`charCodeAt(s, n)` returns the character code at position `n` in string `s`;\nthe result is in the range 0-65535, unlke `codePointAt`, so it will not work\ncorrectly for characters with code points greater than or equal to 0x10000. The\nreturn type is `float` because this function returns NaN if `n` is less than\nzero or greater than the length of the string.\n\nSee [`String.charCodeAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt)\non MDN.\n\n```res example\nJs.String2.charCodeAt(`ðŸ˜º`, 0) == 0xd83d->Belt.Int.toFloat\nJs.String2.codePointAt(`ðŸ˜º`, 0) == Some(0x1f63a)\n```\n*)\n\nexternal codePointAt : t -> int -> int option = \"codePointAt\"\n  [@@bs.send]\n(**\n`codePointAt(s, n)` returns the code point at position `n` within string `s` as\na `Some(value)`. The return value handles code points greater than or equal to\n0x10000. If there is no code point at the given position, the function returns\n`None`.\n\nSee [`String.codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)\non MDN.\n\n```res example\nJs.String2.codePointAt(`Â¿ðŸ˜º?`, 1) == Some(0x1f63a)\nJs.String2.codePointAt(\"abc\", 5) == None\n```\n*)\n\nexternal concat : t -> t -> t = \"concat\"\n  [@@bs.send]\n(**\n`concat(original, append)` returns a new `string` with `append` added after\n`original`.\n\nSee [`String.concat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat)\non MDN.\n\n```res example\nJs.String2.concat(\"cow\", \"bell\") == \"cowbell\"\n```\n*)\n\nexternal concatMany : t -> t array -> t = \"concat\"\n  [@@bs.send] [@@bs.splice]\n(**\n`concatMany(original, arr)` returns a new `string` consisting of each item of an\narray of strings added to the `original` string.\n\nSee [`String.concat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat)\non MDN.\n\n```res example\nJs.String2.concatMany(\"1st\", [\"2nd\", \"3rd\", \"4th\"]) == \"1st2nd3rd4th\"\n```\n*)\n\nexternal endsWith : t -> t -> bool = \"endsWith\"\n  [@@bs.send]\n(**\nES2015: `endsWith(str, substr)` returns `true` if the `str` ends with `substr`,\n`false` otherwise.\n\nSee [`String.endsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith)\non MDN.\n\n```res example\nJs.String2.endsWith(\"BuckleScript\", \"Script\") == true\nJs.String2.endsWith(\"BuckleShoes\", \"Script\") == false\n```\n*)\n\nexternal endsWithFrom : t -> t -> int -> bool = \"endsWith\"\n  [@@bs.send]\n(**\n`endsWithFrom(str, ending, len)` returns `true` if the first len characters of\n`str` end with `ending`, `false` otherwise. If `len` is greater than or equal\nto the length of `str`, then it works like `endsWith`. (Honestly, this should\nhave been named endsWithAt, but oh well).\n\nSee [`String.endsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith)\non MDN.\n\n```res example\nJs.String2.endsWithFrom(\"abcd\", \"cd\", 4) == true\nJs.String2.endsWithFrom(\"abcde\", \"cd\", 3) == false\nJs.String2.endsWithFrom(\"abcde\", \"cde\", 99) == true\nJs.String2.endsWithFrom(\"example.dat\", \"ple\", 7) == true\n```\n*)\n\nexternal includes : t -> t -> bool = \"includes\"\n  [@@bs.send]\n(**\nES2015: `includes(str, searchValue)` returns `true` if `searchValue` is found\nanywhere within `str`, false otherwise.\n\nSee [`String.includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes)\non MDN.\n\n```res example\nJs.String2.includes(\"programmer\", \"gram\") == true\nJs.String2.includes(\"programmer\", \"er\") == true\nJs.String2.includes(\"programmer\", \"pro\") == true\nJs.String2.includes(\"programmer.dat\", \"xyz\") == false\n```\n*)\n\nexternal includesFrom : t -> t -> int -> bool = \"includes\"\n  [@@bs.send]\n(**\nES2015: `includes(str, searchValue start)` returns `true` if `searchValue` is\nfound anywhere within `str` starting at character number `start` (where 0 is\nthe first character), `false` otherwise.\n\nSee [`String.includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes)\non MDN.\n\n```res example\nJs.String2.includesFrom(\"programmer\", \"gram\", 1) == true\nJs.String2.includesFrom(\"programmer\", \"gram\", 4) == false\nJs.String2.includesFrom(`ëŒ€í•œë¯¼êµ­`, `í•œ`, 1) == true\n```\n*)\n\nexternal indexOf : t -> t -> int = \"indexOf\"\n  [@@bs.send]\n(**\nES2015: `indexOf(str, searchValue)` returns the position at which `searchValue`\nwas first found within `str`, or -1 if `searchValue` is not in `str`.\n\nSee [`String.indexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf)\non MDN.\n\n```res example\nJs.String2.indexOf(\"bookseller\", \"ok\") == 2\nJs.String2.indexOf(\"bookseller\", \"sell\") == 4\nJs.String2.indexOf(\"beekeeper\", \"ee\") == 1\nJs.String2.indexOf(\"bookseller\", \"xyz\") == -1\n```\n*)\n\nexternal indexOfFrom : t -> t -> int -> int = \"indexOf\"\n  [@@bs.send]\n(**\n`indexOfFrom(str, searchValue, start)` returns the position at which\n`searchValue` was found within `str` starting at character position `start`, or\n-1 if `searchValue` is not found in that portion of `str`. The return value is\nrelative to the beginning of the string, no matter where the search started\nfrom.\n\nSee [`String.indexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf)\non MDN.\n\n```res example\nJs.String2.indexOfFrom(\"bookseller\", \"ok\", 1) == 2\nJs.String2.indexOfFrom(\"bookseller\", \"sell\", 2) == 4\nJs.String2.indexOfFrom(\"bookseller\", \"sell\", 5) == -1\n```\n*)\n\nexternal lastIndexOf : t -> t -> int = \"lastIndexOf\"\n  [@@bs.send]\n(**\n`lastIndexOf(str, searchValue)` returns the position of the last occurrence of\n`searchValue` within `str`, searching backwards from the end of the string.\nReturns -1 if `searchValue` is not in `str`. The return value is always\nrelative to the beginning of the string.\n\nSee [`String.lastIndexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf)\non MDN.\n\n```res example\nJs.String2.lastIndexOf(\"bookseller\", \"ok\") == 2\nJs.String2.lastIndexOf(\"beekeeper\", \"ee\") == 4\nJs.String2.lastIndexOf(\"abcdefg\", \"xyz\") == -1\n```\n*)\n\nexternal lastIndexOfFrom : t -> t -> int -> int = \"lastIndexOf\"\n  [@@bs.send]\n(**\n`lastIndexOfFrom(str, searchValue, start)` returns the position of the last\noccurrence of `searchValue` within `str`, searching backwards from the given\nstart position. Returns -1 if `searchValue` is not in `str`. The return value\nis always relative to the beginning of the string.\n\nSee [`String.lastIndexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf)\non MDN.\n\n```res example\nJs.String2.lastIndexOfFrom(\"bookseller\", \"ok\", 6) == 2\nJs.String2.lastIndexOfFrom(\"beekeeper\", \"ee\", 8) == 4\nJs.String2.lastIndexOfFrom(\"beekeeper\", \"ee\", 3) == 1\nJs.String2.lastIndexOfFrom(\"abcdefg\", \"xyz\", 4) == -1\n```\n*)\n\n(* extended by ECMA-402 *)\n\nexternal localeCompare : t -> t -> float = \"localeCompare\"\n  [@@bs.send]\n(**\n`localeCompare(reference, comparison)` returns\n- a negative value if reference comes before comparison in sort order\n- zero if reference and comparison have the same sort order\n- a positive value if reference comes after comparison in sort order\n\nSee [`String.localeCompare`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare) on MDN.\n\n```res example\nJs.String2.localeCompare(\"zebra\", \"ant\") > 0.0\nJs.String2.localeCompare(\"ant\", \"zebra\") < 0.0\nJs.String2.localeCompare(\"cat\", \"cat\") == 0.0\nJs.String2.localeCompare(\"CAT\", \"cat\") > 0.0\n```\n*)\n\nexternal match_ : t -> Js_re.t -> t option array option = \"match\"\n  [@@bs.send] [@@bs.return { null_to_opt }]\n(**\n`match(str, regexp)` matches a `string` against the given `regexp`. If there is\nno match, it returns `None`. For regular expressions without the g modifier, if\n  there is a match, the return value is `Some(array)` where the array contains:\n- The entire matched string\n- Any capture groups if the regexp had parentheses\nFor regular expressions with the g modifier, a matched expression returns\n`Some(array)` with all the matched substrings and no capture groups.\n\nSee [`String.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\non MDN.\n\n```res example\nJs.String2.match_(\"The better bats\", %re(\"/b[aeiou]t/\")) == Some([\"bet\"])\nJs.String2.match_(\"The better bats\", %re(\"/b[aeiou]t/g\")) == Some([\"bet\", \"bat\"])\nJs.String2.match_(\"Today is 2018-04-05.\", %re(\"/(\\d+)-(\\d+)-(\\d+)/\")) ==\n  Some([\"2018-04-05\", \"2018\", \"04\", \"05\"])\nJs.String2.match_(\"The large container.\", %re(\"/b[aeiou]g/\")) == None\n```\n*)\n\nexternal normalize : t -> t = \"normalize\"\n  [@@bs.send]\n(**\n`normalize(str)` returns the normalized Unicode string using Normalization Form\nCanonical (NFC) Composition. Consider the character Ã£, which can be represented\nas the single codepoint \\u00e3 or the combination of a lower case letter A\n\\u0061 and a combining tilde \\u0303. Normalization ensures that both can be\nstored in an equivalent binary representation.\n\nSee [`String.normalize`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)\non MDN. See also [Unicode technical report\n#15](https://unicode.org/reports/tr15/) for details.\n*)\n\nexternal normalizeByForm : t -> t -> t = \"normalize\"\n  [@@bs.send]\n(**\nES2015: `normalize(str, form)` returns the normalized Unicode string using the\nspecified form of normalization, which may be one of:\n- \"NFC\" â€” Normalization Form Canonical Composition.\n- \"NFD\" â€” Normalization Form Canonical Decomposition.\n- \"NFKC\" â€” Normalization Form Compatibility Composition.\n- \"NFKD\" â€” Normalization Form Compatibility Decomposition.\n\nSee [`String.normalize`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize) on MDN.\nSee also [Unicode technical report #15](https://unicode.org/reports/tr15/) for details.\n*)\n\nexternal repeat : t -> int -> t = \"repeat\"\n  [@@bs.send]\n(**\n`repeat(str, n)` returns a `string` that consists of `n` repetitions of `str`.\nRaises `RangeError` if `n` is negative.\n\nSee [`String.repeat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat)\non MDN.\n\n```res example\nJs.String2.repeat(\"ha\", 3) == \"hahaha\"\nJs.String2.repeat(\"empty\", 0) == \"\"\n```\n*)\n\nexternal replace : t -> t -> t -> t = \"replace\"\n  [@@bs.send]\n(**\nES2015: `replace(str, substr, newSubstr)` returns a new `string` which is\nidentical to `str` except with the first matching instance of `substr` replaced\nby `newSubstr`. `substr` is treated as a verbatim string to match, not a\nregular expression.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nJs.String2.replace(\"old string\", \"old\", \"new\") == \"new string\"\nJs.String2.replace(\"the cat and the dog\", \"the\", \"this\") == \"this cat and the dog\"\n```\n*)\n\nexternal replaceByRe : t -> Js_re.t -> t -> t = \"replace\"\n  [@@bs.send]\n(**\n`replaceByRe(str, regex, replacement)` returns a new `string` where occurrences\nmatching regex have been replaced by `replacement`.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nJs.String2.replaceByRe(\"vowels be gone\", %re(\"/[aeiou]/g\"), \"x\") == \"vxwxls bx gxnx\"\nJs.String2.replaceByRe(\"Juan Fulano\", %re(\"/(\\w+) (\\w+)/\"), \"$2, $1\") == \"Fulano, Juan\"\n```\n*)\n\nexternal unsafeReplaceBy0 :\n  t -> Js_re.t -> ((t -> int -> t -> t)[@bs.uncurry]) -> t = \"replace\"\n  [@@bs.send]\n(**\nReturns a new `string` with some or all matches of a pattern with no capturing\nparentheses replaced by the value returned from the given function. The\nfunction receives as its parameters the matched string, the offset at which the\nmatch begins, and the whole string being matched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nlet str = \"beautiful vowels\"\nlet re = %re(\"/[aeiou]/g\")\nlet matchFn = (matchPart, _offset, _wholeString) => Js.String2.toUpperCase(matchPart)\n\nJs.String2.unsafeReplaceBy0(str, re, matchFn) == \"bEAUtIfUl vOwEls\"\n```\n*)\n\nexternal unsafeReplaceBy1 :\n  t -> Js_re.t -> ((t -> t -> int -> t -> t)[@bs.uncurry]) -> t = \"replace\"\n  [@@bs.send]\n(**\nReturns a new `string` with some or all matches of a pattern with one set of\ncapturing parentheses replaced by the value returned from the given function.\nThe function receives as its parameters the matched string, the captured\nstring, the offset at which the match begins, and the whole string being\nmatched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nlet str = \"Jony is 40\"\nlet re = %re(\"/(Jony is )\\d+/g\")\nlet matchFn = (_match, part1, _offset, _wholeString) => {\n  part1 ++ \"41\"\n}\n\nJs.String2.unsafeReplaceBy1(str, re, matchFn) == \"Jony is 41\"\n```\n*)\n\nexternal unsafeReplaceBy2 :\n  t -> Js_re.t -> ((t -> t -> t -> int -> t -> t)[@bs.uncurry]) -> t = \"replace\"\n  [@@bs.send]\n(**\nReturns a new `string` with some or all matches of a pattern with two sets of\ncapturing parentheses replaced by the value returned from the given function.\nThe function receives as its parameters the matched string, the captured\nstrings, the offset at which the match begins, and the whole string being\nmatched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nlet str = \"7 times 6\"\nlet re = %re(\"/(\\d+) times (\\d+)/\")\nlet matchFn = (_match, p1, p2, _offset, _wholeString) => {\n  switch (Belt.Int.fromString(p1), Belt.Int.fromString(p2)) {\n  | (Some(x), Some(y)) => Belt.Int.toString(x * y)\n  | _ => \"???\"\n  }\n}\n\nJs.String2.unsafeReplaceBy2(str, re, matchFn) == \"42\"\n```\n*)\n\nexternal unsafeReplaceBy3 :\n  t -> Js_re.t -> ((t -> t -> t -> t -> int -> t -> t)[@bs.uncurry]) -> t\n  = \"replace\"\n  [@@bs.send]\n(**\nReturns a new `string` with some or all matches of a pattern with three sets of\ncapturing parentheses replaced by the value returned from the given function.\nThe function receives as its parameters the matched string, the captured\nstrings, the offset at which the match begins, and the whole string being\nmatched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n*)\n\nexternal search : t -> Js_re.t -> int = \"search\"\n  [@@bs.send]\n(**\n`search(str, regexp)` returns the starting position of the first match of\n`regexp` in the given `str`, or -1 if there is no match.\n\nSee [`String.search`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search)\non MDN.\n\n```res example\nJs.String2.search(\"testing 1 2 3\", %re(\"/\\d+/\")) == 8\nJs.String2.search(\"no numbers\", %re(\"/\\d+/\")) == -1\n```\n*)\n\nexternal slice : t -> from:int -> to_:int -> t = \"slice\"\n  [@@bs.send]\n(**\n`slice(str, from:n1, to_:n2)` returns the substring of `str` starting at\ncharacter `n1` up to but not including `n2`.\n- If either `n1` or `n2` is negative, then it is evaluated as `length(str - n1)` or `length(str - n2)`.\n- If `n2` is greater than the length of `str`, then it is treated as `length(str)`.\n- If `n1` is greater than `n2`, slice returns the empty string.\n\nSee [`String.slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) on MDN.\n\n```res example\nJs.String2.slice(\"abcdefg\", ~from=2, ~to_=5) == \"cde\"\nJs.String2.slice(\"abcdefg\", ~from=2, ~to_=9) == \"cdefg\"\nJs.String2.slice(\"abcdefg\", ~from=-4, ~to_=-2) == \"de\"\nJs.String2.slice(\"abcdefg\", ~from=5, ~to_=1) == \"\"\n```\n*)\n\nexternal sliceToEnd : t -> from:int -> t = \"slice\"\n  [@@bs.send]\n(**\n`sliceToEnd(str, from:n)` returns the substring of `str` starting at character\n`n` to the end of the string.\n- If `n` is negative, then it is evaluated as `length(str - n)`.\n- If `n` is greater than the length of `str`, then sliceToEnd returns the empty string.\n\nSee [`String.slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) on MDN.\n\n```res example\nJs.String2.sliceToEnd(\"abcdefg\", ~from=4) == \"efg\"\nJs.String2.sliceToEnd(\"abcdefg\", ~from=-2) == \"fg\"\nJs.String2.sliceToEnd(\"abcdefg\", ~from=7) == \"\"\n```\n*)\n\nexternal split : t -> t -> t array = \"split\"\n  [@@bs.send]\n(**\n`split(str, delimiter)` splits the given `str` at every occurrence of\n`delimiter` and returns an array of the resulting substrings.\n\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\non MDN.\n\n```res example\nJs.String2.split(\"2018-01-02\", \"-\") == [\"2018\", \"01\", \"02\"]\nJs.String2.split(\"a,b,,c\", \",\") == [\"a\", \"b\", \"\", \"c\"]\nJs.String2.split(\"good::bad as great::awful\", \"::\") == [\"good\", \"bad as great\", \"awful\"]\nJs.String2.split(\"has-no-delimiter\", \";\") == [\"has-no-delimiter\"]\n```\n*)\n\nexternal splitAtMost : t -> t -> limit:int -> t array = \"split\"\n  [@@bs.send]\n(**\n  `splitAtMost delimiter ~limit: n str` splits the given `str` at every occurrence of `delimiter` and returns an array of the first `n` resulting substrings. If `n` is negative or greater than the number of substrings, the array will contain all the substrings.\n\n```\nsplitAtMost \"ant/bee/cat/dog/elk\" \"/\" ~limit: 3 = [|\"ant\"; \"bee\"; \"cat\"|];;\nsplitAtMost \"ant/bee/cat/dog/elk\" \"/\" ~limit: 0 = [| |];;\nsplitAtMost \"ant/bee/cat/dog/elk\" \"/\" ~limit: 9 = [|\"ant\"; \"bee\"; \"cat\"; \"dog\"; \"elk\"|];;\n```\n*)\n\nexternal splitByRe : t -> Js_re.t -> t option array = \"split\"\n  [@@bs.send]\n(**\n`splitByRe(str, regex)` splits the given `str` at every occurrence of `regex`\nand returns an array of the resulting substrings.\n\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\non MDN.\n\n```res example\nJs.String2.splitByRe(\"art; bed , cog ;dad\", %re(\"/\\s*[,;]\\s*/\")) == [\n    Some(\"art\"),\n    Some(\"bed\"),\n    Some(\"cog\"),\n    Some(\"dad\"),\n  ]\n```\n*)\n\nexternal splitByReAtMost : t -> Js_re.t -> limit:int -> t option array = \"split\"\n  [@@bs.send]\n(**\n`splitByReAtMost(str, regex, ~limit:n)` splits the given `str` at every\noccurrence of `regex` and returns an array of the first `n` resulting\nsubstrings. If `n` is negative or greater than the number of substrings, the\narray will contain all the substrings.\n\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\non MDN.\n\n```res example\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=3) == [\n    Some(\"one\"),\n    Some(\"two\"),\n    Some(\"three\"),\n  ]\n\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=0) == []\n\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=8) == [\n    Some(\"one\"),\n    Some(\"two\"),\n    Some(\"three\"),\n    Some(\"four\"),\n  ]\n```\n*)\n\nexternal startsWith : t -> t -> bool = \"startsWith\"\n  [@@bs.send]\n(**\nES2015: `startsWith(str, substr)` returns `true` if the `str` starts with\n`substr`, `false` otherwise.\n\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\non MDN.\n\n```res example\nJs.String2.startsWith(\"BuckleScript\", \"Buckle\") == true\nJs.String2.startsWith(\"BuckleScript\", \"\") == true\nJs.String2.startsWith(\"JavaScript\", \"Buckle\") == false\n```\n*)\n\nexternal startsWithFrom : t -> t -> int -> bool = \"startsWith\"\n  [@@bs.send]\n(**\nES2015: `startsWithFrom(str, substr, n)` returns `true` if the `str` starts\nwith `substr` starting at position `n`, false otherwise. If `n` is negative,\nthe search starts at the beginning of `str`.\n\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\non MDN.\n\n```res example\nJs.String2.startsWithFrom(\"BuckleScript\", \"kle\", 3) == true\nJs.String2.startsWithFrom(\"BuckleScript\", \"\", 3) == true\nJs.String2.startsWithFrom(\"JavaScript\", \"Buckle\", 2) == false\n```\n*)\n\nexternal substr : t -> from:int -> t = \"substr\"\n  [@@bs.send]\n(**\n`substr(str, ~from:n)` returns the substring of `str` from position `n` to the\nend of the string.\n- If `n` is less than zero, the starting position is the length of `str - n`.\n- If `n` is greater than or equal to the length of `str`, returns the empty string.\n\nJavaScriptâ€™s `String.substr()` is a legacy function. When possible, use\n`substring()` instead.\n\nSee [`String.substr`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr)\non MDN.\n\n```res example\nJs.String2.substr(\"abcdefghij\", ~from=3) == \"defghij\"\nJs.String2.substr(\"abcdefghij\", ~from=-3) == \"hij\"\nJs.String2.substr(\"abcdefghij\", ~from=12) == \"\"\n```\n*)\n\nexternal substrAtMost : t -> from:int -> length:int -> t = \"substr\"\n  [@@bs.send]\n(**\n`substrAtMost(str, ~from: pos, ~length: n)` returns the substring of `str` of\nlength `n` starting at position `pos`.\n- If `pos` is less than zero, the starting position is the length of `str - pos`.\n- If `pos` is greater than or equal to the length of `str`, returns the empty string.\n- If `n` is less than or equal to zero, returns the empty string.\n\nJavaScriptâ€™s `String.substr()` is a legacy function. When possible, use\n`substring()` instead.\n\nSee [`String.substr`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr)\non MDN.\n\n```res example\nJs.String2.substrAtMost(\"abcdefghij\", ~from=3, ~length=4) == \"defg\"\nJs.String2.substrAtMost(\"abcdefghij\", ~from=-3, ~length=4) == \"hij\"\nJs.String2.substrAtMost(\"abcdefghij\", ~from=12, ~length=2) == \"\"\n```\n*)\n\nexternal substring : t -> from:int -> to_:int -> t = \"substring\"\n  [@@bs.send]\n(**\n`substring(str, ~from: start, ~to_: finish)` returns characters `start` up to\nbut not including finish from `str`.\n- If `start` is less than zero, it is treated as zero.\n- If `finish` is zero or negative, the empty string is returned.\n- If `start` is greater than `finish`, the `start` and `finish` points are swapped.\n\nSee [`String.substring`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring) on MDN.\n\n```res example\nJs.String2.substring(\"playground\", ~from=3, ~to_=6) == \"ygr\"\nJs.String2.substring(\"playground\", ~from=6, ~to_=3) == \"ygr\"\nJs.String2.substring(\"playground\", ~from=4, ~to_=12) == \"ground\"\n```\n*)\n\nexternal substringToEnd : t -> from:int -> t = \"substring\"\n  [@@bs.send]\n(**\n`substringToEnd(str, ~from: start)` returns the substring of `str` from\nposition `start` to the end.\n- If `start` is less than or equal to zero, the entire string is returned.\n- If `start` is greater than or equal to the length of `str`, the empty string is returned.\n\nSee [`String.substring`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring) on MDN.\n\n```res example\nJs.String2.substringToEnd(\"playground\", ~from=4) == \"ground\"\nJs.String2.substringToEnd(\"playground\", ~from=-3) == \"playground\"\nJs.String2.substringToEnd(\"playground\", ~from=12) == \"\"\n```\n*)\n\nexternal toLowerCase : t -> t = \"toLowerCase\"\n  [@@bs.send]\n(**\n`toLowerCase(str)` converts `str` to lower case using the locale-insensitive\ncase mappings in the Unicode Character Database. Notice that the conversion can\ngive different results depending upon context, for example with the Greek\nletter sigma, which has two different lower case forms; one when it is the last\ncharacter in a string and another when it is not.\n\nSee [`String.toLowerCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase)\non MDN.\n\n```res example\nJs.String2.toLowerCase(\"ABC\") == \"abc\"\nJs.String2.toLowerCase(`Î£Î `) == `ÏƒÏ€`\nJs.String2.toLowerCase(`Î Î£`) == `Ï€Ï‚`\n```\n*)\n\nexternal toLocaleLowerCase : t -> t = \"toLocaleLowerCase\"\n  [@@bs.send]\n(**\n`toLocaleLowerCase(str)` converts `str` to lower case using the current locale.\nSee [`String.toLocaleLowerCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase)\non MDN.\n*)\n\nexternal toUpperCase : t -> t = \"toUpperCase\"\n  [@@bs.send]\n(**\n`toUpperCase(str)` converts `str` to upper case using the locale-insensitive\ncase mappings in the Unicode Character Database. Notice that the conversion can\nexpand the number of letters in the result; for example the German ÃŸ\ncapitalizes to two Ses in a row.\n\nSee [`String.toUpperCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase)\non MDN.\n\n```res example\nJs.String2.toUpperCase(\"abc\") == \"ABC\"\nJs.String2.toUpperCase(`StraÃŸe`) == `STRASSE`\nJs.String2.toUpperCase(`Ï€Ï‚`) == `Î Î£`\n```\n*)\n\nexternal toLocaleUpperCase : t -> t = \"toLocaleUpperCase\"\n  [@@bs.send]\n(**\n`toLocaleUpperCase(str)` converts `str` to upper case using the current locale.\nSee [`String.to:LocaleUpperCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase)\non MDN.\n*)\n\nexternal trim : t -> t = \"trim\"\n  [@@bs.send]\n(**\n`trim(str)` returns a string that is `str` with whitespace stripped from both\nends. Internal whitespace is not removed.\n\nSee [`String.trim`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim)\non MDN.\n\n```res example\nJs.String2.trim(\"   abc def   \") == \"abc def\"\nJs.String2.trim(\"\\n\\r\\t abc def \\n\\n\\t\\r \") == \"abc def\"\n```\n*)\n\n(* HTML wrappers *)\n\nexternal anchor : t -> t -> t = \"anchor\"\n  [@@bs.send]\n(**\n`anchor(anchorText, anchorName)` creates a string with an HTML `<a>` element\nwith name attribute of `anchorName` and `anchorText` as its content. Please do\nnot use this method, as it has been removed from the relevant web standards.\n\nSee [`String.anchor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/anchor)\non MDN.\n\n```res example\nJs.String2.anchor(\"Page One\", \"page1\") == \"<a name=\\\"page1\\\">Page One</a>\"\n```\n*)\n\nexternal link : t -> t -> t = \"link\"\n  [@@bs.send]\n(**\nES2015: `link(linkText, urlText)` creates a string with an HTML `<a>` element\nwith href attribute of `urlText` and `linkText` as its content. Please do not\nuse this method, as it has been removed from the relevant web standards. See\n[`String.link`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/link)\non MDN.\n\n```res example\nJs.String2.link(\"Go to page two\", \"page2.html\") == \"<a href=\\\"page2.html\\\">Go to page two</a>\"\n```\n*)\n\n(* FIXME: we should not encourage people to use [%identity], better\n    to provide something using [@@bs.val] so that we can track such\n    casting\n*)\nexternal castToArrayLike : t -> t Js_array2.array_like = \"%identity\"\n(**\nCasts its argument to an `array_like` entity that can be processed by functions\nsuch as `Js.Array2.fromMap()`\n\n```res example\nlet s = \"abcde\"\nlet arr = Js.Array2.fromMap(Js.String2.castToArrayLike(s), x => x)\narr == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n```\n*)\n"}}}
bs-platform could not be found
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/js_string2.ml"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/js_string2.ml","languageId":"ocaml","version":1,"text":"(* Copyright (C) 2015-2016 Bloomberg Finance L.P.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * In addition to the permissions granted to you by the LGPL, you may combine\n * or link a \"work that uses the Library\" with a publicly distributed version\n * of this file to produce a combined library or application, then distribute\n * that combined work under the terms of your choosing, with no requirement\n * to comply with the obligations normally placed on you by section 4 of the\n * LGPL version 3 (or the corresponding section of a later version of the LGPL\n * should you choose to use a later version).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)\n\n(** Provide bindings to JS string. Optimized for pipe-first. *)\n\ntype t = string\n\nexternal make : 'a -> t = \"String\"\n  [@@bs.val]\n(**\n`make(value)` converts the given value to a `string`.\n\n```res example\nJs.String2.make(3.5) == \"3.5\"\nJs.String2.make([1, 2, 3]) == \"1,2,3\"\n```\n*)\n\nexternal fromCharCode : int -> t = \"String.fromCharCode\"\n  [@@bs.val]\n(**\n`fromCharCode(n)` creates a `string` containing the character corresponding to\nthat number; `n` ranges from 0 to 65535.If out of range, the lower 16 bits of\nthe value are used. Thus, `fromCharCode(0x1F63A)` gives the same result as\n`fromCharCode(0xF63A)`.\n\nSee [`String.fromCharCode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)\non MDN.\n\n```res example\nJs.String2.fromCharCode(65) == \"A\"\nJs.String2.fromCharCode(0x3c8) == `Ïˆ`\nJs.String2.fromCharCode(0xd55c) == `í•œ`\nJs.String2.fromCharCode(-64568) == `Ïˆ`\n```\n*)\n\nexternal fromCharCodeMany : int array -> t = \"String.fromCharCode\"\n  [@@bs.val] [@@bs.splice]\n(**\n`fromCharCodeMany([n1, n2, n3])` creates a `string` from the characters\ncorresponding to the given numbers, using the same rules as `fromCharCode`.\n\nSee [`String.fromCharCode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)\non MDN.\n*)\n\nexternal fromCodePoint : int -> t = \"String.fromCodePoint\"\n  [@@bs.val]\n(**\n`fromCodePoint(n)` creates a `string` containing the character corresponding to\nthat numeric code point. If the number is not a valid code point, it raises\n`RangeError`. Thus, `fromCodePoint(0x1F63A)` will produce a correct value,\nunlike `fromCharCode(0x1F63A)`, and `fromCodePoint(-5)` will raise a\n`RangeError`.\n\nSee [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\non MDN.\n\n```res example\nJs.String2.fromCodePoint(65) == \"A\"\nJs.String2.fromCodePoint(0x3c8) == `Ïˆ`\nJs.String2.fromCodePoint(0xd55c) == `í•œ`\nJs.String2.fromCodePoint(0x1f63a) == `ðŸ˜º`\n```\n*)\n\nexternal fromCodePointMany : int array -> t = \"String.fromCodePoint\"\n  [@@bs.val] [@@bs.splice]\n(**\n`fromCodePointMany([n1, n2, n3])` creates a `string` from the characters\ncorresponding to the given code point numbers, using the same rules as\n`fromCodePoint`.\n\nSee [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\non MDN.\n\n```res example\nJs.String2.fromCodePointMany([0xd55c, 0xae00, 0x1f63a]) == `í•œê¸€ðŸ˜º`\n```\n*)\n\n(* String.raw: ES2015, meant to be used with template strings, not directly *)\n\nexternal length : t -> int = \"length\"\n  [@@bs.get]\n(**\n`length(s)` returns the length of the given `string`.\n\nSee [`String.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length)\non MDN.\n\n```res example\nJs.String2.length(\"abcd\") == 4\n```\n*)\n\nexternal get : t -> int -> t = \"\"\n  [@@bs.get_index]\n(**\n`get(s, n)` returns as a `string` the character at the given index number. If\n`n` is out of range, this function returns `undefined`,so at some point this\nfunction may be modified to return `option(string)`.\n\n```res example\nJs.String2.get(\"Reason\", 0) == \"R\"\nJs.String2.get(\"Reason\", 4) == \"o\"\nJs.String2.get(`Ráº½asÃ¶Å„`, 5) == `Å„`\n```\n*)\n\nexternal charAt : t -> int -> t = \"charAt\"\n  [@@bs.send]\n(**\n`charAt(s, n)` gets the character at index `n` within string `s`. If `n` is\nnegative or greater than the length of `s`, it returns the empty string. If the\nstring contains characters outside the range \\u0000-\\uffff, it will return the\nfirst 16-bit value at that position in the string.\n\nSee [`String.charAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt)\non MDN.\n\n```res example\nJs.String2.charAt(\"Reason\", 0) == \"R\"\nJs.String2.charAt(\"Reason\", 12) == \"\"\nJs.String2.charAt(`Ráº½asÃ¶Å„`, 5) == `Å„`\n```\n*)\n\nexternal charCodeAt : t -> int -> float = \"charCodeAt\"\n  [@@bs.send]\n(**\n`charCodeAt(s, n)` returns the character code at position `n` in string `s`;\nthe result is in the range 0-65535, unlke `codePointAt`, so it will not work\ncorrectly for characters with code points greater than or equal to 0x10000. The\nreturn type is `float` because this function returns NaN if `n` is less than\nzero or greater than the length of the string.\n\nSee [`String.charCodeAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt)\non MDN.\n\n```res example\nJs.String2.charCodeAt(`ðŸ˜º`, 0) == 0xd83d->Belt.Int.toFloat\nJs.String2.codePointAt(`ðŸ˜º`, 0) == Some(0x1f63a)\n```\n*)\n\nexternal codePointAt : t -> int -> int option = \"codePointAt\"\n  [@@bs.send]\n(**\n`codePointAt(s, n)` returns the code point at position `n` within string `s` as\na `Some(value)`. The return value handles code points greater than or equal to\n0x10000. If there is no code point at the given position, the function returns\n`None`.\n\nSee [`String.codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)\non MDN.\n\n```res example\nJs.String2.codePointAt(`Â¿ðŸ˜º?`, 1) == Some(0x1f63a)\nJs.String2.codePointAt(\"abc\", 5) == None\n```\n*)\n\nexternal concat : t -> t -> t = \"concat\"\n  [@@bs.send]\n(**\n`concat(original, append)` returns a new `string` with `append` added after\n`original`.\n\nSee [`String.concat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat)\non MDN.\n\n```res example\nJs.String2.concat(\"cow\", \"bell\") == \"cowbell\"\n```\n*)\n\nexternal concatMany : t -> t array -> t = \"concat\"\n  [@@bs.send] [@@bs.splice]\n(**\n`concatMany(original, arr)` returns a new `string` consisting of each item of an\narray of strings added to the `original` string.\n\nSee [`String.concat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat)\non MDN.\n\n```res example\nJs.String2.concatMany(\"1st\", [\"2nd\", \"3rd\", \"4th\"]) == \"1st2nd3rd4th\"\n```\n*)\n\nexternal endsWith : t -> t -> bool = \"endsWith\"\n  [@@bs.send]\n(**\nES2015: `endsWith(str, substr)` returns `true` if the `str` ends with `substr`,\n`false` otherwise.\n\nSee [`String.endsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith)\non MDN.\n\n```res example\nJs.String2.endsWith(\"BuckleScript\", \"Script\") == true\nJs.String2.endsWith(\"BuckleShoes\", \"Script\") == false\n```\n*)\n\nexternal endsWithFrom : t -> t -> int -> bool = \"endsWith\"\n  [@@bs.send]\n(**\n`endsWithFrom(str, ending, len)` returns `true` if the first len characters of\n`str` end with `ending`, `false` otherwise. If `len` is greater than or equal\nto the length of `str`, then it works like `endsWith`. (Honestly, this should\nhave been named endsWithAt, but oh well).\n\nSee [`String.endsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith)\non MDN.\n\n```res example\nJs.String2.endsWithFrom(\"abcd\", \"cd\", 4) == true\nJs.String2.endsWithFrom(\"abcde\", \"cd\", 3) == false\nJs.String2.endsWithFrom(\"abcde\", \"cde\", 99) == true\nJs.String2.endsWithFrom(\"example.dat\", \"ple\", 7) == true\n```\n*)\n\nexternal includes : t -> t -> bool = \"includes\"\n  [@@bs.send]\n(**\nES2015: `includes(str, searchValue)` returns `true` if `searchValue` is found\nanywhere within `str`, false otherwise.\n\nSee [`String.includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes)\non MDN.\n\n```res example\nJs.String2.includes(\"programmer\", \"gram\") == true\nJs.String2.includes(\"programmer\", \"er\") == true\nJs.String2.includes(\"programmer\", \"pro\") == true\nJs.String2.includes(\"programmer.dat\", \"xyz\") == false\n```\n*)\n\nexternal includesFrom : t -> t -> int -> bool = \"includes\"\n  [@@bs.send]\n(**\nES2015: `includes(str, searchValue start)` returns `true` if `searchValue` is\nfound anywhere within `str` starting at character number `start` (where 0 is\nthe first character), `false` otherwise.\n\nSee [`String.includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes)\non MDN.\n\n```res example\nJs.String2.includesFrom(\"programmer\", \"gram\", 1) == true\nJs.String2.includesFrom(\"programmer\", \"gram\", 4) == false\nJs.String2.includesFrom(`ëŒ€í•œë¯¼êµ­`, `í•œ`, 1) == true\n```\n*)\n\nexternal indexOf : t -> t -> int = \"indexOf\"\n  [@@bs.send]\n(**\nES2015: `indexOf(str, searchValue)` returns the position at which `searchValue`\nwas first found within `str`, or -1 if `searchValue` is not in `str`.\n\nSee [`String.indexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf)\non MDN.\n\n```res example\nJs.String2.indexOf(\"bookseller\", \"ok\") == 2\nJs.String2.indexOf(\"bookseller\", \"sell\") == 4\nJs.String2.indexOf(\"beekeeper\", \"ee\") == 1\nJs.String2.indexOf(\"bookseller\", \"xyz\") == -1\n```\n*)\n\nexternal indexOfFrom : t -> t -> int -> int = \"indexOf\"\n  [@@bs.send]\n(**\n`indexOfFrom(str, searchValue, start)` returns the position at which\n`searchValue` was found within `str` starting at character position `start`, or\n-1 if `searchValue` is not found in that portion of `str`. The return value is\nrelative to the beginning of the string, no matter where the search started\nfrom.\n\nSee [`String.indexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf)\non MDN.\n\n```res example\nJs.String2.indexOfFrom(\"bookseller\", \"ok\", 1) == 2\nJs.String2.indexOfFrom(\"bookseller\", \"sell\", 2) == 4\nJs.String2.indexOfFrom(\"bookseller\", \"sell\", 5) == -1\n```\n*)\n\nexternal lastIndexOf : t -> t -> int = \"lastIndexOf\"\n  [@@bs.send]\n(**\n`lastIndexOf(str, searchValue)` returns the position of the last occurrence of\n`searchValue` within `str`, searching backwards from the end of the string.\nReturns -1 if `searchValue` is not in `str`. The return value is always\nrelative to the beginning of the string.\n\nSee [`String.lastIndexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf)\non MDN.\n\n```res example\nJs.String2.lastIndexOf(\"bookseller\", \"ok\") == 2\nJs.String2.lastIndexOf(\"beekeeper\", \"ee\") == 4\nJs.String2.lastIndexOf(\"abcdefg\", \"xyz\") == -1\n```\n*)\n\nexternal lastIndexOfFrom : t -> t -> int -> int = \"lastIndexOf\"\n  [@@bs.send]\n(**\n`lastIndexOfFrom(str, searchValue, start)` returns the position of the last\noccurrence of `searchValue` within `str`, searching backwards from the given\nstart position. Returns -1 if `searchValue` is not in `str`. The return value\nis always relative to the beginning of the string.\n\nSee [`String.lastIndexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf)\non MDN.\n\n```res example\nJs.String2.lastIndexOfFrom(\"bookseller\", \"ok\", 6) == 2\nJs.String2.lastIndexOfFrom(\"beekeeper\", \"ee\", 8) == 4\nJs.String2.lastIndexOfFrom(\"beekeeper\", \"ee\", 3) == 1\nJs.String2.lastIndexOfFrom(\"abcdefg\", \"xyz\", 4) == -1\n```\n*)\n\n(* extended by ECMA-402 *)\n\nexternal localeCompare : t -> t -> float = \"localeCompare\"\n  [@@bs.send]\n(**\n`localeCompare(reference, comparison)` returns\n- a negative value if reference comes before comparison in sort order\n- zero if reference and comparison have the same sort order\n- a positive value if reference comes after comparison in sort order\n\nSee [`String.localeCompare`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare) on MDN.\n\n```res example\nJs.String2.localeCompare(\"zebra\", \"ant\") > 0.0\nJs.String2.localeCompare(\"ant\", \"zebra\") < 0.0\nJs.String2.localeCompare(\"cat\", \"cat\") == 0.0\nJs.String2.localeCompare(\"CAT\", \"cat\") > 0.0\n```\n*)\n\nexternal match_ : t -> Js_re.t -> t option array option = \"match\"\n  [@@bs.send] [@@bs.return { null_to_opt }]\n(**\n`match(str, regexp)` matches a `string` against the given `regexp`. If there is\nno match, it returns `None`. For regular expressions without the g modifier, if\n  there is a match, the return value is `Some(array)` where the array contains:\n- The entire matched string\n- Any capture groups if the regexp had parentheses\nFor regular expressions with the g modifier, a matched expression returns\n`Some(array)` with all the matched substrings and no capture groups.\n\nSee [`String.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\non MDN.\n\n```res example\nJs.String2.match_(\"The better bats\", %re(\"/b[aeiou]t/\")) == Some([\"bet\"])\nJs.String2.match_(\"The better bats\", %re(\"/b[aeiou]t/g\")) == Some([\"bet\", \"bat\"])\nJs.String2.match_(\"Today is 2018-04-05.\", %re(\"/(\\d+)-(\\d+)-(\\d+)/\")) ==\n  Some([\"2018-04-05\", \"2018\", \"04\", \"05\"])\nJs.String2.match_(\"The large container.\", %re(\"/b[aeiou]g/\")) == None\n```\n*)\n\nexternal normalize : t -> t = \"normalize\"\n  [@@bs.send]\n(**\n`normalize(str)` returns the normalized Unicode string using Normalization Form\nCanonical (NFC) Composition. Consider the character Ã£, which can be represented\nas the single codepoint \\u00e3 or the combination of a lower case letter A\n\\u0061 and a combining tilde \\u0303. Normalization ensures that both can be\nstored in an equivalent binary representation.\n\nSee [`String.normalize`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)\non MDN. See also [Unicode technical report\n#15](https://unicode.org/reports/tr15/) for details.\n*)\n\nexternal normalizeByForm : t -> t -> t = \"normalize\"\n  [@@bs.send]\n(**\nES2015: `normalize(str, form)` returns the normalized Unicode string using the\nspecified form of normalization, which may be one of:\n- \"NFC\" â€” Normalization Form Canonical Composition.\n- \"NFD\" â€” Normalization Form Canonical Decomposition.\n- \"NFKC\" â€” Normalization Form Compatibility Composition.\n- \"NFKD\" â€” Normalization Form Compatibility Decomposition.\n\nSee [`String.normalize`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize) on MDN.\nSee also [Unicode technical report #15](https://unicode.org/reports/tr15/) for details.\n*)\n\nexternal repeat : t -> int -> t = \"repeat\"\n  [@@bs.send]\n(**\n`repeat(str, n)` returns a `string` that consists of `n` repetitions of `str`.\nRaises `RangeError` if `n` is negative.\n\nSee [`String.repeat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat)\non MDN.\n\n```res example\nJs.String2.repeat(\"ha\", 3) == \"hahaha\"\nJs.String2.repeat(\"empty\", 0) == \"\"\n```\n*)\n\nexternal replace : t -> t -> t -> t = \"replace\"\n  [@@bs.send]\n(**\nES2015: `replace(str, substr, newSubstr)` returns a new `string` which is\nidentical to `str` except with the first matching instance of `substr` replaced\nby `newSubstr`. `substr` is treated as a verbatim string to match, not a\nregular expression.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nJs.String2.replace(\"old string\", \"old\", \"new\") == \"new string\"\nJs.String2.replace(\"the cat and the dog\", \"the\", \"this\") == \"this cat and the dog\"\n```\n*)\n\nexternal replaceByRe : t -> Js_re.t -> t -> t = \"replace\"\n  [@@bs.send]\n(**\n`replaceByRe(str, regex, replacement)` returns a new `string` where occurrences\nmatching regex have been replaced by `replacement`.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nJs.String2.replaceByRe(\"vowels be gone\", %re(\"/[aeiou]/g\"), \"x\") == \"vxwxls bx gxnx\"\nJs.String2.replaceByRe(\"Juan Fulano\", %re(\"/(\\w+) (\\w+)/\"), \"$2, $1\") == \"Fulano, Juan\"\n```\n*)\n\nexternal unsafeReplaceBy0 :\n  t -> Js_re.t -> ((t -> int -> t -> t)[@bs.uncurry]) -> t = \"replace\"\n  [@@bs.send]\n(**\nReturns a new `string` with some or all matches of a pattern with no capturing\nparentheses replaced by the value returned from the given function. The\nfunction receives as its parameters the matched string, the offset at which the\nmatch begins, and the whole string being matched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nlet str = \"beautiful vowels\"\nlet re = %re(\"/[aeiou]/g\")\nlet matchFn = (matchPart, _offset, _wholeString) => Js.String2.toUpperCase(matchPart)\n\nJs.String2.unsafeReplaceBy0(str, re, matchFn) == \"bEAUtIfUl vOwEls\"\n```\n*)\n\nexternal unsafeReplaceBy1 :\n  t -> Js_re.t -> ((t -> t -> int -> t -> t)[@bs.uncurry]) -> t = \"replace\"\n  [@@bs.send]\n(**\nReturns a new `string` with some or all matches of a pattern with one set of\ncapturing parentheses replaced by the value returned from the given function.\nThe function receives as its parameters the matched string, the captured\nstring, the offset at which the match begins, and the whole string being\nmatched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nlet str = \"Jony is 40\"\nlet re = %re(\"/(Jony is )\\d+/g\")\nlet matchFn = (_match, part1, _offset, _wholeString) => {\n  part1 ++ \"41\"\n}\n\nJs.String2.unsafeReplaceBy1(str, re, matchFn) == \"Jony is 41\"\n```\n*)\n\nexternal unsafeReplaceBy2 :\n  t -> Js_re.t -> ((t -> t -> t -> int -> t -> t)[@bs.uncurry]) -> t = \"replace\"\n  [@@bs.send]\n(**\nReturns a new `string` with some or all matches of a pattern with two sets of\ncapturing parentheses replaced by the value returned from the given function.\nThe function receives as its parameters the matched string, the captured\nstrings, the offset at which the match begins, and the whole string being\nmatched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nlet str = \"7 times 6\"\nlet re = %re(\"/(\\d+) times (\\d+)/\")\nlet matchFn = (_match, p1, p2, _offset, _wholeString) => {\n  switch (Belt.Int.fromString(p1), Belt.Int.fromString(p2)) {\n  | (Some(x), Some(y)) => Belt.Int.toString(x * y)\n  | _ => \"???\"\n  }\n}\n\nJs.String2.unsafeReplaceBy2(str, re, matchFn) == \"42\"\n```\n*)\n\nexternal unsafeReplaceBy3 :\n  t -> Js_re.t -> ((t -> t -> t -> t -> int -> t -> t)[@bs.uncurry]) -> t\n  = \"replace\"\n  [@@bs.send]\n(**\nReturns a new `string` with some or all matches of a pattern with three sets of\ncapturing parentheses replaced by the value returned from the given function.\nThe function receives as its parameters the matched string, the captured\nstrings, the offset at which the match begins, and the whole string being\nmatched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n*)\n\nexternal search : t -> Js_re.t -> int = \"search\"\n  [@@bs.send]\n(**\n`search(str, regexp)` returns the starting position of the first match of\n`regexp` in the given `str`, or -1 if there is no match.\n\nSee [`String.search`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search)\non MDN.\n\n```res example\nJs.String2.search(\"testing 1 2 3\", %re(\"/\\d+/\")) == 8\nJs.String2.search(\"no numbers\", %re(\"/\\d+/\")) == -1\n```\n*)\n\nexternal slice : t -> from:int -> to_:int -> t = \"slice\"\n  [@@bs.send]\n(**\n`slice(str, from:n1, to_:n2)` returns the substring of `str` starting at\ncharacter `n1` up to but not including `n2`.\n- If either `n1` or `n2` is negative, then it is evaluated as `length(str - n1)` or `length(str - n2)`.\n- If `n2` is greater than the length of `str`, then it is treated as `length(str)`.\n- If `n1` is greater than `n2`, slice returns the empty string.\n\nSee [`String.slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) on MDN.\n\n```res example\nJs.String2.slice(\"abcdefg\", ~from=2, ~to_=5) == \"cde\"\nJs.String2.slice(\"abcdefg\", ~from=2, ~to_=9) == \"cdefg\"\nJs.String2.slice(\"abcdefg\", ~from=-4, ~to_=-2) == \"de\"\nJs.String2.slice(\"abcdefg\", ~from=5, ~to_=1) == \"\"\n```\n*)\n\nexternal sliceToEnd : t -> from:int -> t = \"slice\"\n  [@@bs.send]\n(**\n`sliceToEnd(str, from:n)` returns the substring of `str` starting at character\n`n` to the end of the string.\n- If `n` is negative, then it is evaluated as `length(str - n)`.\n- If `n` is greater than the length of `str`, then sliceToEnd returns the empty string.\n\nSee [`String.slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) on MDN.\n\n```res example\nJs.String2.sliceToEnd(\"abcdefg\", ~from=4) == \"efg\"\nJs.String2.sliceToEnd(\"abcdefg\", ~from=-2) == \"fg\"\nJs.String2.sliceToEnd(\"abcdefg\", ~from=7) == \"\"\n```\n*)\n\nexternal split : t -> t -> t array = \"split\"\n  [@@bs.send]\n(**\n`split(str, delimiter)` splits the given `str` at every occurrence of\n`delimiter` and returns an array of the resulting substrings.\n\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\non MDN.\n\n```res example\nJs.String2.split(\"2018-01-02\", \"-\") == [\"2018\", \"01\", \"02\"]\nJs.String2.split(\"a,b,,c\", \",\") == [\"a\", \"b\", \"\", \"c\"]\nJs.String2.split(\"good::bad as great::awful\", \"::\") == [\"good\", \"bad as great\", \"awful\"]\nJs.String2.split(\"has-no-delimiter\", \";\") == [\"has-no-delimiter\"]\n```\n*)\n\nexternal splitAtMost : t -> t -> limit:int -> t array = \"split\"\n  [@@bs.send]\n(**\n  `splitAtMost delimiter ~limit: n str` splits the given `str` at every occurrence of `delimiter` and returns an array of the first `n` resulting substrings. If `n` is negative or greater than the number of substrings, the array will contain all the substrings.\n\n```\nsplitAtMost \"ant/bee/cat/dog/elk\" \"/\" ~limit: 3 = [|\"ant\"; \"bee\"; \"cat\"|];;\nsplitAtMost \"ant/bee/cat/dog/elk\" \"/\" ~limit: 0 = [| |];;\nsplitAtMost \"ant/bee/cat/dog/elk\" \"/\" ~limit: 9 = [|\"ant\"; \"bee\"; \"cat\"; \"dog\"; \"elk\"|];;\n```\n*)\n\nexternal splitByRe : t -> Js_re.t -> t option array = \"split\"\n  [@@bs.send]\n(**\n`splitByRe(str, regex)` splits the given `str` at every occurrence of `regex`\nand returns an array of the resulting substrings.\n\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\non MDN.\n\n```res example\nJs.String2.splitByRe(\"art; bed , cog ;dad\", %re(\"/\\s*[,;]\\s*/\")) == [\n    Some(\"art\"),\n    Some(\"bed\"),\n    Some(\"cog\"),\n    Some(\"dad\"),\n  ]\n```\n*)\n\nexternal splitByReAtMost : t -> Js_re.t -> limit:int -> t option array = \"split\"\n  [@@bs.send]\n(**\n`splitByReAtMost(str, regex, ~limit:n)` splits the given `str` at every\noccurrence of `regex` and returns an array of the first `n` resulting\nsubstrings. If `n` is negative or greater than the number of substrings, the\narray will contain all the substrings.\n\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\non MDN.\n\n```res example\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=3) == [\n    Some(\"one\"),\n    Some(\"two\"),\n    Some(\"three\"),\n  ]\n\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=0) == []\n\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=8) == [\n    Some(\"one\"),\n    Some(\"two\"),\n    Some(\"three\"),\n    Some(\"four\"),\n  ]\n```\n*)\n\nexternal startsWith : t -> t -> bool = \"startsWith\"\n  [@@bs.send]\n(**\nES2015: `startsWith(str, substr)` returns `true` if the `str` starts with\n`substr`, `false` otherwise.\n\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\non MDN.\n\n```res example\nJs.String2.startsWith(\"BuckleScript\", \"Buckle\") == true\nJs.String2.startsWith(\"BuckleScript\", \"\") == true\nJs.String2.startsWith(\"JavaScript\", \"Buckle\") == false\n```\n*)\n\nexternal startsWithFrom : t -> t -> int -> bool = \"startsWith\"\n  [@@bs.send]\n(**\nES2015: `startsWithFrom(str, substr, n)` returns `true` if the `str` starts\nwith `substr` starting at position `n`, false otherwise. If `n` is negative,\nthe search starts at the beginning of `str`.\n\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\non MDN.\n\n```res example\nJs.String2.startsWithFrom(\"BuckleScript\", \"kle\", 3) == true\nJs.String2.startsWithFrom(\"BuckleScript\", \"\", 3) == true\nJs.String2.startsWithFrom(\"JavaScript\", \"Buckle\", 2) == false\n```\n*)\n\nexternal substr : t -> from:int -> t = \"substr\"\n  [@@bs.send]\n(**\n`substr(str, ~from:n)` returns the substring of `str` from position `n` to the\nend of the string.\n- If `n` is less than zero, the starting position is the length of `str - n`.\n- If `n` is greater than or equal to the length of `str`, returns the empty string.\n\nJavaScriptâ€™s `String.substr()` is a legacy function. When possible, use\n`substring()` instead.\n\nSee [`String.substr`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr)\non MDN.\n\n```res example\nJs.String2.substr(\"abcdefghij\", ~from=3) == \"defghij\"\nJs.String2.substr(\"abcdefghij\", ~from=-3) == \"hij\"\nJs.String2.substr(\"abcdefghij\", ~from=12) == \"\"\n```\n*)\n\nexternal substrAtMost : t -> from:int -> length:int -> t = \"substr\"\n  [@@bs.send]\n(**\n`substrAtMost(str, ~from: pos, ~length: n)` returns the substring of `str` of\nlength `n` starting at position `pos`.\n- If `pos` is less than zero, the starting position is the length of `str - pos`.\n- If `pos` is greater than or equal to the length of `str`, returns the empty string.\n- If `n` is less than or equal to zero, returns the empty string.\n\nJavaScriptâ€™s `String.substr()` is a legacy function. When possible, use\n`substring()` instead.\n\nSee [`String.substr`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr)\non MDN.\n\n```res example\nJs.String2.substrAtMost(\"abcdefghij\", ~from=3, ~length=4) == \"defg\"\nJs.String2.substrAtMost(\"abcdefghij\", ~from=-3, ~length=4) == \"hij\"\nJs.String2.substrAtMost(\"abcdefghij\", ~from=12, ~length=2) == \"\"\n```\n*)\n\nexternal substring : t -> from:int -> to_:int -> t = \"substring\"\n  [@@bs.send]\n(**\n`substring(str, ~from: start, ~to_: finish)` returns characters `start` up to\nbut not including finish from `str`.\n- If `start` is less than zero, it is treated as zero.\n- If `finish` is zero or negative, the empty string is returned.\n- If `start` is greater than `finish`, the `start` and `finish` points are swapped.\n\nSee [`String.substring`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring) on MDN.\n\n```res example\nJs.String2.substring(\"playground\", ~from=3, ~to_=6) == \"ygr\"\nJs.String2.substring(\"playground\", ~from=6, ~to_=3) == \"ygr\"\nJs.String2.substring(\"playground\", ~from=4, ~to_=12) == \"ground\"\n```\n*)\n\nexternal substringToEnd : t -> from:int -> t = \"substring\"\n  [@@bs.send]\n(**\n`substringToEnd(str, ~from: start)` returns the substring of `str` from\nposition `start` to the end.\n- If `start` is less than or equal to zero, the entire string is returned.\n- If `start` is greater than or equal to the length of `str`, the empty string is returned.\n\nSee [`String.substring`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring) on MDN.\n\n```res example\nJs.String2.substringToEnd(\"playground\", ~from=4) == \"ground\"\nJs.String2.substringToEnd(\"playground\", ~from=-3) == \"playground\"\nJs.String2.substringToEnd(\"playground\", ~from=12) == \"\"\n```\n*)\n\nexternal toLowerCase : t -> t = \"toLowerCase\"\n  [@@bs.send]\n(**\n`toLowerCase(str)` converts `str` to lower case using the locale-insensitive\ncase mappings in the Unicode Character Database. Notice that the conversion can\ngive different results depending upon context, for example with the Greek\nletter sigma, which has two different lower case forms; one when it is the last\ncharacter in a string and another when it is not.\n\nSee [`String.toLowerCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase)\non MDN.\n\n```res example\nJs.String2.toLowerCase(\"ABC\") == \"abc\"\nJs.String2.toLowerCase(`Î£Î `) == `ÏƒÏ€`\nJs.String2.toLowerCase(`Î Î£`) == `Ï€Ï‚`\n```\n*)\n\nexternal toLocaleLowerCase : t -> t = \"toLocaleLowerCase\"\n  [@@bs.send]\n(**\n`toLocaleLowerCase(str)` converts `str` to lower case using the current locale.\nSee [`String.toLocaleLowerCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase)\non MDN.\n*)\n\nexternal toUpperCase : t -> t = \"toUpperCase\"\n  [@@bs.send]\n(**\n`toUpperCase(str)` converts `str` to upper case using the locale-insensitive\ncase mappings in the Unicode Character Database. Notice that the conversion can\nexpand the number of letters in the result; for example the German ÃŸ\ncapitalizes to two Ses in a row.\n\nSee [`String.toUpperCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase)\non MDN.\n\n```res example\nJs.String2.toUpperCase(\"abc\") == \"ABC\"\nJs.String2.toUpperCase(`StraÃŸe`) == `STRASSE`\nJs.String2.toUpperCase(`Ï€Ï‚`) == `Î Î£`\n```\n*)\n\nexternal toLocaleUpperCase : t -> t = \"toLocaleUpperCase\"\n  [@@bs.send]\n(**\n`toLocaleUpperCase(str)` converts `str` to upper case using the current locale.\nSee [`String.to:LocaleUpperCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase)\non MDN.\n*)\n\nexternal trim : t -> t = \"trim\"\n  [@@bs.send]\n(**\n`trim(str)` returns a string that is `str` with whitespace stripped from both\nends. Internal whitespace is not removed.\n\nSee [`String.trim`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim)\non MDN.\n\n```res example\nJs.String2.trim(\"   abc def   \") == \"abc def\"\nJs.String2.trim(\"\\n\\r\\t abc def \\n\\n\\t\\r \") == \"abc def\"\n```\n*)\n\n(* HTML wrappers *)\n\nexternal anchor : t -> t -> t = \"anchor\"\n  [@@bs.send]\n(**\n`anchor(anchorText, anchorName)` creates a string with an HTML `<a>` element\nwith name attribute of `anchorName` and `anchorText` as its content. Please do\nnot use this method, as it has been removed from the relevant web standards.\n\nSee [`String.anchor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/anchor)\non MDN.\n\n```res example\nJs.String2.anchor(\"Page One\", \"page1\") == \"<a name=\\\"page1\\\">Page One</a>\"\n```\n*)\n\nexternal link : t -> t -> t = \"link\"\n  [@@bs.send]\n(**\nES2015: `link(linkText, urlText)` creates a string with an HTML `<a>` element\nwith href attribute of `urlText` and `linkText` as its content. Please do not\nuse this method, as it has been removed from the relevant web standards. See\n[`String.link`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/link)\non MDN.\n\n```res example\nJs.String2.link(\"Go to page two\", \"page2.html\") == \"<a href=\\\"page2.html\\\">Go to page two</a>\"\n```\n*)\n\n(* FIXME: we should not encourage people to use [%identity], better\n    to provide something using [@@bs.val] so that we can track such\n    casting\n*)\nexternal castToArrayLike : t -> t Js_array2.array_like = \"%identity\"\n(**\nCasts its argument to an `array_like` entity that can be processed by functions\nsuch as `Js.Array2.fromMap()`\n\n```res example\nlet s = \"abcde\"\nlet arr = Js.Array2.fromMap(Js.String2.castToArrayLike(s), x => x)\narr == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n```\n*)\n"}}}
bs-platform could not be found
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/js_string2.ml"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/js.ml","languageId":"ocaml","version":1,"text":"(* Copyright (C) 2015-2016 Bloomberg Finance L.P.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * In addition to the permissions granted to you by the LGPL, you may combine\n * or link a \"work that uses the Library\" with a publicly distributed version\n * of this file to produce a combined library or application, then distribute\n * that combined work under the terms of your choosing, with no requirement\n * to comply with the obligations normally placed on you by section 4 of the\n * LGPL version 3 (or the corresponding section of a later version of the LGPL\n * should you choose to use a later version).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)\n\n[@@@bs.config { flags = [| \"-unboxed-types\"; \"-w\"; \"-49\" |] }]\n(* DESIGN:\n   - It does not have any code, all its code will be inlined so that\n       there will never be\n   {[ require('js')]}\n   - Its interface should be minimal\n*)\n\n(**\n  The Js module mostly contains ReScript bindings to _standard JavaScript APIs_\n  like [console.log](https://developer.mozilla.org/en-US/docs/Web/API/Console/log),\n  or the JavaScript\n  [String](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String),\n  [Date](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date), and\n  [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n  classes.\n\n  It is meant as a zero-abstraction interop layer and directly exposes JavaScript functions as they are. If you can find your API in this module, prefer this over an equivalent Belt helper. For example, prefer [Js.Array2](js/array-2) over [Belt.Array](belt/array)\n\n  ## Argument Order\n\n  For historical reasons, some APIs in the Js namespace (e.g. [Js.String](js/string)) are\n  using the data-last argument order whereas others (e.g. [Js.Date](js/date)) are using data-first.\n\n  For more information about these argument orders and the trade-offs between them, see\n  [this blog post](https://www.javierchavarri.com/data-first-and-data-last-a-comparison/).\n\n  _Eventually, all modules in the Js namespace are going to be migrated to data-first though._\n\n  In the meantime, there are several options for dealing with the data-last APIs:\n\n  ```res example\n  /* Js.String (data-last API used with pipe last operator) */\n  Js.log(\"2019-11-10\" |> Js.String.split(\"-\"))\n  Js.log(\"ReScript\" |> Js.String.startsWith(\"Re\"))\n\n  /* Js.String (data-last API used with pipe first operator) */\n  Js.log(\"2019-11-10\"->Js.String.split(\"-\", _))\n  Js.log(\"ReScript\"->Js.String.startsWith(\"Re\", _))\n\n  /* Js.String (data-last API used without any piping) */\n  Js.log(Js.String.split(\"-\", \"2019-11-10\"))\n  Js.log(Js.String.startsWith(\"Re\", \"ReScript\"))\n  ```\n  ## Js.Xxx2 Modules\n\n  Prefer `Js.Array2` over `Js.Array`, `Js.String2` over `Js.String`, etc. The latters are old modules.\n*)\n\ntype 'a t = < .. > as 'a\n(** JS object type *)\n\n(**/**)\n\n(* internal types for FFI, these types are not used by normal users\n    Absent cmi file when looking up module alias.\n*)\n\nmodule Fn = struct\n  type 'a arity0 = { i0 : unit -> 'a [@internal] }\n  type 'a arity1 = { i1 : 'a [@internal] }\n  type 'a arity2 = { i2 : 'a [@internal] }\n  type 'a arity3 = { i3 : 'a [@internal] }\n  type 'a arity4 = { i4 : 'a [@internal] }\n  type 'a arity5 = { i5 : 'a [@internal] }\n  type 'a arity6 = { i6 : 'a [@internal] }\n  type 'a arity7 = { i7 : 'a [@internal] }\n  type 'a arity8 = { i8 : 'a [@internal] }\n  type 'a arity9 = { i9 : 'a [@internal] }\n  type 'a arity10 = { i10 : 'a [@internal] }\n  type 'a arity11 = { i11 : 'a [@internal] }\n  type 'a arity12 = { i12 : 'a [@internal] }\n  type 'a arity13 = { i13 : 'a [@internal] }\n  type 'a arity14 = { i14 : 'a [@internal] }\n  type 'a arity15 = { i15 : 'a [@internal] }\n  type 'a arity16 = { i16 : 'a [@internal] }\n  type 'a arity17 = { i17 : 'a [@internal] }\n  type 'a arity18 = { i18 : 'a [@internal] }\n  type 'a arity19 = { i19 : 'a [@internal] }\n  type 'a arity20 = { i20 : 'a [@internal] }\n  type 'a arity21 = { i21 : 'a [@internal] }\n  type 'a arity22 = { i22 : 'a [@internal] }\nend\n\n(**/**)\n\nmodule MapperRt = Js_mapperRt\n\nmodule Internal = struct\n  open Fn\n\n  external opaqueFullApply : 'a -> 'a = \"%uncurried_apply\"\n\n  (* Use opaque instead of [._n] to prevent some optimizations happening *)\n  external run : 'a arity0 -> 'a = \"#run\"\n  external opaque : 'a -> 'a = \"%opaque\"\nend\n\n(**/**)\n\ntype +'a null\n(**\n  Nullable value of this type can be either null or 'a. This type is equivalent to Js.Null.t.\n*)\n\ntype +'a undefined\n(**\n  A value of this type can be either undefined or 'a. This type is equivalent to Js.Undefined.t.\n*)\n\ntype +'a nullable\n(**\n  A value of this type can be undefined, null or 'a. This type is equivalent to Js.Null_undefined.t.\n*)\n\ntype +'a null_undefined = 'a nullable\n\nexternal toOption : 'a nullable -> 'a option = \"#nullable_to_opt\"\nexternal undefinedToOption : 'a undefined -> 'a option = \"#undefined_to_opt\"\nexternal nullToOption : 'a null -> 'a option = \"#null_to_opt\"\nexternal isNullable : 'a nullable -> bool = \"#is_nullable\"\n\nexternal testAny : 'a -> bool = \"#is_nullable\"\n(** The same as {!test} except that it is more permissive on the types of input *)\n\ntype (+'a, +'e) promise\n(**\n  The promise type, defined here for interoperation across packages.\n  @deprecated please use `Js.Promise`.\n*)\n\nexternal null : 'a null = \"#null\"\n(**\n  The same as empty in `Js.Null`. Compiles to `null`.\n*)\n\nexternal undefined : 'a undefined = \"#undefined\"\n(**\n  The same as empty `Js.Undefined`. Compiles to `undefined`.\n*)\n\nexternal typeof : 'a -> string = \"#typeof\"\n(**\n`typeof x` will be compiled as `typeof x` in JS. Please consider functions in\n`Js.Types` for a type safe way of reflection.\n*)\n\nexternal log : 'a -> unit = \"log\"\n  [@@val] [@@scope \"console\"]\n(** Equivalent to console.log any value. *)\n\nexternal log2 : 'a -> 'b -> unit = \"log\" [@@bs.val] [@@bs.scope \"console\"]\nexternal log3 : 'a -> 'b -> 'c -> unit = \"log\" [@@bs.val] [@@bs.scope \"console\"]\n\nexternal log4 : 'a -> 'b -> 'c -> 'd -> unit = \"log\"\n  [@@bs.val] [@@bs.scope \"console\"]\n\nexternal logMany : 'a array -> unit = \"log\"\n  [@@bs.val] [@@bs.scope \"console\"] [@@bs.splice]\n(** A convenience function to console.log more than 4 arguments *)\n\nexternal eqNull : 'a -> 'a null -> bool = \"%bs_equal_null\"\nexternal eqUndefined : 'a -> 'a undefined -> bool = \"%bs_equal_undefined\"\nexternal eqNullable : 'a -> 'a nullable -> bool = \"%bs_equal_nullable\"\n\n(** ## Operators *)\n\nexternal unsafe_lt : 'a -> 'a -> bool = \"#unsafe_lt\"\n(**\n   `unsafe_lt(a, b)` will be compiled as `a < b`.\n    It is marked as unsafe, since it is impossible\n    to give a proper semantics for comparision which applies to any type\n*)\n\nexternal unsafe_le : 'a -> 'a -> bool = \"#unsafe_le\"\n(**\n   `unsafe_le(a, b) will be compiled as `a <= b`.\n   See also `Js.unsafe_lt`.\n*)\n\nexternal unsafe_gt : 'a -> 'a -> bool = \"#unsafe_gt\"\n(**\n   `unsafe_gt(a, b)` will be compiled as `a > b`.\n    See also `Js.unsafe_lt`.\n*)\n\nexternal unsafe_ge : 'a -> 'a -> bool = \"#unsafe_ge\"\n(**\n   `unsafe_ge(a, b)` will be compiled as `a >= b`.\n   See also `Js.unsafe_lt`.\n*)\n\n(** ## Nested Modules *)\n\nmodule Null = Js_null\n(** Provide utilities for `Js.null<'a>` *)\n\nmodule Undefined = Js_undefined\n(** Provide utilities for `Js.undefined<'a>` *)\n\nmodule Nullable = Js_null_undefined\n(** Provide utilities for `Js.null_undefined` *)\n\nmodule Null_undefined = Js_null_undefined\n(** @deprecated please use `Js.Nullable` *)\n\nmodule Exn = Js_exn\n(** Provide utilities for dealing with Js exceptions *)\n\nmodule Array = Js_array\n(** Provide bindings to JS array*)\n\nmodule Array2 = Js_array2\n(** Provide bindings to JS array*)\n\nmodule String = Js_string\n(** Provide bindings to JS string *)\n\nmodule String2 = Js_string2\n(** Provide bindings to JS string *)\n\nmodule Re = Js_re\n(** Provide bindings to JS regex expression *)\n\nmodule Promise = Js_promise\n(** Provide bindings to JS Promise *)\n\nmodule Date = Js_date\n(** Provide bindings for JS Date *)\n\nmodule Dict = Js_dict\n(** Provide utilities for JS dictionary object *)\n\nmodule Global = Js_global\n(** Provide bindings to JS global functions in global namespace*)\n\nmodule Json = Js_json\n(** Provide utilities for json *)\n\nmodule Math = Js_math\n(** Provide bindings for JS `Math` object *)\n\nmodule Obj = Js_obj\n(** Provide utilities for `Js.t` *)\n\nmodule Typed_array = Js_typed_array\n(** Provide bindings for JS typed array *)\n\nmodule TypedArray2 = Js_typed_array2\n(** Provide bindings for JS typed array *)\n\nmodule Types = Js_types\n(** Provide utilities for manipulating JS types  *)\n\nmodule Float = Js_float\n(** Provide utilities for JS float *)\n\nmodule Int = Js_int\n(** Provide utilities for int *)\n\nmodule Bigint = Js_bigint\n(** Provide utilities for bigint *)\n\nmodule Option = Js_option\n(** Provide utilities for option *)\n\nmodule Result = Js_result\n(** Define the interface for result *)\n\nmodule List = Js_list\n(** Provide utilities for list *)\n\nmodule Vector = Js_vector\n(** Provides bindings for JS Vector *)\n\nmodule Console = Js_console\n(** Provides bindings for console *)\n"}}}
bs-platform could not be found
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/js.ml"}}}
bs-platform could not be found
bs-platform could not be found
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/js_string2.ml","languageId":"ocaml","version":1,"text":"(* Copyright (C) 2015-2016 Bloomberg Finance L.P.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * In addition to the permissions granted to you by the LGPL, you may combine\n * or link a \"work that uses the Library\" with a publicly distributed version\n * of this file to produce a combined library or application, then distribute\n * that combined work under the terms of your choosing, with no requirement\n * to comply with the obligations normally placed on you by section 4 of the\n * LGPL version 3 (or the corresponding section of a later version of the LGPL\n * should you choose to use a later version).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)\n\n(** Provide bindings to JS string. Optimized for pipe-first. *)\n\ntype t = string\n\nexternal make : 'a -> t = \"String\"\n  [@@bs.val]\n(**\n`make(value)` converts the given value to a `string`.\n\n```res example\nJs.String2.make(3.5) == \"3.5\"\nJs.String2.make([1, 2, 3]) == \"1,2,3\"\n```\n*)\n\nexternal fromCharCode : int -> t = \"String.fromCharCode\"\n  [@@bs.val]\n(**\n`fromCharCode(n)` creates a `string` containing the character corresponding to\nthat number; `n` ranges from 0 to 65535.If out of range, the lower 16 bits of\nthe value are used. Thus, `fromCharCode(0x1F63A)` gives the same result as\n`fromCharCode(0xF63A)`.\n\nSee [`String.fromCharCode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)\non MDN.\n\n```res example\nJs.String2.fromCharCode(65) == \"A\"\nJs.String2.fromCharCode(0x3c8) == `Ïˆ`\nJs.String2.fromCharCode(0xd55c) == `í•œ`\nJs.String2.fromCharCode(-64568) == `Ïˆ`\n```\n*)\n\nexternal fromCharCodeMany : int array -> t = \"String.fromCharCode\"\n  [@@bs.val] [@@bs.splice]\n(**\n`fromCharCodeMany([n1, n2, n3])` creates a `string` from the characters\ncorresponding to the given numbers, using the same rules as `fromCharCode`.\n\nSee [`String.fromCharCode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)\non MDN.\n*)\n\nexternal fromCodePoint : int -> t = \"String.fromCodePoint\"\n  [@@bs.val]\n(**\n`fromCodePoint(n)` creates a `string` containing the character corresponding to\nthat numeric code point. If the number is not a valid code point, it raises\n`RangeError`. Thus, `fromCodePoint(0x1F63A)` will produce a correct value,\nunlike `fromCharCode(0x1F63A)`, and `fromCodePoint(-5)` will raise a\n`RangeError`.\n\nSee [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\non MDN.\n\n```res example\nJs.String2.fromCodePoint(65) == \"A\"\nJs.String2.fromCodePoint(0x3c8) == `Ïˆ`\nJs.String2.fromCodePoint(0xd55c) == `í•œ`\nJs.String2.fromCodePoint(0x1f63a) == `ðŸ˜º`\n```\n*)\n\nexternal fromCodePointMany : int array -> t = \"String.fromCodePoint\"\n  [@@bs.val] [@@bs.splice]\n(**\n`fromCodePointMany([n1, n2, n3])` creates a `string` from the characters\ncorresponding to the given code point numbers, using the same rules as\n`fromCodePoint`.\n\nSee [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\non MDN.\n\n```res example\nJs.String2.fromCodePointMany([0xd55c, 0xae00, 0x1f63a]) == `í•œê¸€ðŸ˜º`\n```\n*)\n\n(* String.raw: ES2015, meant to be used with template strings, not directly *)\n\nexternal length : t -> int = \"length\"\n  [@@bs.get]\n(**\n`length(s)` returns the length of the given `string`.\n\nSee [`String.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length)\non MDN.\n\n```res example\nJs.String2.length(\"abcd\") == 4\n```\n*)\n\nexternal get : t -> int -> t = \"\"\n  [@@bs.get_index]\n(**\n`get(s, n)` returns as a `string` the character at the given index number. If\n`n` is out of range, this function returns `undefined`,so at some point this\nfunction may be modified to return `option(string)`.\n\n```res example\nJs.String2.get(\"Reason\", 0) == \"R\"\nJs.String2.get(\"Reason\", 4) == \"o\"\nJs.String2.get(`Ráº½asÃ¶Å„`, 5) == `Å„`\n```\n*)\n\nexternal charAt : t -> int -> t = \"charAt\"\n  [@@bs.send]\n(**\n`charAt(s, n)` gets the character at index `n` within string `s`. If `n` is\nnegative or greater than the length of `s`, it returns the empty string. If the\nstring contains characters outside the range \\u0000-\\uffff, it will return the\nfirst 16-bit value at that position in the string.\n\nSee [`String.charAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt)\non MDN.\n\n```res example\nJs.String2.charAt(\"Reason\", 0) == \"R\"\nJs.String2.charAt(\"Reason\", 12) == \"\"\nJs.String2.charAt(`Ráº½asÃ¶Å„`, 5) == `Å„`\n```\n*)\n\nexternal charCodeAt : t -> int -> float = \"charCodeAt\"\n  [@@bs.send]\n(**\n`charCodeAt(s, n)` returns the character code at position `n` in string `s`;\nthe result is in the range 0-65535, unlke `codePointAt`, so it will not work\ncorrectly for characters with code points greater than or equal to 0x10000. The\nreturn type is `float` because this function returns NaN if `n` is less than\nzero or greater than the length of the string.\n\nSee [`String.charCodeAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt)\non MDN.\n\n```res example\nJs.String2.charCodeAt(`ðŸ˜º`, 0) == 0xd83d->Belt.Int.toFloat\nJs.String2.codePointAt(`ðŸ˜º`, 0) == Some(0x1f63a)\n```\n*)\n\nexternal codePointAt : t -> int -> int option = \"codePointAt\"\n  [@@bs.send]\n(**\n`codePointAt(s, n)` returns the code point at position `n` within string `s` as\na `Some(value)`. The return value handles code points greater than or equal to\n0x10000. If there is no code point at the given position, the function returns\n`None`.\n\nSee [`String.codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)\non MDN.\n\n```res example\nJs.String2.codePointAt(`Â¿ðŸ˜º?`, 1) == Some(0x1f63a)\nJs.String2.codePointAt(\"abc\", 5) == None\n```\n*)\n\nexternal concat : t -> t -> t = \"concat\"\n  [@@bs.send]\n(**\n`concat(original, append)` returns a new `string` with `append` added after\n`original`.\n\nSee [`String.concat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat)\non MDN.\n\n```res example\nJs.String2.concat(\"cow\", \"bell\") == \"cowbell\"\n```\n*)\n\nexternal concatMany : t -> t array -> t = \"concat\"\n  [@@bs.send] [@@bs.splice]\n(**\n`concatMany(original, arr)` returns a new `string` consisting of each item of an\narray of strings added to the `original` string.\n\nSee [`String.concat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat)\non MDN.\n\n```res example\nJs.String2.concatMany(\"1st\", [\"2nd\", \"3rd\", \"4th\"]) == \"1st2nd3rd4th\"\n```\n*)\n\nexternal endsWith : t -> t -> bool = \"endsWith\"\n  [@@bs.send]\n(**\nES2015: `endsWith(str, substr)` returns `true` if the `str` ends with `substr`,\n`false` otherwise.\n\nSee [`String.endsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith)\non MDN.\n\n```res example\nJs.String2.endsWith(\"BuckleScript\", \"Script\") == true\nJs.String2.endsWith(\"BuckleShoes\", \"Script\") == false\n```\n*)\n\nexternal endsWithFrom : t -> t -> int -> bool = \"endsWith\"\n  [@@bs.send]\n(**\n`endsWithFrom(str, ending, len)` returns `true` if the first len characters of\n`str` end with `ending`, `false` otherwise. If `len` is greater than or equal\nto the length of `str`, then it works like `endsWith`. (Honestly, this should\nhave been named endsWithAt, but oh well).\n\nSee [`String.endsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith)\non MDN.\n\n```res example\nJs.String2.endsWithFrom(\"abcd\", \"cd\", 4) == true\nJs.String2.endsWithFrom(\"abcde\", \"cd\", 3) == false\nJs.String2.endsWithFrom(\"abcde\", \"cde\", 99) == true\nJs.String2.endsWithFrom(\"example.dat\", \"ple\", 7) == true\n```\n*)\n\nexternal includes : t -> t -> bool = \"includes\"\n  [@@bs.send]\n(**\nES2015: `includes(str, searchValue)` returns `true` if `searchValue` is found\nanywhere within `str`, false otherwise.\n\nSee [`String.includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes)\non MDN.\n\n```res example\nJs.String2.includes(\"programmer\", \"gram\") == true\nJs.String2.includes(\"programmer\", \"er\") == true\nJs.String2.includes(\"programmer\", \"pro\") == true\nJs.String2.includes(\"programmer.dat\", \"xyz\") == false\n```\n*)\n\nexternal includesFrom : t -> t -> int -> bool = \"includes\"\n  [@@bs.send]\n(**\nES2015: `includes(str, searchValue start)` returns `true` if `searchValue` is\nfound anywhere within `str` starting at character number `start` (where 0 is\nthe first character), `false` otherwise.\n\nSee [`String.includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes)\non MDN.\n\n```res example\nJs.String2.includesFrom(\"programmer\", \"gram\", 1) == true\nJs.String2.includesFrom(\"programmer\", \"gram\", 4) == false\nJs.String2.includesFrom(`ëŒ€í•œë¯¼êµ­`, `í•œ`, 1) == true\n```\n*)\n\nexternal indexOf : t -> t -> int = \"indexOf\"\n  [@@bs.send]\n(**\nES2015: `indexOf(str, searchValue)` returns the position at which `searchValue`\nwas first found within `str`, or -1 if `searchValue` is not in `str`.\n\nSee [`String.indexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf)\non MDN.\n\n```res example\nJs.String2.indexOf(\"bookseller\", \"ok\") == 2\nJs.String2.indexOf(\"bookseller\", \"sell\") == 4\nJs.String2.indexOf(\"beekeeper\", \"ee\") == 1\nJs.String2.indexOf(\"bookseller\", \"xyz\") == -1\n```\n*)\n\nexternal indexOfFrom : t -> t -> int -> int = \"indexOf\"\n  [@@bs.send]\n(**\n`indexOfFrom(str, searchValue, start)` returns the position at which\n`searchValue` was found within `str` starting at character position `start`, or\n-1 if `searchValue` is not found in that portion of `str`. The return value is\nrelative to the beginning of the string, no matter where the search started\nfrom.\n\nSee [`String.indexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf)\non MDN.\n\n```res example\nJs.String2.indexOfFrom(\"bookseller\", \"ok\", 1) == 2\nJs.String2.indexOfFrom(\"bookseller\", \"sell\", 2) == 4\nJs.String2.indexOfFrom(\"bookseller\", \"sell\", 5) == -1\n```\n*)\n\nexternal lastIndexOf : t -> t -> int = \"lastIndexOf\"\n  [@@bs.send]\n(**\n`lastIndexOf(str, searchValue)` returns the position of the last occurrence of\n`searchValue` within `str`, searching backwards from the end of the string.\nReturns -1 if `searchValue` is not in `str`. The return value is always\nrelative to the beginning of the string.\n\nSee [`String.lastIndexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf)\non MDN.\n\n```res example\nJs.String2.lastIndexOf(\"bookseller\", \"ok\") == 2\nJs.String2.lastIndexOf(\"beekeeper\", \"ee\") == 4\nJs.String2.lastIndexOf(\"abcdefg\", \"xyz\") == -1\n```\n*)\n\nexternal lastIndexOfFrom : t -> t -> int -> int = \"lastIndexOf\"\n  [@@bs.send]\n(**\n`lastIndexOfFrom(str, searchValue, start)` returns the position of the last\noccurrence of `searchValue` within `str`, searching backwards from the given\nstart position. Returns -1 if `searchValue` is not in `str`. The return value\nis always relative to the beginning of the string.\n\nSee [`String.lastIndexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf)\non MDN.\n\n```res example\nJs.String2.lastIndexOfFrom(\"bookseller\", \"ok\", 6) == 2\nJs.String2.lastIndexOfFrom(\"beekeeper\", \"ee\", 8) == 4\nJs.String2.lastIndexOfFrom(\"beekeeper\", \"ee\", 3) == 1\nJs.String2.lastIndexOfFrom(\"abcdefg\", \"xyz\", 4) == -1\n```\n*)\n\n(* extended by ECMA-402 *)\n\nexternal localeCompare : t -> t -> float = \"localeCompare\"\n  [@@bs.send]\n(**\n`localeCompare(reference, comparison)` returns\n- a negative value if reference comes before comparison in sort order\n- zero if reference and comparison have the same sort order\n- a positive value if reference comes after comparison in sort order\n\nSee [`String.localeCompare`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare) on MDN.\n\n```res example\nJs.String2.localeCompare(\"zebra\", \"ant\") > 0.0\nJs.String2.localeCompare(\"ant\", \"zebra\") < 0.0\nJs.String2.localeCompare(\"cat\", \"cat\") == 0.0\nJs.String2.localeCompare(\"CAT\", \"cat\") > 0.0\n```\n*)\n\nexternal match_ : t -> Js_re.t -> t option array option = \"match\"\n  [@@bs.send] [@@bs.return { null_to_opt }]\n(**\n`match(str, regexp)` matches a `string` against the given `regexp`. If there is\nno match, it returns `None`. For regular expressions without the g modifier, if\n  there is a match, the return value is `Some(array)` where the array contains:\n- The entire matched string\n- Any capture groups if the regexp had parentheses\nFor regular expressions with the g modifier, a matched expression returns\n`Some(array)` with all the matched substrings and no capture groups.\n\nSee [`String.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\non MDN.\n\n```res example\nJs.String2.match_(\"The better bats\", %re(\"/b[aeiou]t/\")) == Some([\"bet\"])\nJs.String2.match_(\"The better bats\", %re(\"/b[aeiou]t/g\")) == Some([\"bet\", \"bat\"])\nJs.String2.match_(\"Today is 2018-04-05.\", %re(\"/(\\d+)-(\\d+)-(\\d+)/\")) ==\n  Some([\"2018-04-05\", \"2018\", \"04\", \"05\"])\nJs.String2.match_(\"The large container.\", %re(\"/b[aeiou]g/\")) == None\n```\n*)\n\nexternal normalize : t -> t = \"normalize\"\n  [@@bs.send]\n(**\n`normalize(str)` returns the normalized Unicode string using Normalization Form\nCanonical (NFC) Composition. Consider the character Ã£, which can be represented\nas the single codepoint \\u00e3 or the combination of a lower case letter A\n\\u0061 and a combining tilde \\u0303. Normalization ensures that both can be\nstored in an equivalent binary representation.\n\nSee [`String.normalize`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)\non MDN. See also [Unicode technical report\n#15](https://unicode.org/reports/tr15/) for details.\n*)\n\nexternal normalizeByForm : t -> t -> t = \"normalize\"\n  [@@bs.send]\n(**\nES2015: `normalize(str, form)` returns the normalized Unicode string using the\nspecified form of normalization, which may be one of:\n- \"NFC\" â€” Normalization Form Canonical Composition.\n- \"NFD\" â€” Normalization Form Canonical Decomposition.\n- \"NFKC\" â€” Normalization Form Compatibility Composition.\n- \"NFKD\" â€” Normalization Form Compatibility Decomposition.\n\nSee [`String.normalize`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize) on MDN.\nSee also [Unicode technical report #15](https://unicode.org/reports/tr15/) for details.\n*)\n\nexternal repeat : t -> int -> t = \"repeat\"\n  [@@bs.send]\n(**\n`repeat(str, n)` returns a `string` that consists of `n` repetitions of `str`.\nRaises `RangeError` if `n` is negative.\n\nSee [`String.repeat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat)\non MDN.\n\n```res example\nJs.String2.repeat(\"ha\", 3) == \"hahaha\"\nJs.String2.repeat(\"empty\", 0) == \"\"\n```\n*)\n\nexternal replace : t -> t -> t -> t = \"replace\"\n  [@@bs.send]\n(**\nES2015: `replace(str, substr, newSubstr)` returns a new `string` which is\nidentical to `str` except with the first matching instance of `substr` replaced\nby `newSubstr`. `substr` is treated as a verbatim string to match, not a\nregular expression.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nJs.String2.replace(\"old string\", \"old\", \"new\") == \"new string\"\nJs.String2.replace(\"the cat and the dog\", \"the\", \"this\") == \"this cat and the dog\"\n```\n*)\n\nexternal replaceByRe : t -> Js_re.t -> t -> t = \"replace\"\n  [@@bs.send]\n(**\n`replaceByRe(str, regex, replacement)` returns a new `string` where occurrences\nmatching regex have been replaced by `replacement`.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nJs.String2.replaceByRe(\"vowels be gone\", %re(\"/[aeiou]/g\"), \"x\") == \"vxwxls bx gxnx\"\nJs.String2.replaceByRe(\"Juan Fulano\", %re(\"/(\\w+) (\\w+)/\"), \"$2, $1\") == \"Fulano, Juan\"\n```\n*)\n\nexternal unsafeReplaceBy0 :\n  t -> Js_re.t -> ((t -> int -> t -> t)[@bs.uncurry]) -> t = \"replace\"\n  [@@bs.send]\n(**\nReturns a new `string` with some or all matches of a pattern with no capturing\nparentheses replaced by the value returned from the given function. The\nfunction receives as its parameters the matched string, the offset at which the\nmatch begins, and the whole string being matched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nlet str = \"beautiful vowels\"\nlet re = %re(\"/[aeiou]/g\")\nlet matchFn = (matchPart, _offset, _wholeString) => Js.String2.toUpperCase(matchPart)\n\nJs.String2.unsafeReplaceBy0(str, re, matchFn) == \"bEAUtIfUl vOwEls\"\n```\n*)\n\nexternal unsafeReplaceBy1 :\n  t -> Js_re.t -> ((t -> t -> int -> t -> t)[@bs.uncurry]) -> t = \"replace\"\n  [@@bs.send]\n(**\nReturns a new `string` with some or all matches of a pattern with one set of\ncapturing parentheses replaced by the value returned from the given function.\nThe function receives as its parameters the matched string, the captured\nstring, the offset at which the match begins, and the whole string being\nmatched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nlet str = \"Jony is 40\"\nlet re = %re(\"/(Jony is )\\d+/g\")\nlet matchFn = (_match, part1, _offset, _wholeString) => {\n  part1 ++ \"41\"\n}\n\nJs.String2.unsafeReplaceBy1(str, re, matchFn) == \"Jony is 41\"\n```\n*)\n\nexternal unsafeReplaceBy2 :\n  t -> Js_re.t -> ((t -> t -> t -> int -> t -> t)[@bs.uncurry]) -> t = \"replace\"\n  [@@bs.send]\n(**\nReturns a new `string` with some or all matches of a pattern with two sets of\ncapturing parentheses replaced by the value returned from the given function.\nThe function receives as its parameters the matched string, the captured\nstrings, the offset at which the match begins, and the whole string being\nmatched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nlet str = \"7 times 6\"\nlet re = %re(\"/(\\d+) times (\\d+)/\")\nlet matchFn = (_match, p1, p2, _offset, _wholeString) => {\n  switch (Belt.Int.fromString(p1), Belt.Int.fromString(p2)) {\n  | (Some(x), Some(y)) => Belt.Int.toString(x * y)\n  | _ => \"???\"\n  }\n}\n\nJs.String2.unsafeReplaceBy2(str, re, matchFn) == \"42\"\n```\n*)\n\nexternal unsafeReplaceBy3 :\n  t -> Js_re.t -> ((t -> t -> t -> t -> int -> t -> t)[@bs.uncurry]) -> t\n  = \"replace\"\n  [@@bs.send]\n(**\nReturns a new `string` with some or all matches of a pattern with three sets of\ncapturing parentheses replaced by the value returned from the given function.\nThe function receives as its parameters the matched string, the captured\nstrings, the offset at which the match begins, and the whole string being\nmatched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n*)\n\nexternal search : t -> Js_re.t -> int = \"search\"\n  [@@bs.send]\n(**\n`search(str, regexp)` returns the starting position of the first match of\n`regexp` in the given `str`, or -1 if there is no match.\n\nSee [`String.search`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search)\non MDN.\n\n```res example\nJs.String2.search(\"testing 1 2 3\", %re(\"/\\d+/\")) == 8\nJs.String2.search(\"no numbers\", %re(\"/\\d+/\")) == -1\n```\n*)\n\nexternal slice : t -> from:int -> to_:int -> t = \"slice\"\n  [@@bs.send]\n(**\n`slice(str, from:n1, to_:n2)` returns the substring of `str` starting at\ncharacter `n1` up to but not including `n2`.\n- If either `n1` or `n2` is negative, then it is evaluated as `length(str - n1)` or `length(str - n2)`.\n- If `n2` is greater than the length of `str`, then it is treated as `length(str)`.\n- If `n1` is greater than `n2`, slice returns the empty string.\n\nSee [`String.slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) on MDN.\n\n```res example\nJs.String2.slice(\"abcdefg\", ~from=2, ~to_=5) == \"cde\"\nJs.String2.slice(\"abcdefg\", ~from=2, ~to_=9) == \"cdefg\"\nJs.String2.slice(\"abcdefg\", ~from=-4, ~to_=-2) == \"de\"\nJs.String2.slice(\"abcdefg\", ~from=5, ~to_=1) == \"\"\n```\n*)\n\nexternal sliceToEnd : t -> from:int -> t = \"slice\"\n  [@@bs.send]\n(**\n`sliceToEnd(str, from:n)` returns the substring of `str` starting at character\n`n` to the end of the string.\n- If `n` is negative, then it is evaluated as `length(str - n)`.\n- If `n` is greater than the length of `str`, then sliceToEnd returns the empty string.\n\nSee [`String.slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) on MDN.\n\n```res example\nJs.String2.sliceToEnd(\"abcdefg\", ~from=4) == \"efg\"\nJs.String2.sliceToEnd(\"abcdefg\", ~from=-2) == \"fg\"\nJs.String2.sliceToEnd(\"abcdefg\", ~from=7) == \"\"\n```\n*)\n\nexternal split : t -> t -> t array = \"split\"\n  [@@bs.send]\n(**\n`split(str, delimiter)` splits the given `str` at every occurrence of\n`delimiter` and returns an array of the resulting substrings.\n\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\non MDN.\n\n```res example\nJs.String2.split(\"2018-01-02\", \"-\") == [\"2018\", \"01\", \"02\"]\nJs.String2.split(\"a,b,,c\", \",\") == [\"a\", \"b\", \"\", \"c\"]\nJs.String2.split(\"good::bad as great::awful\", \"::\") == [\"good\", \"bad as great\", \"awful\"]\nJs.String2.split(\"has-no-delimiter\", \";\") == [\"has-no-delimiter\"]\n```\n*)\n\nexternal splitAtMost : t -> t -> limit:int -> t array = \"split\"\n  [@@bs.send]\n(**\n  `splitAtMost delimiter ~limit: n str` splits the given `str` at every occurrence of `delimiter` and returns an array of the first `n` resulting substrings. If `n` is negative or greater than the number of substrings, the array will contain all the substrings.\n\n```\nsplitAtMost \"ant/bee/cat/dog/elk\" \"/\" ~limit: 3 = [|\"ant\"; \"bee\"; \"cat\"|];;\nsplitAtMost \"ant/bee/cat/dog/elk\" \"/\" ~limit: 0 = [| |];;\nsplitAtMost \"ant/bee/cat/dog/elk\" \"/\" ~limit: 9 = [|\"ant\"; \"bee\"; \"cat\"; \"dog\"; \"elk\"|];;\n```\n*)\n\nexternal splitByRe : t -> Js_re.t -> t option array = \"split\"\n  [@@bs.send]\n(**\n`splitByRe(str, regex)` splits the given `str` at every occurrence of `regex`\nand returns an array of the resulting substrings.\n\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\non MDN.\n\n```res example\nJs.String2.splitByRe(\"art; bed , cog ;dad\", %re(\"/\\s*[,;]\\s*/\")) == [\n    Some(\"art\"),\n    Some(\"bed\"),\n    Some(\"cog\"),\n    Some(\"dad\"),\n  ]\n```\n*)\n\nexternal splitByReAtMost : t -> Js_re.t -> limit:int -> t option array = \"split\"\n  [@@bs.send]\n(**\n`splitByReAtMost(str, regex, ~limit:n)` splits the given `str` at every\noccurrence of `regex` and returns an array of the first `n` resulting\nsubstrings. If `n` is negative or greater than the number of substrings, the\narray will contain all the substrings.\n\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\non MDN.\n\n```res example\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=3) == [\n    Some(\"one\"),\n    Some(\"two\"),\n    Some(\"three\"),\n  ]\n\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=0) == []\n\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=8) == [\n    Some(\"one\"),\n    Some(\"two\"),\n    Some(\"three\"),\n    Some(\"four\"),\n  ]\n```\n*)\n\nexternal startsWith : t -> t -> bool = \"startsWith\"\n  [@@bs.send]\n(**\nES2015: `startsWith(str, substr)` returns `true` if the `str` starts with\n`substr`, `false` otherwise.\n\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\non MDN.\n\n```res example\nJs.String2.startsWith(\"BuckleScript\", \"Buckle\") == true\nJs.String2.startsWith(\"BuckleScript\", \"\") == true\nJs.String2.startsWith(\"JavaScript\", \"Buckle\") == false\n```\n*)\n\nexternal startsWithFrom : t -> t -> int -> bool = \"startsWith\"\n  [@@bs.send]\n(**\nES2015: `startsWithFrom(str, substr, n)` returns `true` if the `str` starts\nwith `substr` starting at position `n`, false otherwise. If `n` is negative,\nthe search starts at the beginning of `str`.\n\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\non MDN.\n\n```res example\nJs.String2.startsWithFrom(\"BuckleScript\", \"kle\", 3) == true\nJs.String2.startsWithFrom(\"BuckleScript\", \"\", 3) == true\nJs.String2.startsWithFrom(\"JavaScript\", \"Buckle\", 2) == false\n```\n*)\n\nexternal substr : t -> from:int -> t = \"substr\"\n  [@@bs.send]\n(**\n`substr(str, ~from:n)` returns the substring of `str` from position `n` to the\nend of the string.\n- If `n` is less than zero, the starting position is the length of `str - n`.\n- If `n` is greater than or equal to the length of `str`, returns the empty string.\n\nJavaScriptâ€™s `String.substr()` is a legacy function. When possible, use\n`substring()` instead.\n\nSee [`String.substr`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr)\non MDN.\n\n```res example\nJs.String2.substr(\"abcdefghij\", ~from=3) == \"defghij\"\nJs.String2.substr(\"abcdefghij\", ~from=-3) == \"hij\"\nJs.String2.substr(\"abcdefghij\", ~from=12) == \"\"\n```\n*)\n\nexternal substrAtMost : t -> from:int -> length:int -> t = \"substr\"\n  [@@bs.send]\n(**\n`substrAtMost(str, ~from: pos, ~length: n)` returns the substring of `str` of\nlength `n` starting at position `pos`.\n- If `pos` is less than zero, the starting position is the length of `str - pos`.\n- If `pos` is greater than or equal to the length of `str`, returns the empty string.\n- If `n` is less than or equal to zero, returns the empty string.\n\nJavaScriptâ€™s `String.substr()` is a legacy function. When possible, use\n`substring()` instead.\n\nSee [`String.substr`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr)\non MDN.\n\n```res example\nJs.String2.substrAtMost(\"abcdefghij\", ~from=3, ~length=4) == \"defg\"\nJs.String2.substrAtMost(\"abcdefghij\", ~from=-3, ~length=4) == \"hij\"\nJs.String2.substrAtMost(\"abcdefghij\", ~from=12, ~length=2) == \"\"\n```\n*)\n\nexternal substring : t -> from:int -> to_:int -> t = \"substring\"\n  [@@bs.send]\n(**\n`substring(str, ~from: start, ~to_: finish)` returns characters `start` up to\nbut not including finish from `str`.\n- If `start` is less than zero, it is treated as zero.\n- If `finish` is zero or negative, the empty string is returned.\n- If `start` is greater than `finish`, the `start` and `finish` points are swapped.\n\nSee [`String.substring`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring) on MDN.\n\n```res example\nJs.String2.substring(\"playground\", ~from=3, ~to_=6) == \"ygr\"\nJs.String2.substring(\"playground\", ~from=6, ~to_=3) == \"ygr\"\nJs.String2.substring(\"playground\", ~from=4, ~to_=12) == \"ground\"\n```\n*)\n\nexternal substringToEnd : t -> from:int -> t = \"substring\"\n  [@@bs.send]\n(**\n`substringToEnd(str, ~from: start)` returns the substring of `str` from\nposition `start` to the end.\n- If `start` is less than or equal to zero, the entire string is returned.\n- If `start` is greater than or equal to the length of `str`, the empty string is returned.\n\nSee [`String.substring`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring) on MDN.\n\n```res example\nJs.String2.substringToEnd(\"playground\", ~from=4) == \"ground\"\nJs.String2.substringToEnd(\"playground\", ~from=-3) == \"playground\"\nJs.String2.substringToEnd(\"playground\", ~from=12) == \"\"\n```\n*)\n\nexternal toLowerCase : t -> t = \"toLowerCase\"\n  [@@bs.send]\n(**\n`toLowerCase(str)` converts `str` to lower case using the locale-insensitive\ncase mappings in the Unicode Character Database. Notice that the conversion can\ngive different results depending upon context, for example with the Greek\nletter sigma, which has two different lower case forms; one when it is the last\ncharacter in a string and another when it is not.\n\nSee [`String.toLowerCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase)\non MDN.\n\n```res example\nJs.String2.toLowerCase(\"ABC\") == \"abc\"\nJs.String2.toLowerCase(`Î£Î `) == `ÏƒÏ€`\nJs.String2.toLowerCase(`Î Î£`) == `Ï€Ï‚`\n```\n*)\n\nexternal toLocaleLowerCase : t -> t = \"toLocaleLowerCase\"\n  [@@bs.send]\n(**\n`toLocaleLowerCase(str)` converts `str` to lower case using the current locale.\nSee [`String.toLocaleLowerCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase)\non MDN.\n*)\n\nexternal toUpperCase : t -> t = \"toUpperCase\"\n  [@@bs.send]\n(**\n`toUpperCase(str)` converts `str` to upper case using the locale-insensitive\ncase mappings in the Unicode Character Database. Notice that the conversion can\nexpand the number of letters in the result; for example the German ÃŸ\ncapitalizes to two Ses in a row.\n\nSee [`String.toUpperCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase)\non MDN.\n\n```res example\nJs.String2.toUpperCase(\"abc\") == \"ABC\"\nJs.String2.toUpperCase(`StraÃŸe`) == `STRASSE`\nJs.String2.toUpperCase(`Ï€Ï‚`) == `Î Î£`\n```\n*)\n\nexternal toLocaleUpperCase : t -> t = \"toLocaleUpperCase\"\n  [@@bs.send]\n(**\n`toLocaleUpperCase(str)` converts `str` to upper case using the current locale.\nSee [`String.to:LocaleUpperCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase)\non MDN.\n*)\n\nexternal trim : t -> t = \"trim\"\n  [@@bs.send]\n(**\n`trim(str)` returns a string that is `str` with whitespace stripped from both\nends. Internal whitespace is not removed.\n\nSee [`String.trim`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim)\non MDN.\n\n```res example\nJs.String2.trim(\"   abc def   \") == \"abc def\"\nJs.String2.trim(\"\\n\\r\\t abc def \\n\\n\\t\\r \") == \"abc def\"\n```\n*)\n\n(* HTML wrappers *)\n\nexternal anchor : t -> t -> t = \"anchor\"\n  [@@bs.send]\n(**\n`anchor(anchorText, anchorName)` creates a string with an HTML `<a>` element\nwith name attribute of `anchorName` and `anchorText` as its content. Please do\nnot use this method, as it has been removed from the relevant web standards.\n\nSee [`String.anchor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/anchor)\non MDN.\n\n```res example\nJs.String2.anchor(\"Page One\", \"page1\") == \"<a name=\\\"page1\\\">Page One</a>\"\n```\n*)\n\nexternal link : t -> t -> t = \"link\"\n  [@@bs.send]\n(**\nES2015: `link(linkText, urlText)` creates a string with an HTML `<a>` element\nwith href attribute of `urlText` and `linkText` as its content. Please do not\nuse this method, as it has been removed from the relevant web standards. See\n[`String.link`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/link)\non MDN.\n\n```res example\nJs.String2.link(\"Go to page two\", \"page2.html\") == \"<a href=\\\"page2.html\\\">Go to page two</a>\"\n```\n*)\n\n(* FIXME: we should not encourage people to use [%identity], better\n    to provide something using [@@bs.val] so that we can track such\n    casting\n*)\nexternal castToArrayLike : t -> t Js_array2.array_like = \"%identity\"\n(**\nCasts its argument to an `array_like` entity that can be processed by functions\nsuch as `Js.Array2.fromMap()`\n\n```res example\nlet s = \"abcde\"\nlet arr = Js.Array2.fromMap(Js.String2.castToArrayLike(s), x => x)\narr == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n```\n*)\n"}}}
bs-platform could not be found
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/js_string2.ml"}}}
bs-platform could not be found
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/pervasives.mli","languageId":"ocaml","version":1,"text":"(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(** The initially opened module.\n\n   This module provides the basic operations over the built-in types\n   (numbers, booleans, byte sequences, strings, exceptions, references,\n   lists, arrays, input-output channels, ...).\n\n   This module is automatically opened at the beginning of each compilation.\n   All components of this module can therefore be referred by their short\n   name, without prefixing them by [Pervasives].\n*)\n\n\n(* Internal *)\nexternal __unsafe_cast : 'a -> 'b = \"%identity\"\n\n(** {1 Exceptions} *)\n\nexternal raise : exn -> 'a = \"%raise\"\n(** Raise the given exception value *)\n\nexternal raise_notrace : exn -> 'a = \"%raise_notrace\"\n(** A faster version [raise] which does not record the backtrace.\n    @since 4.02.0\n*)\n\nval invalid_arg : string -> 'a\n(** Raise exception [Invalid_argument] with the given string. *)\n\nval failwith : string -> 'a\n(** Raise exception [Failure] with the given string. *)\n\nexception Exit\n(** The [Exit] exception is not raised by any library function.  It is\n    provided for use in your programs. *)\n\n\n(** {1 Comparisons} *)\n\nexternal ( = ) : 'a -> 'a -> bool = \"%equal\"\n(** [e1 = e2] tests for structural equality of [e1] and [e2].\n   Mutable structures (e.g. references and arrays) are equal\n   if and only if their current contents are structurally equal,\n   even if the two mutable objects are not the same physical object.\n   Equality between functional values raises [Invalid_argument].\n   Equality between cyclic data structures may not terminate.\n   Left-associative operator at precedence level 4/11. *)\n\nexternal ( <> ) : 'a -> 'a -> bool = \"%notequal\"\n(** Negation of {!Pervasives.( = )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( < ) : 'a -> 'a -> bool = \"%lessthan\"\n(** See {!Pervasives.( >= )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( > ) : 'a -> 'a -> bool = \"%greaterthan\"\n(** See {!Pervasives.( >= )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( <= ) : 'a -> 'a -> bool = \"%lessequal\"\n(** See {!Pervasives.( >= )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( >= ) : 'a -> 'a -> bool = \"%greaterequal\"\n(** Structural ordering functions. These functions coincide with\n   the usual orderings over integers, characters, strings, byte sequences\n   and floating-point numbers, and extend them to a\n   total ordering over all types.\n   The ordering is compatible with [( = )]. As in the case\n   of [( = )], mutable structures are compared by contents.\n   Comparison between functional values raises [Invalid_argument].\n   Comparison between cyclic structures may not terminate.\n   Left-associative operator at precedence level 4/11. *)\n\nexternal compare : 'a -> 'a -> int = \"%compare\"\n(** [compare x y] returns [0] if [x] is equal to [y],\n   a negative integer if [x] is less than [y], and a positive integer\n   if [x] is greater than [y].  The ordering implemented by [compare]\n   is compatible with the comparison predicates [=], [<] and [>]\n   defined above,  with one difference on the treatment of the float value\n   {!Pervasives.nan}.  Namely, the comparison predicates treat [nan]\n   as different from any other float value, including itself;\n   while [compare] treats [nan] as equal to itself and less than any\n   other float value.  This treatment of [nan] ensures that [compare]\n   defines a total ordering relation.\n\n   [compare] applied to functional values may raise [Invalid_argument].\n   [compare] applied to cyclic structures may not terminate.\n\n   The [compare] function can be used as the comparison function\n   required by the {!Set.Make} and {!Map.Make} functors, as well as\n   the {!List.sort} and {!Array.sort} functions. *)\n\nexternal min : 'a -> 'a -> 'a = \"%bs_min\"\n(** Return the smaller of the two arguments.\n    The result is unspecified if one of the arguments contains\n    the float value [nan]. *)\n\nexternal max : 'a -> 'a -> 'a = \"%bs_max\"\n(** Return the greater of the two arguments.\n    The result is unspecified if one of the arguments contains\n    the float value [nan]. *)\n\nexternal ( == ) : 'a -> 'a -> bool = \"%eq\"\n(** [e1 == e2] tests for physical equality of [e1] and [e2].\n   On mutable types such as references, arrays, byte sequences, records with\n   mutable fields and objects with mutable instance variables,\n   [e1 == e2] is true if and only if physical modification of [e1]\n   also affects [e2].\n   On non-mutable types, the behavior of [( == )] is\n   implementation-dependent; however, it is guaranteed that\n   [e1 == e2] implies [compare e1 e2 = 0].\n   Left-associative operator at precedence level 4/11. *)\n\nexternal ( != ) : 'a -> 'a -> bool = \"%noteq\"\n(** Negation of {!Pervasives.( == )}.\n    Left-associative operator at precedence level 4/11. *)\n\n\n(** {1 Boolean operations} *)\n\nexternal not : bool -> bool = \"%boolnot\"\n(** The boolean negation. *)\n\nexternal ( && ) : bool -> bool -> bool = \"%sequand\"\n(** The boolean 'and'. Evaluation is sequential, left-to-right:\n   in [e1 && e2], [e1] is evaluated first, and if it returns [false],\n   [e2] is not evaluated at all.\n   Right-associative operator at precedence level 3/11. *)\n\n\nexternal ( || ) : bool -> bool -> bool = \"%sequor\"\n(** The boolean 'or'. Evaluation is sequential, left-to-right:\n   in [e1 || e2], [e1] is evaluated first, and if it returns [true],\n   [e2] is not evaluated at all.\n   Right-associative operator at precedence level 2/11.\n*)\n\n\n(** {1 Debugging} *)\n\nexternal __LOC__ : string = \"%loc_LOC\"\n(** [__LOC__] returns the location at which this expression appears in\n    the file currently being parsed by the compiler, with the standard\n    error format of OCaml: \"File %S, line %d, characters %d-%d\".\n    @since 4.02.0\n*)\n\nexternal __FILE__ : string = \"%loc_FILE\"\n(** [__FILE__] returns the name of the file currently being\n    parsed by the compiler.\n    @since 4.02.0\n*)\n\nexternal __LINE__ : int = \"%loc_LINE\"\n(** [__LINE__] returns the line number at which this expression\n    appears in the file currently being parsed by the compiler.\n    @since 4.02.0\n*)\n\nexternal __MODULE__ : string = \"%loc_MODULE\"\n(** [__MODULE__] returns the module name of the file being\n    parsed by the compiler.\n    @since 4.02.0\n*)\n\nexternal __POS__ : string * int * int * int = \"%loc_POS\"\n(** [__POS__] returns a tuple [(file,lnum,cnum,enum)], corresponding\n    to the location at which this expression appears in the file\n    currently being parsed by the compiler. [file] is the current\n    filename, [lnum] the line number, [cnum] the character position in\n    the line and [enum] the last character position in the line.\n    @since 4.02.0\n *)\n\nexternal __LOC_OF__ : 'a -> string * 'a = \"%loc_LOC\"\n(** [__LOC_OF__ expr] returns a pair [(loc, expr)] where [loc] is the\n    location of [expr] in the file currently being parsed by the\n    compiler, with the standard error format of OCaml: \"File %S, line\n    %d, characters %d-%d\".\n    @since 4.02.0\n*)\n\nexternal __LINE_OF__ : 'a -> int * 'a = \"%loc_LINE\"\n(** [__LINE__ expr] returns a pair [(line, expr)], where [line] is the\n    line number at which the expression [expr] appears in the file\n    currently being parsed by the compiler.\n    @since 4.02.0\n *)\n\nexternal __POS_OF__ : 'a -> (string * int * int * int) * 'a = \"%loc_POS\"\n(** [__POS_OF__ expr] returns a pair [(loc,expr)], where [loc] is a\n    tuple [(file,lnum,cnum,enum)] corresponding to the location at\n    which the expression [expr] appears in the file currently being\n    parsed by the compiler. [file] is the current filename, [lnum] the\n    line number, [cnum] the character position in the line and [enum]\n    the last character position in the line.\n    @since 4.02.0\n *)\n\n(** {1 Composition operators} *)\n\nexternal ( |> ) : 'a -> ('a -> 'b) -> 'b = \"%revapply\"\n(** Reverse-application operator: [x |> f |> g] is exactly equivalent\n to [g (f (x))].\n Left-associative operator at precedence level 4/11.\n   @since 4.01\n *)\n\nexternal ( @@ ) : ('a -> 'b) -> 'a -> 'b = \"%apply\"\n(** Application operator: [g @@ f @@ x] is exactly equivalent to\n [g (f (x))].\n Right-associative operator at precedence level 5/11.\n   @since 4.01\n*)\n\n(** {1 Integer arithmetic} *)\n\n(** Integers are 31 bits wide (or 63 bits on 64-bit processors).\n   All operations are taken modulo 2{^31} (or 2{^63}).\n   They do not fail on overflow. *)\n\nexternal ( ~- ) : int -> int = \"%negint\"\n(** Unary negation. You can also write [- e] instead of [~- e].\n    Unary operator at precedence level 9/11 for [- e]\n    and 11/11 for [~- e]. *)\n\nexternal ( ~+ ) : int -> int = \"%identity\"\n(** Unary addition. You can also write [+ e] instead of [~+ e].\n    Unary operator at precedence level 9/11 for [+ e]\n    and 11/11 for [~+ e].\n    @since 3.12.0\n*)\n\nexternal succ : int -> int = \"%succint\"\n(** [succ x] is [x + 1]. *)\n\nexternal pred : int -> int = \"%predint\"\n(** [pred x] is [x - 1]. *)\n\nexternal ( + ) : int -> int -> int = \"%addint\"\n(** Integer addition.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( - ) : int -> int -> int = \"%subint\"\n(** Integer subtraction.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( * ) : int -> int -> int = \"%mulint\"\n(** Integer multiplication.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( / ) : int -> int -> int = \"%divint\"\n(** Integer division.\n   Raise [Division_by_zero] if the second argument is 0.\n   Integer division rounds the real quotient of its arguments towards zero.\n   More precisely, if [x >= 0] and [y > 0], [x / y] is the greatest integer\n   less than or equal to the real quotient of [x] by [y].  Moreover,\n   [(- x) / y = x / (- y) = - (x / y)].\n   Left-associative operator at precedence level 7/11. *)\n\nexternal ( mod ) : int -> int -> int = \"%modint\"\n(** Integer remainder.  If [y] is not zero, the result\n   of [x mod y] satisfies the following properties:\n   [x = (x / y) * y + x mod y] and\n   [abs(x mod y) <= abs(y) - 1].\n   If [y = 0], [x mod y] raises [Division_by_zero].\n   Note that [x mod y] is negative only if [x < 0].\n   Raise [Division_by_zero] if [y] is zero.\n   Left-associative operator at precedence level 7/11. *)\n\nval abs : int -> int\n(** Return the absolute value of the argument.  Note that this may be\n  negative if the argument is [min_int]. *)\n\nval max_int : int\n(** The greatest representable integer. *)\n\nval min_int : int\n(** The smallest representable integer. *)\n\n\n(** {2 Bitwise operations} *)\n\nexternal ( land ) : int -> int -> int = \"%andint\"\n(** Bitwise logical and.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( lor ) : int -> int -> int = \"%orint\"\n(** Bitwise logical or.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( lxor ) : int -> int -> int = \"%xorint\"\n(** Bitwise logical exclusive or.\n    Left-associative operator at precedence level 7/11. *)\n\nval lnot : int -> int\n(** Bitwise logical negation. *)\n\nexternal ( lsl ) : int -> int -> int = \"%lslint\"\n(** [n lsl m] shifts [n] to the left by [m] bits.\n   The result is unspecified if [m < 0] or [m >= bitsize],\n   where [bitsize] is [32] on a 32-bit platform and\n   [64] on a 64-bit platform.\n   Right-associative operator at precedence level 8/11. *)\n\nexternal ( lsr ) : int -> int -> int = \"%lsrint\"\n(** [n lsr m] shifts [n] to the right by [m] bits.\n   This is a logical shift: zeroes are inserted regardless of\n   the sign of [n].\n   The result is unspecified if [m < 0] or [m >= bitsize].\n   Right-associative operator at precedence level 8/11. *)\n\nexternal ( asr ) : int -> int -> int = \"%asrint\"\n(** [n asr m] shifts [n] to the right by [m] bits.\n   This is an arithmetic shift: the sign bit of [n] is replicated.\n   The result is unspecified if [m < 0] or [m >= bitsize].\n   Right-associative operator at precedence level 8/11. *)\n\n\n(** {1 Floating-point arithmetic}\n\n   OCaml's floating-point numbers follow the\n   IEEE 754 standard, using double precision (64 bits) numbers.\n   Floating-point operations never raise an exception on overflow,\n   underflow, division by zero, etc.  Instead, special IEEE numbers\n   are returned as appropriate, such as [infinity] for [1.0 /. 0.0],\n   [neg_infinity] for [-1.0 /. 0.0], and [nan] ('not a number')\n   for [0.0 /. 0.0].  These special numbers then propagate through\n   floating-point computations as expected: for instance,\n   [1.0 /. infinity] is [0.0], and any arithmetic operation with [nan]\n   as argument returns [nan] as result.\n*)\n\nexternal ( ~-. ) : float -> float = \"%negfloat\"\n(** Unary negation. You can also write [-. e] instead of [~-. e].\n    Unary operator at precedence level 9/11 for [-. e]\n    and 11/11 for [~-. e]. *)\n\nexternal ( ~+. ) : float -> float = \"%identity\"\n(** Unary addition. You can also write [+. e] instead of [~+. e].\n    Unary operator at precedence level 9/11 for [+. e]\n    and 11/11 for [~+. e].\n    @since 3.12.0\n*)\n\nexternal ( +. ) : float -> float -> float = \"%addfloat\"\n(** Floating-point addition.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( -. ) : float -> float -> float = \"%subfloat\"\n(** Floating-point subtraction.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( *. ) : float -> float -> float = \"%mulfloat\"\n(** Floating-point multiplication.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( /. ) : float -> float -> float = \"%divfloat\"\n(** Floating-point division.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( ** ) : float -> float -> float =  \"pow\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Exponentiation. *)\n\nexternal sqrt : float -> float =  \"sqrt\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Square root. *)\n\nexternal exp : float -> float =  \"exp\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Exponential. *)\n\nexternal log : float -> float =  \"log\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Natural logarithm. *)\n\nexternal log10 : float -> float =  \"log10\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Base 10 logarithm. *)\n\nexternal expm1 : float -> float = \"?expm1_float\" \n(** [expm1 x] computes [exp x -. 1.0], giving numerically-accurate results\n    even if [x] is close to [0.0].\n    @since 3.12.0\n*)\n\nexternal log1p : float -> float =  \"log1p\" [@@bs.val] [@@bs.scope \"Math\"]\n(** [log1p x] computes [log(1.0 +. x)] (natural logarithm),\n    giving numerically-accurate results even if [x] is close to [0.0].\n    @since 3.12.0\n*)\n\nexternal cos : float -> float =  \"cos\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Cosine.  Argument is in radians. *)\n\nexternal sin : float -> float =  \"sin\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Sine.  Argument is in radians. *)\n\nexternal tan : float -> float =  \"tan\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Tangent.  Argument is in radians. *)\n\nexternal acos : float -> float =  \"acos\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Arc cosine.  The argument must fall within the range [[-1.0, 1.0]].\n    Result is in radians and is between [0.0] and [pi]. *)\n\nexternal asin : float -> float =  \"asin\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Arc sine.  The argument must fall within the range [[-1.0, 1.0]].\n    Result is in radians and is between [-pi/2] and [pi/2]. *)\n\nexternal atan : float -> float =  \"atan\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Arc tangent.\n    Result is in radians and is between [-pi/2] and [pi/2]. *)\n\nexternal atan2 : float -> float -> float =  \"atan2\" [@@bs.val] [@@bs.scope \"Math\"]\n(** [atan2 y x] returns the arc tangent of [y /. x].  The signs of [x]\n    and [y] are used to determine the quadrant of the result.\n    Result is in radians and is between [-pi] and [pi]. *)\n\nexternal hypot : float -> float -> float\n               = \"?hypot_float\"\n(** [hypot x y] returns [sqrt(x *. x + y *. y)], that is, the length\n  of the hypotenuse of a right-angled triangle with sides of length\n  [x] and [y], or, equivalently, the distance of the point [(x,y)]\n  to origin.\n  @since 4.00.0  *)\n\nexternal cosh : float -> float =  \"cosh\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Hyperbolic cosine.  Argument is in radians. *)\n\nexternal sinh : float -> float =  \"sinh\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Hyperbolic sine.  Argument is in radians. *)\n\nexternal tanh : float -> float =  \"tanh\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Hyperbolic tangent.  Argument is in radians. *)\n\nexternal ceil : float -> float =  \"ceil\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Round above to an integer value.\n    [ceil f] returns the least integer value greater than or equal to [f].\n    The result is returned as a float. *)\n\nexternal floor : float -> float =  \"floor\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Round below to an integer value.\n    [floor f] returns the greatest integer value less than or\n    equal to [f].\n    The result is returned as a float. *)\n\nexternal abs_float : float -> float = \"abs\" [@@bs.val] [@@bs.scope \"Math\"]\n(** [abs_float f] returns the absolute value of [f]. *)\n\nexternal copysign : float -> float -> float\n                  = \"?copysign_float\" \n(** [copysign x y] returns a float whose absolute value is that of [x]\n  and whose sign is that of [y].  If [x] is [nan], returns [nan].\n  If [y] is [nan], returns either [x] or [-. x], but it is not\n  specified which.\n  @since 4.00.0  *)\n\nexternal mod_float : float -> float -> float = \"?fmod_float\" \n(** [mod_float a b] returns the remainder of [a] with respect to\n   [b].  The returned value is [a -. n *. b], where [n]\n   is the quotient [a /. b] rounded towards zero to an integer. *)\n\nexternal frexp : float -> float * int = \"?frexp_float\"\n(** [frexp f] returns the pair of the significant\n   and the exponent of [f].  When [f] is zero, the\n   significant [x] and the exponent [n] of [f] are equal to\n   zero.  When [f] is non-zero, they are defined by\n   [f = x *. 2 ** n] and [0.5 <= x < 1.0]. *)\n\n\nexternal ldexp : float -> int -> float =\n  \"?ldexp_float\" \n(** [ldexp x n] returns [x *. 2 ** n]. *)\n\nexternal modf : float -> float * float = \"?modf_float\"\n(** [modf f] returns the pair of the fractional and integral\n   part of [f]. *)\n\nexternal float : int -> float = \"%floatofint\"\n(** Same as {!Pervasives.float_of_int}. *)\n\nexternal float_of_int : int -> float = \"%floatofint\"\n(** Convert an integer to floating-point. *)\n\nexternal truncate : float -> int = \"%intoffloat\"\n(** Same as {!Pervasives.int_of_float}. *)\n\nexternal int_of_float : float -> int = \"%intoffloat\"\n(** Truncate the given floating-point number to an integer.\n   The result is unspecified if the argument is [nan] or falls outside the\n   range of representable integers. *)\n\nval infinity : float\n(** Positive infinity. *)\n\nval neg_infinity : float\n(** Negative infinity. *)\n\n\nexternal nan : float = \"NaN\" [@@bs.val]  [@@bs.scope \"Number\"]\n(* we could also use [0.  /. 0.] *)\n(** A special floating-point value denoting the result of an\n   undefined operation such as [0.0 /. 0.0].  Stands for\n   'not a number'.  Any floating-point operation with [nan] as\n   argument returns [nan] as result.  As for floating-point comparisons,\n   [=], [<], [<=], [>] and [>=] return [false] and [<>] returns [true]\n   if one or both of their arguments is [nan]. *)\n\nval max_float : float\n(** The largest positive finite value of type [float]. *)\n\nval min_float : float\n(** The smallest positive, non-zero, non-denormalized value of type [float]. *)\n\nval epsilon_float : float\n(** The difference between [1.0] and the smallest exactly representable\n    floating-point number greater than [1.0]. *)\n\n\ntype fpclass =\n    FP_normal           (** Normal number, none of the below *)\n  | FP_subnormal        (** Number very close to 0.0, has reduced precision *)\n  | FP_zero             (** Number is 0.0 or -0.0 *)\n  | FP_infinite         (** Number is positive or negative infinity *)\n  | FP_nan              (** Not a number: result of an undefined operation *)\n(** The five classes of floating-point numbers, as determined by\n   the {!Pervasives.classify_float} function. *)\n\nval classify_float : float -> fpclass\n(** Return the class of the given floating-point number:\n   normal, subnormal, zero, infinite, or not a number. *)\n\n\n(** {1 String operations}\n\n   More string operations are provided in module {!String}.\n*)\nexternal (^) : string -> string -> string = \"#string_append\"\n(** String concatenation.\n    Right-associative operator at precedence level 5/11. *)\n\n\n(** {1 Character operations}\n\n   More character operations are provided in module {!Char}.\n*)\n\nexternal int_of_char : char -> int = \"%identity\"\n(** Return the ASCII code of the argument. *)\n\nval char_of_int : int -> char\n(** Return the character with the given ASCII code.\n   Raise [Invalid_argument \"char_of_int\"] if the argument is\n   outside the range 0--255. *)\n\n\n(** {1 Unit operations} *)\n\nexternal ignore : 'a -> unit = \"%ignore\"\n(** Discard the value of its argument and return [()].\n   For instance, [ignore(f x)] discards the result of\n   the side-effecting function [f].  It is equivalent to\n   [f x; ()], except that the latter may generate a\n   compiler warning; writing [ignore(f x)] instead\n   avoids the warning. *)\n\n\n(** {1 String conversion functions} *)\n\nval string_of_bool : bool -> string\n(** Return the string representation of a boolean. As the returned values\n   may be shared, the user should not modify them directly.\n*)\n\nval bool_of_string : string -> bool\n(** Convert the given string to a boolean.\n   Raise [Invalid_argument \"bool_of_string\"] if the string is not\n   [\"true\"] or [\"false\"]. *)\n\nval bool_of_string_opt: string -> bool option\n(** Convert the given string to a boolean.\n    Return [None] if the string is not\n    [\"true\"] or [\"false\"].\n    @since 4.05\n*)\n\n\nexternal string_of_int : int -> string = \"String\" [@@bs.val]\n(** Return the string representation of an integer, in decimal. *)\n\nexternal int_of_string : string -> int = \"?int_of_string\"\n(** Convert the given string to an integer.\n   The string is read in decimal (by default, or if the string \n   begins with [0u]), in hexadecimal (if it begins with [0x] or\n   [0X]), in octal (if it begins with [0o] or [0O]), or in binary\n   (if it begins with [0b] or [0B]).\n\n   The [0u] prefix reads the input as an unsigned integer in the range\n   [[0, 2*max_int+1]].  If the input exceeds {!max_int}\n   it is converted to the signed integer\n   [min_int + input - max_int - 1].\n\n   The [_] (underscore) character can appear anywhere in the string\n   and is ignored.\n   Raise [Failure \"int_of_string\"] if the given string is not\n   a valid representation of an integer, or if the integer represented\n   exceeds the range of integers representable in type [int]. *)\n\n\nval int_of_string_opt: string -> int option\n(** Same as [int_of_string], but returns [None] instead of raising.\n    @since 4.05\n*)\n\nval string_of_float : float -> string\n[@@ocaml.deprecated \"Please use Js.Float.toString instead, string_of_float generates unparseable floats\"]\n(** Return the string representation of a floating-point number. *)\n\nexternal float_of_string : string -> float = \"?float_of_string\"\n(** Convert the given string to a float.  The string is read in decimal\n   (by default) or in hexadecimal (marked by [0x] or [0X]).\n   The format of decimal floating-point numbers is\n   [ [-] dd.ddd (e|E) [+|-] dd ], where [d] stands for a decimal digit.\n   The format of hexadecimal floating-point numbers is\n   [ [-] 0(x|X) hh.hhh (p|P) [+|-] dd ], where [h] stands for an\n   hexadecimal digit and [d] for a decimal digit.\n   In both cases, at least one of the integer and fractional parts must be\n   given; the exponent part is optional.\n   The [_] (underscore) character can appear anywhere in the string\n   and is ignored.\n   Depending on the execution platforms, other representations of\n   floating-point numbers can be accepted, but should not be relied upon.\n   Raise [Failure \"float_of_string\"] if the given string is not a valid\n   representation of a float. *)\n\nval float_of_string_opt: string -> float option\n(** Same as [float_of_string], but returns [None] instead of raising.\n    @since 4.05\n*)\n\n(** {1 Pair operations} *)\n\nexternal fst : 'a * 'b -> 'a = \"%field0\"\n(** Return the first component of a pair. *)\n\nexternal snd : 'a * 'b -> 'b = \"%field1\"\n(** Return the second component of a pair. *)\n\n\n(** {1 List operations}\n\n   More list operations are provided in module {!List}.\n*)\n\nval ( @ ) : 'a list -> 'a list -> 'a list\n[@@ocaml.deprecated \"Use Belt.List.append instead\"]    \n(** List concatenation.  Tail-recursive (length of the first argument).\n    Right-associative operator at precedence level 5/11. *)\n\n\ntype int32 = int\n\n\n\n\n\nval print_string : string -> unit\n(** Print a string on standard output. *)\n\n\nval print_int : int -> unit\n(** Print an integer, in decimal, on standard output. *)\n\nval print_float : float -> unit\n(** Print a floating-point number, in decimal, on standard output. *)\nexternal print_endline : string -> unit = \"log\" \n[@@bs.val] [@@bs.scope \"console\"]\n(** Print a string, followed by a newline character, on\n   standard output and flush standard output. *)\n\nval print_newline : unit -> unit\n(** Print a newline character on standard output, and flush\n   standard output. This can be used to simulate line\n   buffering of standard output. *)\n\n\nexternal prerr_endline : string -> unit = \"error\" \n[@@bs.val] [@@bs.scope \"console\"]\n(** Print a string, followed by a newline character on standard\n   error and flush standard error. *)\n\nval prerr_newline : unit -> unit\n(** Print a newline character on standard error, and flush\n   standard error. *)\n\n\n\n\n\n(** {1 References} *)\n\ntype 'a ref = { mutable contents : 'a }\n(** The type of references (mutable indirection cells) containing\n   a value of type ['a]. *)\n\nexternal ref : 'a -> 'a ref = \"%makemutable\"\n(** Return a fresh reference containing the given value. *)\n\nexternal ( ! ) : 'a ref -> 'a = \"%bs_ref_field0\"\n(** [!r] returns the current contents of reference [r].\n   Equivalent to [fun r -> r.contents].\n   Unary operator at precedence level 11/11.*)\n\nexternal ( := ) : 'a ref -> 'a -> unit = \"%bs_ref_setfield0\"\n(** [r := a] stores the value of [a] in reference [r].\n   Equivalent to [fun r v -> r.contents <- v].\n   Right-associative operator at precedence level 1/11. *)\n\nexternal incr : int ref -> unit = \"%incr\"\n(** Increment the integer contained in the given reference.\n   Equivalent to [fun r -> r := succ !r]. *)\n\nexternal decr : int ref -> unit = \"%decr\"\n(** Decrement the integer contained in the given reference.\n   Equivalent to [fun r -> r := pred !r]. *)\n\n(** {1 Result type} *)\n\n(** @since 4.03.0 *)\ntype ('a, 'b) result = ('a, 'b) Belt.Result.t =\n  | Ok of 'a\n  | Error of 'b\n\n\n(** {1 Program termination} *)\n\nval exit : int -> 'a\n(** Terminate the process, returning the given status code\n   to the operating system: usually 0 to indicate no errors,\n   and a small positive integer to indicate failure.\n   All open output channels are flushed with [flush_all].\n   An implicit [exit 0] is performed each time a program\n   terminates normally.  An implicit [exit 2] is performed if the program\n   terminates early because of an uncaught exception. *)\n\nval at_exit : (unit -> unit) -> unit\n(** Register the given function to be called at program termination\n   time. The functions registered with [at_exit] will be called when\n   the program does any of the following:\n   - executes {!Pervasives.exit}\n   - terminates, either normally or because of an uncaught\n     exception\n   - executes the C function [caml_shutdown].\n   The functions are called in 'last in, first out' order: the\n   function most recently added with [at_exit] is called first. *)\n\n(**/**)\n\nval valid_float_lexem : string -> string\n"}}}
bs-platform could not be found
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/pervasives.mli"}}}
bs-platform could not be found
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/pervasives.mli","languageId":"ocaml","version":1,"text":"(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(** The initially opened module.\n\n   This module provides the basic operations over the built-in types\n   (numbers, booleans, byte sequences, strings, exceptions, references,\n   lists, arrays, input-output channels, ...).\n\n   This module is automatically opened at the beginning of each compilation.\n   All components of this module can therefore be referred by their short\n   name, without prefixing them by [Pervasives].\n*)\n\n\n(* Internal *)\nexternal __unsafe_cast : 'a -> 'b = \"%identity\"\n\n(** {1 Exceptions} *)\n\nexternal raise : exn -> 'a = \"%raise\"\n(** Raise the given exception value *)\n\nexternal raise_notrace : exn -> 'a = \"%raise_notrace\"\n(** A faster version [raise] which does not record the backtrace.\n    @since 4.02.0\n*)\n\nval invalid_arg : string -> 'a\n(** Raise exception [Invalid_argument] with the given string. *)\n\nval failwith : string -> 'a\n(** Raise exception [Failure] with the given string. *)\n\nexception Exit\n(** The [Exit] exception is not raised by any library function.  It is\n    provided for use in your programs. *)\n\n\n(** {1 Comparisons} *)\n\nexternal ( = ) : 'a -> 'a -> bool = \"%equal\"\n(** [e1 = e2] tests for structural equality of [e1] and [e2].\n   Mutable structures (e.g. references and arrays) are equal\n   if and only if their current contents are structurally equal,\n   even if the two mutable objects are not the same physical object.\n   Equality between functional values raises [Invalid_argument].\n   Equality between cyclic data structures may not terminate.\n   Left-associative operator at precedence level 4/11. *)\n\nexternal ( <> ) : 'a -> 'a -> bool = \"%notequal\"\n(** Negation of {!Pervasives.( = )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( < ) : 'a -> 'a -> bool = \"%lessthan\"\n(** See {!Pervasives.( >= )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( > ) : 'a -> 'a -> bool = \"%greaterthan\"\n(** See {!Pervasives.( >= )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( <= ) : 'a -> 'a -> bool = \"%lessequal\"\n(** See {!Pervasives.( >= )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( >= ) : 'a -> 'a -> bool = \"%greaterequal\"\n(** Structural ordering functions. These functions coincide with\n   the usual orderings over integers, characters, strings, byte sequences\n   and floating-point numbers, and extend them to a\n   total ordering over all types.\n   The ordering is compatible with [( = )]. As in the case\n   of [( = )], mutable structures are compared by contents.\n   Comparison between functional values raises [Invalid_argument].\n   Comparison between cyclic structures may not terminate.\n   Left-associative operator at precedence level 4/11. *)\n\nexternal compare : 'a -> 'a -> int = \"%compare\"\n(** [compare x y] returns [0] if [x] is equal to [y],\n   a negative integer if [x] is less than [y], and a positive integer\n   if [x] is greater than [y].  The ordering implemented by [compare]\n   is compatible with the comparison predicates [=], [<] and [>]\n   defined above,  with one difference on the treatment of the float value\n   {!Pervasives.nan}.  Namely, the comparison predicates treat [nan]\n   as different from any other float value, including itself;\n   while [compare] treats [nan] as equal to itself and less than any\n   other float value.  This treatment of [nan] ensures that [compare]\n   defines a total ordering relation.\n\n   [compare] applied to functional values may raise [Invalid_argument].\n   [compare] applied to cyclic structures may not terminate.\n\n   The [compare] function can be used as the comparison function\n   required by the {!Set.Make} and {!Map.Make} functors, as well as\n   the {!List.sort} and {!Array.sort} functions. *)\n\nexternal min : 'a -> 'a -> 'a = \"%bs_min\"\n(** Return the smaller of the two arguments.\n    The result is unspecified if one of the arguments contains\n    the float value [nan]. *)\n\nexternal max : 'a -> 'a -> 'a = \"%bs_max\"\n(** Return the greater of the two arguments.\n    The result is unspecified if one of the arguments contains\n    the float value [nan]. *)\n\nexternal ( == ) : 'a -> 'a -> bool = \"%eq\"\n(** [e1 == e2] tests for physical equality of [e1] and [e2].\n   On mutable types such as references, arrays, byte sequences, records with\n   mutable fields and objects with mutable instance variables,\n   [e1 == e2] is true if and only if physical modification of [e1]\n   also affects [e2].\n   On non-mutable types, the behavior of [( == )] is\n   implementation-dependent; however, it is guaranteed that\n   [e1 == e2] implies [compare e1 e2 = 0].\n   Left-associative operator at precedence level 4/11. *)\n\nexternal ( != ) : 'a -> 'a -> bool = \"%noteq\"\n(** Negation of {!Pervasives.( == )}.\n    Left-associative operator at precedence level 4/11. *)\n\n\n(** {1 Boolean operations} *)\n\nexternal not : bool -> bool = \"%boolnot\"\n(** The boolean negation. *)\n\nexternal ( && ) : bool -> bool -> bool = \"%sequand\"\n(** The boolean 'and'. Evaluation is sequential, left-to-right:\n   in [e1 && e2], [e1] is evaluated first, and if it returns [false],\n   [e2] is not evaluated at all.\n   Right-associative operator at precedence level 3/11. *)\n\n\nexternal ( || ) : bool -> bool -> bool = \"%sequor\"\n(** The boolean 'or'. Evaluation is sequential, left-to-right:\n   in [e1 || e2], [e1] is evaluated first, and if it returns [true],\n   [e2] is not evaluated at all.\n   Right-associative operator at precedence level 2/11.\n*)\n\n\n(** {1 Debugging} *)\n\nexternal __LOC__ : string = \"%loc_LOC\"\n(** [__LOC__] returns the location at which this expression appears in\n    the file currently being parsed by the compiler, with the standard\n    error format of OCaml: \"File %S, line %d, characters %d-%d\".\n    @since 4.02.0\n*)\n\nexternal __FILE__ : string = \"%loc_FILE\"\n(** [__FILE__] returns the name of the file currently being\n    parsed by the compiler.\n    @since 4.02.0\n*)\n\nexternal __LINE__ : int = \"%loc_LINE\"\n(** [__LINE__] returns the line number at which this expression\n    appears in the file currently being parsed by the compiler.\n    @since 4.02.0\n*)\n\nexternal __MODULE__ : string = \"%loc_MODULE\"\n(** [__MODULE__] returns the module name of the file being\n    parsed by the compiler.\n    @since 4.02.0\n*)\n\nexternal __POS__ : string * int * int * int = \"%loc_POS\"\n(** [__POS__] returns a tuple [(file,lnum,cnum,enum)], corresponding\n    to the location at which this expression appears in the file\n    currently being parsed by the compiler. [file] is the current\n    filename, [lnum] the line number, [cnum] the character position in\n    the line and [enum] the last character position in the line.\n    @since 4.02.0\n *)\n\nexternal __LOC_OF__ : 'a -> string * 'a = \"%loc_LOC\"\n(** [__LOC_OF__ expr] returns a pair [(loc, expr)] where [loc] is the\n    location of [expr] in the file currently being parsed by the\n    compiler, with the standard error format of OCaml: \"File %S, line\n    %d, characters %d-%d\".\n    @since 4.02.0\n*)\n\nexternal __LINE_OF__ : 'a -> int * 'a = \"%loc_LINE\"\n(** [__LINE__ expr] returns a pair [(line, expr)], where [line] is the\n    line number at which the expression [expr] appears in the file\n    currently being parsed by the compiler.\n    @since 4.02.0\n *)\n\nexternal __POS_OF__ : 'a -> (string * int * int * int) * 'a = \"%loc_POS\"\n(** [__POS_OF__ expr] returns a pair [(loc,expr)], where [loc] is a\n    tuple [(file,lnum,cnum,enum)] corresponding to the location at\n    which the expression [expr] appears in the file currently being\n    parsed by the compiler. [file] is the current filename, [lnum] the\n    line number, [cnum] the character position in the line and [enum]\n    the last character position in the line.\n    @since 4.02.0\n *)\n\n(** {1 Composition operators} *)\n\nexternal ( |> ) : 'a -> ('a -> 'b) -> 'b = \"%revapply\"\n(** Reverse-application operator: [x |> f |> g] is exactly equivalent\n to [g (f (x))].\n Left-associative operator at precedence level 4/11.\n   @since 4.01\n *)\n\nexternal ( @@ ) : ('a -> 'b) -> 'a -> 'b = \"%apply\"\n(** Application operator: [g @@ f @@ x] is exactly equivalent to\n [g (f (x))].\n Right-associative operator at precedence level 5/11.\n   @since 4.01\n*)\n\n(** {1 Integer arithmetic} *)\n\n(** Integers are 31 bits wide (or 63 bits on 64-bit processors).\n   All operations are taken modulo 2{^31} (or 2{^63}).\n   They do not fail on overflow. *)\n\nexternal ( ~- ) : int -> int = \"%negint\"\n(** Unary negation. You can also write [- e] instead of [~- e].\n    Unary operator at precedence level 9/11 for [- e]\n    and 11/11 for [~- e]. *)\n\nexternal ( ~+ ) : int -> int = \"%identity\"\n(** Unary addition. You can also write [+ e] instead of [~+ e].\n    Unary operator at precedence level 9/11 for [+ e]\n    and 11/11 for [~+ e].\n    @since 3.12.0\n*)\n\nexternal succ : int -> int = \"%succint\"\n(** [succ x] is [x + 1]. *)\n\nexternal pred : int -> int = \"%predint\"\n(** [pred x] is [x - 1]. *)\n\nexternal ( + ) : int -> int -> int = \"%addint\"\n(** Integer addition.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( - ) : int -> int -> int = \"%subint\"\n(** Integer subtraction.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( * ) : int -> int -> int = \"%mulint\"\n(** Integer multiplication.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( / ) : int -> int -> int = \"%divint\"\n(** Integer division.\n   Raise [Division_by_zero] if the second argument is 0.\n   Integer division rounds the real quotient of its arguments towards zero.\n   More precisely, if [x >= 0] and [y > 0], [x / y] is the greatest integer\n   less than or equal to the real quotient of [x] by [y].  Moreover,\n   [(- x) / y = x / (- y) = - (x / y)].\n   Left-associative operator at precedence level 7/11. *)\n\nexternal ( mod ) : int -> int -> int = \"%modint\"\n(** Integer remainder.  If [y] is not zero, the result\n   of [x mod y] satisfies the following properties:\n   [x = (x / y) * y + x mod y] and\n   [abs(x mod y) <= abs(y) - 1].\n   If [y = 0], [x mod y] raises [Division_by_zero].\n   Note that [x mod y] is negative only if [x < 0].\n   Raise [Division_by_zero] if [y] is zero.\n   Left-associative operator at precedence level 7/11. *)\n\nval abs : int -> int\n(** Return the absolute value of the argument.  Note that this may be\n  negative if the argument is [min_int]. *)\n\nval max_int : int\n(** The greatest representable integer. *)\n\nval min_int : int\n(** The smallest representable integer. *)\n\n\n(** {2 Bitwise operations} *)\n\nexternal ( land ) : int -> int -> int = \"%andint\"\n(** Bitwise logical and.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( lor ) : int -> int -> int = \"%orint\"\n(** Bitwise logical or.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( lxor ) : int -> int -> int = \"%xorint\"\n(** Bitwise logical exclusive or.\n    Left-associative operator at precedence level 7/11. *)\n\nval lnot : int -> int\n(** Bitwise logical negation. *)\n\nexternal ( lsl ) : int -> int -> int = \"%lslint\"\n(** [n lsl m] shifts [n] to the left by [m] bits.\n   The result is unspecified if [m < 0] or [m >= bitsize],\n   where [bitsize] is [32] on a 32-bit platform and\n   [64] on a 64-bit platform.\n   Right-associative operator at precedence level 8/11. *)\n\nexternal ( lsr ) : int -> int -> int = \"%lsrint\"\n(** [n lsr m] shifts [n] to the right by [m] bits.\n   This is a logical shift: zeroes are inserted regardless of\n   the sign of [n].\n   The result is unspecified if [m < 0] or [m >= bitsize].\n   Right-associative operator at precedence level 8/11. *)\n\nexternal ( asr ) : int -> int -> int = \"%asrint\"\n(** [n asr m] shifts [n] to the right by [m] bits.\n   This is an arithmetic shift: the sign bit of [n] is replicated.\n   The result is unspecified if [m < 0] or [m >= bitsize].\n   Right-associative operator at precedence level 8/11. *)\n\n\n(** {1 Floating-point arithmetic}\n\n   OCaml's floating-point numbers follow the\n   IEEE 754 standard, using double precision (64 bits) numbers.\n   Floating-point operations never raise an exception on overflow,\n   underflow, division by zero, etc.  Instead, special IEEE numbers\n   are returned as appropriate, such as [infinity] for [1.0 /. 0.0],\n   [neg_infinity] for [-1.0 /. 0.0], and [nan] ('not a number')\n   for [0.0 /. 0.0].  These special numbers then propagate through\n   floating-point computations as expected: for instance,\n   [1.0 /. infinity] is [0.0], and any arithmetic operation with [nan]\n   as argument returns [nan] as result.\n*)\n\nexternal ( ~-. ) : float -> float = \"%negfloat\"\n(** Unary negation. You can also write [-. e] instead of [~-. e].\n    Unary operator at precedence level 9/11 for [-. e]\n    and 11/11 for [~-. e]. *)\n\nexternal ( ~+. ) : float -> float = \"%identity\"\n(** Unary addition. You can also write [+. e] instead of [~+. e].\n    Unary operator at precedence level 9/11 for [+. e]\n    and 11/11 for [~+. e].\n    @since 3.12.0\n*)\n\nexternal ( +. ) : float -> float -> float = \"%addfloat\"\n(** Floating-point addition.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( -. ) : float -> float -> float = \"%subfloat\"\n(** Floating-point subtraction.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( *. ) : float -> float -> float = \"%mulfloat\"\n(** Floating-point multiplication.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( /. ) : float -> float -> float = \"%divfloat\"\n(** Floating-point division.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( ** ) : float -> float -> float =  \"pow\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Exponentiation. *)\n\nexternal sqrt : float -> float =  \"sqrt\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Square root. *)\n\nexternal exp : float -> float =  \"exp\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Exponential. *)\n\nexternal log : float -> float =  \"log\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Natural logarithm. *)\n\nexternal log10 : float -> float =  \"log10\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Base 10 logarithm. *)\n\nexternal expm1 : float -> float = \"?expm1_float\" \n(** [expm1 x] computes [exp x -. 1.0], giving numerically-accurate results\n    even if [x] is close to [0.0].\n    @since 3.12.0\n*)\n\nexternal log1p : float -> float =  \"log1p\" [@@bs.val] [@@bs.scope \"Math\"]\n(** [log1p x] computes [log(1.0 +. x)] (natural logarithm),\n    giving numerically-accurate results even if [x] is close to [0.0].\n    @since 3.12.0\n*)\n\nexternal cos : float -> float =  \"cos\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Cosine.  Argument is in radians. *)\n\nexternal sin : float -> float =  \"sin\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Sine.  Argument is in radians. *)\n\nexternal tan : float -> float =  \"tan\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Tangent.  Argument is in radians. *)\n\nexternal acos : float -> float =  \"acos\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Arc cosine.  The argument must fall within the range [[-1.0, 1.0]].\n    Result is in radians and is between [0.0] and [pi]. *)\n\nexternal asin : float -> float =  \"asin\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Arc sine.  The argument must fall within the range [[-1.0, 1.0]].\n    Result is in radians and is between [-pi/2] and [pi/2]. *)\n\nexternal atan : float -> float =  \"atan\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Arc tangent.\n    Result is in radians and is between [-pi/2] and [pi/2]. *)\n\nexternal atan2 : float -> float -> float =  \"atan2\" [@@bs.val] [@@bs.scope \"Math\"]\n(** [atan2 y x] returns the arc tangent of [y /. x].  The signs of [x]\n    and [y] are used to determine the quadrant of the result.\n    Result is in radians and is between [-pi] and [pi]. *)\n\nexternal hypot : float -> float -> float\n               = \"?hypot_float\"\n(** [hypot x y] returns [sqrt(x *. x + y *. y)], that is, the length\n  of the hypotenuse of a right-angled triangle with sides of length\n  [x] and [y], or, equivalently, the distance of the point [(x,y)]\n  to origin.\n  @since 4.00.0  *)\n\nexternal cosh : float -> float =  \"cosh\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Hyperbolic cosine.  Argument is in radians. *)\n\nexternal sinh : float -> float =  \"sinh\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Hyperbolic sine.  Argument is in radians. *)\n\nexternal tanh : float -> float =  \"tanh\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Hyperbolic tangent.  Argument is in radians. *)\n\nexternal ceil : float -> float =  \"ceil\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Round above to an integer value.\n    [ceil f] returns the least integer value greater than or equal to [f].\n    The result is returned as a float. *)\n\nexternal floor : float -> float =  \"floor\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Round below to an integer value.\n    [floor f] returns the greatest integer value less than or\n    equal to [f].\n    The result is returned as a float. *)\n\nexternal abs_float : float -> float = \"abs\" [@@bs.val] [@@bs.scope \"Math\"]\n(** [abs_float f] returns the absolute value of [f]. *)\n\nexternal copysign : float -> float -> float\n                  = \"?copysign_float\" \n(** [copysign x y] returns a float whose absolute value is that of [x]\n  and whose sign is that of [y].  If [x] is [nan], returns [nan].\n  If [y] is [nan], returns either [x] or [-. x], but it is not\n  specified which.\n  @since 4.00.0  *)\n\nexternal mod_float : float -> float -> float = \"?fmod_float\" \n(** [mod_float a b] returns the remainder of [a] with respect to\n   [b].  The returned value is [a -. n *. b], where [n]\n   is the quotient [a /. b] rounded towards zero to an integer. *)\n\nexternal frexp : float -> float * int = \"?frexp_float\"\n(** [frexp f] returns the pair of the significant\n   and the exponent of [f].  When [f] is zero, the\n   significant [x] and the exponent [n] of [f] are equal to\n   zero.  When [f] is non-zero, they are defined by\n   [f = x *. 2 ** n] and [0.5 <= x < 1.0]. *)\n\n\nexternal ldexp : float -> int -> float =\n  \"?ldexp_float\" \n(** [ldexp x n] returns [x *. 2 ** n]. *)\n\nexternal modf : float -> float * float = \"?modf_float\"\n(** [modf f] returns the pair of the fractional and integral\n   part of [f]. *)\n\nexternal float : int -> float = \"%floatofint\"\n(** Same as {!Pervasives.float_of_int}. *)\n\nexternal float_of_int : int -> float = \"%floatofint\"\n(** Convert an integer to floating-point. *)\n\nexternal truncate : float -> int = \"%intoffloat\"\n(** Same as {!Pervasives.int_of_float}. *)\n\nexternal int_of_float : float -> int = \"%intoffloat\"\n(** Truncate the given floating-point number to an integer.\n   The result is unspecified if the argument is [nan] or falls outside the\n   range of representable integers. *)\n\nval infinity : float\n(** Positive infinity. *)\n\nval neg_infinity : float\n(** Negative infinity. *)\n\n\nexternal nan : float = \"NaN\" [@@bs.val]  [@@bs.scope \"Number\"]\n(* we could also use [0.  /. 0.] *)\n(** A special floating-point value denoting the result of an\n   undefined operation such as [0.0 /. 0.0].  Stands for\n   'not a number'.  Any floating-point operation with [nan] as\n   argument returns [nan] as result.  As for floating-point comparisons,\n   [=], [<], [<=], [>] and [>=] return [false] and [<>] returns [true]\n   if one or both of their arguments is [nan]. *)\n\nval max_float : float\n(** The largest positive finite value of type [float]. *)\n\nval min_float : float\n(** The smallest positive, non-zero, non-denormalized value of type [float]. *)\n\nval epsilon_float : float\n(** The difference between [1.0] and the smallest exactly representable\n    floating-point number greater than [1.0]. *)\n\n\ntype fpclass =\n    FP_normal           (** Normal number, none of the below *)\n  | FP_subnormal        (** Number very close to 0.0, has reduced precision *)\n  | FP_zero             (** Number is 0.0 or -0.0 *)\n  | FP_infinite         (** Number is positive or negative infinity *)\n  | FP_nan              (** Not a number: result of an undefined operation *)\n(** The five classes of floating-point numbers, as determined by\n   the {!Pervasives.classify_float} function. *)\n\nval classify_float : float -> fpclass\n(** Return the class of the given floating-point number:\n   normal, subnormal, zero, infinite, or not a number. *)\n\n\n(** {1 String operations}\n\n   More string operations are provided in module {!String}.\n*)\nexternal (^) : string -> string -> string = \"#string_append\"\n(** String concatenation.\n    Right-associative operator at precedence level 5/11. *)\n\n\n(** {1 Character operations}\n\n   More character operations are provided in module {!Char}.\n*)\n\nexternal int_of_char : char -> int = \"%identity\"\n(** Return the ASCII code of the argument. *)\n\nval char_of_int : int -> char\n(** Return the character with the given ASCII code.\n   Raise [Invalid_argument \"char_of_int\"] if the argument is\n   outside the range 0--255. *)\n\n\n(** {1 Unit operations} *)\n\nexternal ignore : 'a -> unit = \"%ignore\"\n(** Discard the value of its argument and return [()].\n   For instance, [ignore(f x)] discards the result of\n   the side-effecting function [f].  It is equivalent to\n   [f x; ()], except that the latter may generate a\n   compiler warning; writing [ignore(f x)] instead\n   avoids the warning. *)\n\n\n(** {1 String conversion functions} *)\n\nval string_of_bool : bool -> string\n(** Return the string representation of a boolean. As the returned values\n   may be shared, the user should not modify them directly.\n*)\n\nval bool_of_string : string -> bool\n(** Convert the given string to a boolean.\n   Raise [Invalid_argument \"bool_of_string\"] if the string is not\n   [\"true\"] or [\"false\"]. *)\n\nval bool_of_string_opt: string -> bool option\n(** Convert the given string to a boolean.\n    Return [None] if the string is not\n    [\"true\"] or [\"false\"].\n    @since 4.05\n*)\n\n\nexternal string_of_int : int -> string = \"String\" [@@bs.val]\n(** Return the string representation of an integer, in decimal. *)\n\nexternal int_of_string : string -> int = \"?int_of_string\"\n(** Convert the given string to an integer.\n   The string is read in decimal (by default, or if the string \n   begins with [0u]), in hexadecimal (if it begins with [0x] or\n   [0X]), in octal (if it begins with [0o] or [0O]), or in binary\n   (if it begins with [0b] or [0B]).\n\n   The [0u] prefix reads the input as an unsigned integer in the range\n   [[0, 2*max_int+1]].  If the input exceeds {!max_int}\n   it is converted to the signed integer\n   [min_int + input - max_int - 1].\n\n   The [_] (underscore) character can appear anywhere in the string\n   and is ignored.\n   Raise [Failure \"int_of_string\"] if the given string is not\n   a valid representation of an integer, or if the integer represented\n   exceeds the range of integers representable in type [int]. *)\n\n\nval int_of_string_opt: string -> int option\n(** Same as [int_of_string], but returns [None] instead of raising.\n    @since 4.05\n*)\n\nval string_of_float : float -> string\n[@@ocaml.deprecated \"Please use Js.Float.toString instead, string_of_float generates unparseable floats\"]\n(** Return the string representation of a floating-point number. *)\n\nexternal float_of_string : string -> float = \"?float_of_string\"\n(** Convert the given string to a float.  The string is read in decimal\n   (by default) or in hexadecimal (marked by [0x] or [0X]).\n   The format of decimal floating-point numbers is\n   [ [-] dd.ddd (e|E) [+|-] dd ], where [d] stands for a decimal digit.\n   The format of hexadecimal floating-point numbers is\n   [ [-] 0(x|X) hh.hhh (p|P) [+|-] dd ], where [h] stands for an\n   hexadecimal digit and [d] for a decimal digit.\n   In both cases, at least one of the integer and fractional parts must be\n   given; the exponent part is optional.\n   The [_] (underscore) character can appear anywhere in the string\n   and is ignored.\n   Depending on the execution platforms, other representations of\n   floating-point numbers can be accepted, but should not be relied upon.\n   Raise [Failure \"float_of_string\"] if the given string is not a valid\n   representation of a float. *)\n\nval float_of_string_opt: string -> float option\n(** Same as [float_of_string], but returns [None] instead of raising.\n    @since 4.05\n*)\n\n(** {1 Pair operations} *)\n\nexternal fst : 'a * 'b -> 'a = \"%field0\"\n(** Return the first component of a pair. *)\n\nexternal snd : 'a * 'b -> 'b = \"%field1\"\n(** Return the second component of a pair. *)\n\n\n(** {1 List operations}\n\n   More list operations are provided in module {!List}.\n*)\n\nval ( @ ) : 'a list -> 'a list -> 'a list\n[@@ocaml.deprecated \"Use Belt.List.append instead\"]    \n(** List concatenation.  Tail-recursive (length of the first argument).\n    Right-associative operator at precedence level 5/11. *)\n\n\ntype int32 = int\n\n\n\n\n\nval print_string : string -> unit\n(** Print a string on standard output. *)\n\n\nval print_int : int -> unit\n(** Print an integer, in decimal, on standard output. *)\n\nval print_float : float -> unit\n(** Print a floating-point number, in decimal, on standard output. *)\nexternal print_endline : string -> unit = \"log\" \n[@@bs.val] [@@bs.scope \"console\"]\n(** Print a string, followed by a newline character, on\n   standard output and flush standard output. *)\n\nval print_newline : unit -> unit\n(** Print a newline character on standard output, and flush\n   standard output. This can be used to simulate line\n   buffering of standard output. *)\n\n\nexternal prerr_endline : string -> unit = \"error\" \n[@@bs.val] [@@bs.scope \"console\"]\n(** Print a string, followed by a newline character on standard\n   error and flush standard error. *)\n\nval prerr_newline : unit -> unit\n(** Print a newline character on standard error, and flush\n   standard error. *)\n\n\n\n\n\n(** {1 References} *)\n\ntype 'a ref = { mutable contents : 'a }\n(** The type of references (mutable indirection cells) containing\n   a value of type ['a]. *)\n\nexternal ref : 'a -> 'a ref = \"%makemutable\"\n(** Return a fresh reference containing the given value. *)\n\nexternal ( ! ) : 'a ref -> 'a = \"%bs_ref_field0\"\n(** [!r] returns the current contents of reference [r].\n   Equivalent to [fun r -> r.contents].\n   Unary operator at precedence level 11/11.*)\n\nexternal ( := ) : 'a ref -> 'a -> unit = \"%bs_ref_setfield0\"\n(** [r := a] stores the value of [a] in reference [r].\n   Equivalent to [fun r v -> r.contents <- v].\n   Right-associative operator at precedence level 1/11. *)\n\nexternal incr : int ref -> unit = \"%incr\"\n(** Increment the integer contained in the given reference.\n   Equivalent to [fun r -> r := succ !r]. *)\n\nexternal decr : int ref -> unit = \"%decr\"\n(** Decrement the integer contained in the given reference.\n   Equivalent to [fun r -> r := pred !r]. *)\n\n(** {1 Result type} *)\n\n(** @since 4.03.0 *)\ntype ('a, 'b) result = ('a, 'b) Belt.Result.t =\n  | Ok of 'a\n  | Error of 'b\n\n\n(** {1 Program termination} *)\n\nval exit : int -> 'a\n(** Terminate the process, returning the given status code\n   to the operating system: usually 0 to indicate no errors,\n   and a small positive integer to indicate failure.\n   All open output channels are flushed with [flush_all].\n   An implicit [exit 0] is performed each time a program\n   terminates normally.  An implicit [exit 2] is performed if the program\n   terminates early because of an uncaught exception. *)\n\nval at_exit : (unit -> unit) -> unit\n(** Register the given function to be called at program termination\n   time. The functions registered with [at_exit] will be called when\n   the program does any of the following:\n   - executes {!Pervasives.exit}\n   - terminates, either normally or because of an uncaught\n     exception\n   - executes the C function [caml_shutdown].\n   The functions are called in 'last in, first out' order: the\n   function most recently added with [at_exit] is called first. *)\n\n(**/**)\n\nval valid_float_lexem : string -> string\n"}}}
bs-platform could not be found
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/pervasives.mli"}}}
bs-platform could not be found
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/js_string2.ml","languageId":"ocaml","version":1,"text":"(* Copyright (C) 2015-2016 Bloomberg Finance L.P.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * In addition to the permissions granted to you by the LGPL, you may combine\n * or link a \"work that uses the Library\" with a publicly distributed version\n * of this file to produce a combined library or application, then distribute\n * that combined work under the terms of your choosing, with no requirement\n * to comply with the obligations normally placed on you by section 4 of the\n * LGPL version 3 (or the corresponding section of a later version of the LGPL\n * should you choose to use a later version).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)\n\n(** Provide bindings to JS string. Optimized for pipe-first. *)\n\ntype t = string\n\nexternal make : 'a -> t = \"String\"\n  [@@bs.val]\n(**\n`make(value)` converts the given value to a `string`.\n\n```res example\nJs.String2.make(3.5) == \"3.5\"\nJs.String2.make([1, 2, 3]) == \"1,2,3\"\n```\n*)\n\nexternal fromCharCode : int -> t = \"String.fromCharCode\"\n  [@@bs.val]\n(**\n`fromCharCode(n)` creates a `string` containing the character corresponding to\nthat number; `n` ranges from 0 to 65535.If out of range, the lower 16 bits of\nthe value are used. Thus, `fromCharCode(0x1F63A)` gives the same result as\n`fromCharCode(0xF63A)`.\n\nSee [`String.fromCharCode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)\non MDN.\n\n```res example\nJs.String2.fromCharCode(65) == \"A\"\nJs.String2.fromCharCode(0x3c8) == `Ïˆ`\nJs.String2.fromCharCode(0xd55c) == `í•œ`\nJs.String2.fromCharCode(-64568) == `Ïˆ`\n```\n*)\n\nexternal fromCharCodeMany : int array -> t = \"String.fromCharCode\"\n  [@@bs.val] [@@bs.splice]\n(**\n`fromCharCodeMany([n1, n2, n3])` creates a `string` from the characters\ncorresponding to the given numbers, using the same rules as `fromCharCode`.\n\nSee [`String.fromCharCode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)\non MDN.\n*)\n\nexternal fromCodePoint : int -> t = \"String.fromCodePoint\"\n  [@@bs.val]\n(**\n`fromCodePoint(n)` creates a `string` containing the character corresponding to\nthat numeric code point. If the number is not a valid code point, it raises\n`RangeError`. Thus, `fromCodePoint(0x1F63A)` will produce a correct value,\nunlike `fromCharCode(0x1F63A)`, and `fromCodePoint(-5)` will raise a\n`RangeError`.\n\nSee [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\non MDN.\n\n```res example\nJs.String2.fromCodePoint(65) == \"A\"\nJs.String2.fromCodePoint(0x3c8) == `Ïˆ`\nJs.String2.fromCodePoint(0xd55c) == `í•œ`\nJs.String2.fromCodePoint(0x1f63a) == `ðŸ˜º`\n```\n*)\n\nexternal fromCodePointMany : int array -> t = \"String.fromCodePoint\"\n  [@@bs.val] [@@bs.splice]\n(**\n`fromCodePointMany([n1, n2, n3])` creates a `string` from the characters\ncorresponding to the given code point numbers, using the same rules as\n`fromCodePoint`.\n\nSee [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\non MDN.\n\n```res example\nJs.String2.fromCodePointMany([0xd55c, 0xae00, 0x1f63a]) == `í•œê¸€ðŸ˜º`\n```\n*)\n\n(* String.raw: ES2015, meant to be used with template strings, not directly *)\n\nexternal length : t -> int = \"length\"\n  [@@bs.get]\n(**\n`length(s)` returns the length of the given `string`.\n\nSee [`String.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length)\non MDN.\n\n```res example\nJs.String2.length(\"abcd\") == 4\n```\n*)\n\nexternal get : t -> int -> t = \"\"\n  [@@bs.get_index]\n(**\n`get(s, n)` returns as a `string` the character at the given index number. If\n`n` is out of range, this function returns `undefined`,so at some point this\nfunction may be modified to return `option(string)`.\n\n```res example\nJs.String2.get(\"Reason\", 0) == \"R\"\nJs.String2.get(\"Reason\", 4) == \"o\"\nJs.String2.get(`Ráº½asÃ¶Å„`, 5) == `Å„`\n```\n*)\n\nexternal charAt : t -> int -> t = \"charAt\"\n  [@@bs.send]\n(**\n`charAt(s, n)` gets the character at index `n` within string `s`. If `n` is\nnegative or greater than the length of `s`, it returns the empty string. If the\nstring contains characters outside the range \\u0000-\\uffff, it will return the\nfirst 16-bit value at that position in the string.\n\nSee [`String.charAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt)\non MDN.\n\n```res example\nJs.String2.charAt(\"Reason\", 0) == \"R\"\nJs.String2.charAt(\"Reason\", 12) == \"\"\nJs.String2.charAt(`Ráº½asÃ¶Å„`, 5) == `Å„`\n```\n*)\n\nexternal charCodeAt : t -> int -> float = \"charCodeAt\"\n  [@@bs.send]\n(**\n`charCodeAt(s, n)` returns the character code at position `n` in string `s`;\nthe result is in the range 0-65535, unlke `codePointAt`, so it will not work\ncorrectly for characters with code points greater than or equal to 0x10000. The\nreturn type is `float` because this function returns NaN if `n` is less than\nzero or greater than the length of the string.\n\nSee [`String.charCodeAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt)\non MDN.\n\n```res example\nJs.String2.charCodeAt(`ðŸ˜º`, 0) == 0xd83d->Belt.Int.toFloat\nJs.String2.codePointAt(`ðŸ˜º`, 0) == Some(0x1f63a)\n```\n*)\n\nexternal codePointAt : t -> int -> int option = \"codePointAt\"\n  [@@bs.send]\n(**\n`codePointAt(s, n)` returns the code point at position `n` within string `s` as\na `Some(value)`. The return value handles code points greater than or equal to\n0x10000. If there is no code point at the given position, the function returns\n`None`.\n\nSee [`String.codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)\non MDN.\n\n```res example\nJs.String2.codePointAt(`Â¿ðŸ˜º?`, 1) == Some(0x1f63a)\nJs.String2.codePointAt(\"abc\", 5) == None\n```\n*)\n\nexternal concat : t -> t -> t = \"concat\"\n  [@@bs.send]\n(**\n`concat(original, append)` returns a new `string` with `append` added after\n`original`.\n\nSee [`String.concat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat)\non MDN.\n\n```res example\nJs.String2.concat(\"cow\", \"bell\") == \"cowbell\"\n```\n*)\n\nexternal concatMany : t -> t array -> t = \"concat\"\n  [@@bs.send] [@@bs.splice]\n(**\n`concatMany(original, arr)` returns a new `string` consisting of each item of an\narray of strings added to the `original` string.\n\nSee [`String.concat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat)\non MDN.\n\n```res example\nJs.String2.concatMany(\"1st\", [\"2nd\", \"3rd\", \"4th\"]) == \"1st2nd3rd4th\"\n```\n*)\n\nexternal endsWith : t -> t -> bool = \"endsWith\"\n  [@@bs.send]\n(**\nES2015: `endsWith(str, substr)` returns `true` if the `str` ends with `substr`,\n`false` otherwise.\n\nSee [`String.endsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith)\non MDN.\n\n```res example\nJs.String2.endsWith(\"BuckleScript\", \"Script\") == true\nJs.String2.endsWith(\"BuckleShoes\", \"Script\") == false\n```\n*)\n\nexternal endsWithFrom : t -> t -> int -> bool = \"endsWith\"\n  [@@bs.send]\n(**\n`endsWithFrom(str, ending, len)` returns `true` if the first len characters of\n`str` end with `ending`, `false` otherwise. If `len` is greater than or equal\nto the length of `str`, then it works like `endsWith`. (Honestly, this should\nhave been named endsWithAt, but oh well).\n\nSee [`String.endsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith)\non MDN.\n\n```res example\nJs.String2.endsWithFrom(\"abcd\", \"cd\", 4) == true\nJs.String2.endsWithFrom(\"abcde\", \"cd\", 3) == false\nJs.String2.endsWithFrom(\"abcde\", \"cde\", 99) == true\nJs.String2.endsWithFrom(\"example.dat\", \"ple\", 7) == true\n```\n*)\n\nexternal includes : t -> t -> bool = \"includes\"\n  [@@bs.send]\n(**\nES2015: `includes(str, searchValue)` returns `true` if `searchValue` is found\nanywhere within `str`, false otherwise.\n\nSee [`String.includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes)\non MDN.\n\n```res example\nJs.String2.includes(\"programmer\", \"gram\") == true\nJs.String2.includes(\"programmer\", \"er\") == true\nJs.String2.includes(\"programmer\", \"pro\") == true\nJs.String2.includes(\"programmer.dat\", \"xyz\") == false\n```\n*)\n\nexternal includesFrom : t -> t -> int -> bool = \"includes\"\n  [@@bs.send]\n(**\nES2015: `includes(str, searchValue start)` returns `true` if `searchValue` is\nfound anywhere within `str` starting at character number `start` (where 0 is\nthe first character), `false` otherwise.\n\nSee [`String.includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes)\non MDN.\n\n```res example\nJs.String2.includesFrom(\"programmer\", \"gram\", 1) == true\nJs.String2.includesFrom(\"programmer\", \"gram\", 4) == false\nJs.String2.includesFrom(`ëŒ€í•œë¯¼êµ­`, `í•œ`, 1) == true\n```\n*)\n\nexternal indexOf : t -> t -> int = \"indexOf\"\n  [@@bs.send]\n(**\nES2015: `indexOf(str, searchValue)` returns the position at which `searchValue`\nwas first found within `str`, or -1 if `searchValue` is not in `str`.\n\nSee [`String.indexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf)\non MDN.\n\n```res example\nJs.String2.indexOf(\"bookseller\", \"ok\") == 2\nJs.String2.indexOf(\"bookseller\", \"sell\") == 4\nJs.String2.indexOf(\"beekeeper\", \"ee\") == 1\nJs.String2.indexOf(\"bookseller\", \"xyz\") == -1\n```\n*)\n\nexternal indexOfFrom : t -> t -> int -> int = \"indexOf\"\n  [@@bs.send]\n(**\n`indexOfFrom(str, searchValue, start)` returns the position at which\n`searchValue` was found within `str` starting at character position `start`, or\n-1 if `searchValue` is not found in that portion of `str`. The return value is\nrelative to the beginning of the string, no matter where the search started\nfrom.\n\nSee [`String.indexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf)\non MDN.\n\n```res example\nJs.String2.indexOfFrom(\"bookseller\", \"ok\", 1) == 2\nJs.String2.indexOfFrom(\"bookseller\", \"sell\", 2) == 4\nJs.String2.indexOfFrom(\"bookseller\", \"sell\", 5) == -1\n```\n*)\n\nexternal lastIndexOf : t -> t -> int = \"lastIndexOf\"\n  [@@bs.send]\n(**\n`lastIndexOf(str, searchValue)` returns the position of the last occurrence of\n`searchValue` within `str`, searching backwards from the end of the string.\nReturns -1 if `searchValue` is not in `str`. The return value is always\nrelative to the beginning of the string.\n\nSee [`String.lastIndexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf)\non MDN.\n\n```res example\nJs.String2.lastIndexOf(\"bookseller\", \"ok\") == 2\nJs.String2.lastIndexOf(\"beekeeper\", \"ee\") == 4\nJs.String2.lastIndexOf(\"abcdefg\", \"xyz\") == -1\n```\n*)\n\nexternal lastIndexOfFrom : t -> t -> int -> int = \"lastIndexOf\"\n  [@@bs.send]\n(**\n`lastIndexOfFrom(str, searchValue, start)` returns the position of the last\noccurrence of `searchValue` within `str`, searching backwards from the given\nstart position. Returns -1 if `searchValue` is not in `str`. The return value\nis always relative to the beginning of the string.\n\nSee [`String.lastIndexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf)\non MDN.\n\n```res example\nJs.String2.lastIndexOfFrom(\"bookseller\", \"ok\", 6) == 2\nJs.String2.lastIndexOfFrom(\"beekeeper\", \"ee\", 8) == 4\nJs.String2.lastIndexOfFrom(\"beekeeper\", \"ee\", 3) == 1\nJs.String2.lastIndexOfFrom(\"abcdefg\", \"xyz\", 4) == -1\n```\n*)\n\n(* extended by ECMA-402 *)\n\nexternal localeCompare : t -> t -> float = \"localeCompare\"\n  [@@bs.send]\n(**\n`localeCompare(reference, comparison)` returns\n- a negative value if reference comes before comparison in sort order\n- zero if reference and comparison have the same sort order\n- a positive value if reference comes after comparison in sort order\n\nSee [`String.localeCompare`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare) on MDN.\n\n```res example\nJs.String2.localeCompare(\"zebra\", \"ant\") > 0.0\nJs.String2.localeCompare(\"ant\", \"zebra\") < 0.0\nJs.String2.localeCompare(\"cat\", \"cat\") == 0.0\nJs.String2.localeCompare(\"CAT\", \"cat\") > 0.0\n```\n*)\n\nexternal match_ : t -> Js_re.t -> t option array option = \"match\"\n  [@@bs.send] [@@bs.return { null_to_opt }]\n(**\n`match(str, regexp)` matches a `string` against the given `regexp`. If there is\nno match, it returns `None`. For regular expressions without the g modifier, if\n  there is a match, the return value is `Some(array)` where the array contains:\n- The entire matched string\n- Any capture groups if the regexp had parentheses\nFor regular expressions with the g modifier, a matched expression returns\n`Some(array)` with all the matched substrings and no capture groups.\n\nSee [`String.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\non MDN.\n\n```res example\nJs.String2.match_(\"The better bats\", %re(\"/b[aeiou]t/\")) == Some([\"bet\"])\nJs.String2.match_(\"The better bats\", %re(\"/b[aeiou]t/g\")) == Some([\"bet\", \"bat\"])\nJs.String2.match_(\"Today is 2018-04-05.\", %re(\"/(\\d+)-(\\d+)-(\\d+)/\")) ==\n  Some([\"2018-04-05\", \"2018\", \"04\", \"05\"])\nJs.String2.match_(\"The large container.\", %re(\"/b[aeiou]g/\")) == None\n```\n*)\n\nexternal normalize : t -> t = \"normalize\"\n  [@@bs.send]\n(**\n`normalize(str)` returns the normalized Unicode string using Normalization Form\nCanonical (NFC) Composition. Consider the character Ã£, which can be represented\nas the single codepoint \\u00e3 or the combination of a lower case letter A\n\\u0061 and a combining tilde \\u0303. Normalization ensures that both can be\nstored in an equivalent binary representation.\n\nSee [`String.normalize`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)\non MDN. See also [Unicode technical report\n#15](https://unicode.org/reports/tr15/) for details.\n*)\n\nexternal normalizeByForm : t -> t -> t = \"normalize\"\n  [@@bs.send]\n(**\nES2015: `normalize(str, form)` returns the normalized Unicode string using the\nspecified form of normalization, which may be one of:\n- \"NFC\" â€” Normalization Form Canonical Composition.\n- \"NFD\" â€” Normalization Form Canonical Decomposition.\n- \"NFKC\" â€” Normalization Form Compatibility Composition.\n- \"NFKD\" â€” Normalization Form Compatibility Decomposition.\n\nSee [`String.normalize`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize) on MDN.\nSee also [Unicode technical report #15](https://unicode.org/reports/tr15/) for details.\n*)\n\nexternal repeat : t -> int -> t = \"repeat\"\n  [@@bs.send]\n(**\n`repeat(str, n)` returns a `string` that consists of `n` repetitions of `str`.\nRaises `RangeError` if `n` is negative.\n\nSee [`String.repeat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat)\non MDN.\n\n```res example\nJs.String2.repeat(\"ha\", 3) == \"hahaha\"\nJs.String2.repeat(\"empty\", 0) == \"\"\n```\n*)\n\nexternal replace : t -> t -> t -> t = \"replace\"\n  [@@bs.send]\n(**\nES2015: `replace(str, substr, newSubstr)` returns a new `string` which is\nidentical to `str` except with the first matching instance of `substr` replaced\nby `newSubstr`. `substr` is treated as a verbatim string to match, not a\nregular expression.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nJs.String2.replace(\"old string\", \"old\", \"new\") == \"new string\"\nJs.String2.replace(\"the cat and the dog\", \"the\", \"this\") == \"this cat and the dog\"\n```\n*)\n\nexternal replaceByRe : t -> Js_re.t -> t -> t = \"replace\"\n  [@@bs.send]\n(**\n`replaceByRe(str, regex, replacement)` returns a new `string` where occurrences\nmatching regex have been replaced by `replacement`.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nJs.String2.replaceByRe(\"vowels be gone\", %re(\"/[aeiou]/g\"), \"x\") == \"vxwxls bx gxnx\"\nJs.String2.replaceByRe(\"Juan Fulano\", %re(\"/(\\w+) (\\w+)/\"), \"$2, $1\") == \"Fulano, Juan\"\n```\n*)\n\nexternal unsafeReplaceBy0 :\n  t -> Js_re.t -> ((t -> int -> t -> t)[@bs.uncurry]) -> t = \"replace\"\n  [@@bs.send]\n(**\nReturns a new `string` with some or all matches of a pattern with no capturing\nparentheses replaced by the value returned from the given function. The\nfunction receives as its parameters the matched string, the offset at which the\nmatch begins, and the whole string being matched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nlet str = \"beautiful vowels\"\nlet re = %re(\"/[aeiou]/g\")\nlet matchFn = (matchPart, _offset, _wholeString) => Js.String2.toUpperCase(matchPart)\n\nJs.String2.unsafeReplaceBy0(str, re, matchFn) == \"bEAUtIfUl vOwEls\"\n```\n*)\n\nexternal unsafeReplaceBy1 :\n  t -> Js_re.t -> ((t -> t -> int -> t -> t)[@bs.uncurry]) -> t = \"replace\"\n  [@@bs.send]\n(**\nReturns a new `string` with some or all matches of a pattern with one set of\ncapturing parentheses replaced by the value returned from the given function.\nThe function receives as its parameters the matched string, the captured\nstring, the offset at which the match begins, and the whole string being\nmatched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nlet str = \"Jony is 40\"\nlet re = %re(\"/(Jony is )\\d+/g\")\nlet matchFn = (_match, part1, _offset, _wholeString) => {\n  part1 ++ \"41\"\n}\n\nJs.String2.unsafeReplaceBy1(str, re, matchFn) == \"Jony is 41\"\n```\n*)\n\nexternal unsafeReplaceBy2 :\n  t -> Js_re.t -> ((t -> t -> t -> int -> t -> t)[@bs.uncurry]) -> t = \"replace\"\n  [@@bs.send]\n(**\nReturns a new `string` with some or all matches of a pattern with two sets of\ncapturing parentheses replaced by the value returned from the given function.\nThe function receives as its parameters the matched string, the captured\nstrings, the offset at which the match begins, and the whole string being\nmatched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nlet str = \"7 times 6\"\nlet re = %re(\"/(\\d+) times (\\d+)/\")\nlet matchFn = (_match, p1, p2, _offset, _wholeString) => {\n  switch (Belt.Int.fromString(p1), Belt.Int.fromString(p2)) {\n  | (Some(x), Some(y)) => Belt.Int.toString(x * y)\n  | _ => \"???\"\n  }\n}\n\nJs.String2.unsafeReplaceBy2(str, re, matchFn) == \"42\"\n```\n*)\n\nexternal unsafeReplaceBy3 :\n  t -> Js_re.t -> ((t -> t -> t -> t -> int -> t -> t)[@bs.uncurry]) -> t\n  = \"replace\"\n  [@@bs.send]\n(**\nReturns a new `string` with some or all matches of a pattern with three sets of\ncapturing parentheses replaced by the value returned from the given function.\nThe function receives as its parameters the matched string, the captured\nstrings, the offset at which the match begins, and the whole string being\nmatched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n*)\n\nexternal search : t -> Js_re.t -> int = \"search\"\n  [@@bs.send]\n(**\n`search(str, regexp)` returns the starting position of the first match of\n`regexp` in the given `str`, or -1 if there is no match.\n\nSee [`String.search`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search)\non MDN.\n\n```res example\nJs.String2.search(\"testing 1 2 3\", %re(\"/\\d+/\")) == 8\nJs.String2.search(\"no numbers\", %re(\"/\\d+/\")) == -1\n```\n*)\n\nexternal slice : t -> from:int -> to_:int -> t = \"slice\"\n  [@@bs.send]\n(**\n`slice(str, from:n1, to_:n2)` returns the substring of `str` starting at\ncharacter `n1` up to but not including `n2`.\n- If either `n1` or `n2` is negative, then it is evaluated as `length(str - n1)` or `length(str - n2)`.\n- If `n2` is greater than the length of `str`, then it is treated as `length(str)`.\n- If `n1` is greater than `n2`, slice returns the empty string.\n\nSee [`String.slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) on MDN.\n\n```res example\nJs.String2.slice(\"abcdefg\", ~from=2, ~to_=5) == \"cde\"\nJs.String2.slice(\"abcdefg\", ~from=2, ~to_=9) == \"cdefg\"\nJs.String2.slice(\"abcdefg\", ~from=-4, ~to_=-2) == \"de\"\nJs.String2.slice(\"abcdefg\", ~from=5, ~to_=1) == \"\"\n```\n*)\n\nexternal sliceToEnd : t -> from:int -> t = \"slice\"\n  [@@bs.send]\n(**\n`sliceToEnd(str, from:n)` returns the substring of `str` starting at character\n`n` to the end of the string.\n- If `n` is negative, then it is evaluated as `length(str - n)`.\n- If `n` is greater than the length of `str`, then sliceToEnd returns the empty string.\n\nSee [`String.slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) on MDN.\n\n```res example\nJs.String2.sliceToEnd(\"abcdefg\", ~from=4) == \"efg\"\nJs.String2.sliceToEnd(\"abcdefg\", ~from=-2) == \"fg\"\nJs.String2.sliceToEnd(\"abcdefg\", ~from=7) == \"\"\n```\n*)\n\nexternal split : t -> t -> t array = \"split\"\n  [@@bs.send]\n(**\n`split(str, delimiter)` splits the given `str` at every occurrence of\n`delimiter` and returns an array of the resulting substrings.\n\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\non MDN.\n\n```res example\nJs.String2.split(\"2018-01-02\", \"-\") == [\"2018\", \"01\", \"02\"]\nJs.String2.split(\"a,b,,c\", \",\") == [\"a\", \"b\", \"\", \"c\"]\nJs.String2.split(\"good::bad as great::awful\", \"::\") == [\"good\", \"bad as great\", \"awful\"]\nJs.String2.split(\"has-no-delimiter\", \";\") == [\"has-no-delimiter\"]\n```\n*)\n\nexternal splitAtMost : t -> t -> limit:int -> t array = \"split\"\n  [@@bs.send]\n(**\n  `splitAtMost delimiter ~limit: n str` splits the given `str` at every occurrence of `delimiter` and returns an array of the first `n` resulting substrings. If `n` is negative or greater than the number of substrings, the array will contain all the substrings.\n\n```\nsplitAtMost \"ant/bee/cat/dog/elk\" \"/\" ~limit: 3 = [|\"ant\"; \"bee\"; \"cat\"|];;\nsplitAtMost \"ant/bee/cat/dog/elk\" \"/\" ~limit: 0 = [| |];;\nsplitAtMost \"ant/bee/cat/dog/elk\" \"/\" ~limit: 9 = [|\"ant\"; \"bee\"; \"cat\"; \"dog\"; \"elk\"|];;\n```\n*)\n\nexternal splitByRe : t -> Js_re.t -> t option array = \"split\"\n  [@@bs.send]\n(**\n`splitByRe(str, regex)` splits the given `str` at every occurrence of `regex`\nand returns an array of the resulting substrings.\n\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\non MDN.\n\n```res example\nJs.String2.splitByRe(\"art; bed , cog ;dad\", %re(\"/\\s*[,;]\\s*/\")) == [\n    Some(\"art\"),\n    Some(\"bed\"),\n    Some(\"cog\"),\n    Some(\"dad\"),\n  ]\n```\n*)\n\nexternal splitByReAtMost : t -> Js_re.t -> limit:int -> t option array = \"split\"\n  [@@bs.send]\n(**\n`splitByReAtMost(str, regex, ~limit:n)` splits the given `str` at every\noccurrence of `regex` and returns an array of the first `n` resulting\nsubstrings. If `n` is negative or greater than the number of substrings, the\narray will contain all the substrings.\n\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\non MDN.\n\n```res example\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=3) == [\n    Some(\"one\"),\n    Some(\"two\"),\n    Some(\"three\"),\n  ]\n\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=0) == []\n\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=8) == [\n    Some(\"one\"),\n    Some(\"two\"),\n    Some(\"three\"),\n    Some(\"four\"),\n  ]\n```\n*)\n\nexternal startsWith : t -> t -> bool = \"startsWith\"\n  [@@bs.send]\n(**\nES2015: `startsWith(str, substr)` returns `true` if the `str` starts with\n`substr`, `false` otherwise.\n\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\non MDN.\n\n```res example\nJs.String2.startsWith(\"BuckleScript\", \"Buckle\") == true\nJs.String2.startsWith(\"BuckleScript\", \"\") == true\nJs.String2.startsWith(\"JavaScript\", \"Buckle\") == false\n```\n*)\n\nexternal startsWithFrom : t -> t -> int -> bool = \"startsWith\"\n  [@@bs.send]\n(**\nES2015: `startsWithFrom(str, substr, n)` returns `true` if the `str` starts\nwith `substr` starting at position `n`, false otherwise. If `n` is negative,\nthe search starts at the beginning of `str`.\n\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\non MDN.\n\n```res example\nJs.String2.startsWithFrom(\"BuckleScript\", \"kle\", 3) == true\nJs.String2.startsWithFrom(\"BuckleScript\", \"\", 3) == true\nJs.String2.startsWithFrom(\"JavaScript\", \"Buckle\", 2) == false\n```\n*)\n\nexternal substr : t -> from:int -> t = \"substr\"\n  [@@bs.send]\n(**\n`substr(str, ~from:n)` returns the substring of `str` from position `n` to the\nend of the string.\n- If `n` is less than zero, the starting position is the length of `str - n`.\n- If `n` is greater than or equal to the length of `str`, returns the empty string.\n\nJavaScriptâ€™s `String.substr()` is a legacy function. When possible, use\n`substring()` instead.\n\nSee [`String.substr`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr)\non MDN.\n\n```res example\nJs.String2.substr(\"abcdefghij\", ~from=3) == \"defghij\"\nJs.String2.substr(\"abcdefghij\", ~from=-3) == \"hij\"\nJs.String2.substr(\"abcdefghij\", ~from=12) == \"\"\n```\n*)\n\nexternal substrAtMost : t -> from:int -> length:int -> t = \"substr\"\n  [@@bs.send]\n(**\n`substrAtMost(str, ~from: pos, ~length: n)` returns the substring of `str` of\nlength `n` starting at position `pos`.\n- If `pos` is less than zero, the starting position is the length of `str - pos`.\n- If `pos` is greater than or equal to the length of `str`, returns the empty string.\n- If `n` is less than or equal to zero, returns the empty string.\n\nJavaScriptâ€™s `String.substr()` is a legacy function. When possible, use\n`substring()` instead.\n\nSee [`String.substr`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr)\non MDN.\n\n```res example\nJs.String2.substrAtMost(\"abcdefghij\", ~from=3, ~length=4) == \"defg\"\nJs.String2.substrAtMost(\"abcdefghij\", ~from=-3, ~length=4) == \"hij\"\nJs.String2.substrAtMost(\"abcdefghij\", ~from=12, ~length=2) == \"\"\n```\n*)\n\nexternal substring : t -> from:int -> to_:int -> t = \"substring\"\n  [@@bs.send]\n(**\n`substring(str, ~from: start, ~to_: finish)` returns characters `start` up to\nbut not including finish from `str`.\n- If `start` is less than zero, it is treated as zero.\n- If `finish` is zero or negative, the empty string is returned.\n- If `start` is greater than `finish`, the `start` and `finish` points are swapped.\n\nSee [`String.substring`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring) on MDN.\n\n```res example\nJs.String2.substring(\"playground\", ~from=3, ~to_=6) == \"ygr\"\nJs.String2.substring(\"playground\", ~from=6, ~to_=3) == \"ygr\"\nJs.String2.substring(\"playground\", ~from=4, ~to_=12) == \"ground\"\n```\n*)\n\nexternal substringToEnd : t -> from:int -> t = \"substring\"\n  [@@bs.send]\n(**\n`substringToEnd(str, ~from: start)` returns the substring of `str` from\nposition `start` to the end.\n- If `start` is less than or equal to zero, the entire string is returned.\n- If `start` is greater than or equal to the length of `str`, the empty string is returned.\n\nSee [`String.substring`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring) on MDN.\n\n```res example\nJs.String2.substringToEnd(\"playground\", ~from=4) == \"ground\"\nJs.String2.substringToEnd(\"playground\", ~from=-3) == \"playground\"\nJs.String2.substringToEnd(\"playground\", ~from=12) == \"\"\n```\n*)\n\nexternal toLowerCase : t -> t = \"toLowerCase\"\n  [@@bs.send]\n(**\n`toLowerCase(str)` converts `str` to lower case using the locale-insensitive\ncase mappings in the Unicode Character Database. Notice that the conversion can\ngive different results depending upon context, for example with the Greek\nletter sigma, which has two different lower case forms; one when it is the last\ncharacter in a string and another when it is not.\n\nSee [`String.toLowerCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase)\non MDN.\n\n```res example\nJs.String2.toLowerCase(\"ABC\") == \"abc\"\nJs.String2.toLowerCase(`Î£Î `) == `ÏƒÏ€`\nJs.String2.toLowerCase(`Î Î£`) == `Ï€Ï‚`\n```\n*)\n\nexternal toLocaleLowerCase : t -> t = \"toLocaleLowerCase\"\n  [@@bs.send]\n(**\n`toLocaleLowerCase(str)` converts `str` to lower case using the current locale.\nSee [`String.toLocaleLowerCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase)\non MDN.\n*)\n\nexternal toUpperCase : t -> t = \"toUpperCase\"\n  [@@bs.send]\n(**\n`toUpperCase(str)` converts `str` to upper case using the locale-insensitive\ncase mappings in the Unicode Character Database. Notice that the conversion can\nexpand the number of letters in the result; for example the German ÃŸ\ncapitalizes to two Ses in a row.\n\nSee [`String.toUpperCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase)\non MDN.\n\n```res example\nJs.String2.toUpperCase(\"abc\") == \"ABC\"\nJs.String2.toUpperCase(`StraÃŸe`) == `STRASSE`\nJs.String2.toUpperCase(`Ï€Ï‚`) == `Î Î£`\n```\n*)\n\nexternal toLocaleUpperCase : t -> t = \"toLocaleUpperCase\"\n  [@@bs.send]\n(**\n`toLocaleUpperCase(str)` converts `str` to upper case using the current locale.\nSee [`String.to:LocaleUpperCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase)\non MDN.\n*)\n\nexternal trim : t -> t = \"trim\"\n  [@@bs.send]\n(**\n`trim(str)` returns a string that is `str` with whitespace stripped from both\nends. Internal whitespace is not removed.\n\nSee [`String.trim`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim)\non MDN.\n\n```res example\nJs.String2.trim(\"   abc def   \") == \"abc def\"\nJs.String2.trim(\"\\n\\r\\t abc def \\n\\n\\t\\r \") == \"abc def\"\n```\n*)\n\n(* HTML wrappers *)\n\nexternal anchor : t -> t -> t = \"anchor\"\n  [@@bs.send]\n(**\n`anchor(anchorText, anchorName)` creates a string with an HTML `<a>` element\nwith name attribute of `anchorName` and `anchorText` as its content. Please do\nnot use this method, as it has been removed from the relevant web standards.\n\nSee [`String.anchor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/anchor)\non MDN.\n\n```res example\nJs.String2.anchor(\"Page One\", \"page1\") == \"<a name=\\\"page1\\\">Page One</a>\"\n```\n*)\n\nexternal link : t -> t -> t = \"link\"\n  [@@bs.send]\n(**\nES2015: `link(linkText, urlText)` creates a string with an HTML `<a>` element\nwith href attribute of `urlText` and `linkText` as its content. Please do not\nuse this method, as it has been removed from the relevant web standards. See\n[`String.link`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/link)\non MDN.\n\n```res example\nJs.String2.link(\"Go to page two\", \"page2.html\") == \"<a href=\\\"page2.html\\\">Go to page two</a>\"\n```\n*)\n\n(* FIXME: we should not encourage people to use [%identity], better\n    to provide something using [@@bs.val] so that we can track such\n    casting\n*)\nexternal castToArrayLike : t -> t Js_array2.array_like = \"%identity\"\n(**\nCasts its argument to an `array_like` entity that can be processed by functions\nsuch as `Js.Array2.fromMap()`\n\n```res example\nlet s = \"abcde\"\nlet arr = Js.Array2.fromMap(Js.String2.castToArrayLike(s), x => x)\narr == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n```\n*)\n"}}}
bs-platform could not be found
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/js_string2.ml"}}}
bs-platform could not be found
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/pervasives.mli","languageId":"ocaml","version":1,"text":"(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(** The initially opened module.\n\n   This module provides the basic operations over the built-in types\n   (numbers, booleans, byte sequences, strings, exceptions, references,\n   lists, arrays, input-output channels, ...).\n\n   This module is automatically opened at the beginning of each compilation.\n   All components of this module can therefore be referred by their short\n   name, without prefixing them by [Pervasives].\n*)\n\n\n(* Internal *)\nexternal __unsafe_cast : 'a -> 'b = \"%identity\"\n\n(** {1 Exceptions} *)\n\nexternal raise : exn -> 'a = \"%raise\"\n(** Raise the given exception value *)\n\nexternal raise_notrace : exn -> 'a = \"%raise_notrace\"\n(** A faster version [raise] which does not record the backtrace.\n    @since 4.02.0\n*)\n\nval invalid_arg : string -> 'a\n(** Raise exception [Invalid_argument] with the given string. *)\n\nval failwith : string -> 'a\n(** Raise exception [Failure] with the given string. *)\n\nexception Exit\n(** The [Exit] exception is not raised by any library function.  It is\n    provided for use in your programs. *)\n\n\n(** {1 Comparisons} *)\n\nexternal ( = ) : 'a -> 'a -> bool = \"%equal\"\n(** [e1 = e2] tests for structural equality of [e1] and [e2].\n   Mutable structures (e.g. references and arrays) are equal\n   if and only if their current contents are structurally equal,\n   even if the two mutable objects are not the same physical object.\n   Equality between functional values raises [Invalid_argument].\n   Equality between cyclic data structures may not terminate.\n   Left-associative operator at precedence level 4/11. *)\n\nexternal ( <> ) : 'a -> 'a -> bool = \"%notequal\"\n(** Negation of {!Pervasives.( = )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( < ) : 'a -> 'a -> bool = \"%lessthan\"\n(** See {!Pervasives.( >= )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( > ) : 'a -> 'a -> bool = \"%greaterthan\"\n(** See {!Pervasives.( >= )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( <= ) : 'a -> 'a -> bool = \"%lessequal\"\n(** See {!Pervasives.( >= )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( >= ) : 'a -> 'a -> bool = \"%greaterequal\"\n(** Structural ordering functions. These functions coincide with\n   the usual orderings over integers, characters, strings, byte sequences\n   and floating-point numbers, and extend them to a\n   total ordering over all types.\n   The ordering is compatible with [( = )]. As in the case\n   of [( = )], mutable structures are compared by contents.\n   Comparison between functional values raises [Invalid_argument].\n   Comparison between cyclic structures may not terminate.\n   Left-associative operator at precedence level 4/11. *)\n\nexternal compare : 'a -> 'a -> int = \"%compare\"\n(** [compare x y] returns [0] if [x] is equal to [y],\n   a negative integer if [x] is less than [y], and a positive integer\n   if [x] is greater than [y].  The ordering implemented by [compare]\n   is compatible with the comparison predicates [=], [<] and [>]\n   defined above,  with one difference on the treatment of the float value\n   {!Pervasives.nan}.  Namely, the comparison predicates treat [nan]\n   as different from any other float value, including itself;\n   while [compare] treats [nan] as equal to itself and less than any\n   other float value.  This treatment of [nan] ensures that [compare]\n   defines a total ordering relation.\n\n   [compare] applied to functional values may raise [Invalid_argument].\n   [compare] applied to cyclic structures may not terminate.\n\n   The [compare] function can be used as the comparison function\n   required by the {!Set.Make} and {!Map.Make} functors, as well as\n   the {!List.sort} and {!Array.sort} functions. *)\n\nexternal min : 'a -> 'a -> 'a = \"%bs_min\"\n(** Return the smaller of the two arguments.\n    The result is unspecified if one of the arguments contains\n    the float value [nan]. *)\n\nexternal max : 'a -> 'a -> 'a = \"%bs_max\"\n(** Return the greater of the two arguments.\n    The result is unspecified if one of the arguments contains\n    the float value [nan]. *)\n\nexternal ( == ) : 'a -> 'a -> bool = \"%eq\"\n(** [e1 == e2] tests for physical equality of [e1] and [e2].\n   On mutable types such as references, arrays, byte sequences, records with\n   mutable fields and objects with mutable instance variables,\n   [e1 == e2] is true if and only if physical modification of [e1]\n   also affects [e2].\n   On non-mutable types, the behavior of [( == )] is\n   implementation-dependent; however, it is guaranteed that\n   [e1 == e2] implies [compare e1 e2 = 0].\n   Left-associative operator at precedence level 4/11. *)\n\nexternal ( != ) : 'a -> 'a -> bool = \"%noteq\"\n(** Negation of {!Pervasives.( == )}.\n    Left-associative operator at precedence level 4/11. *)\n\n\n(** {1 Boolean operations} *)\n\nexternal not : bool -> bool = \"%boolnot\"\n(** The boolean negation. *)\n\nexternal ( && ) : bool -> bool -> bool = \"%sequand\"\n(** The boolean 'and'. Evaluation is sequential, left-to-right:\n   in [e1 && e2], [e1] is evaluated first, and if it returns [false],\n   [e2] is not evaluated at all.\n   Right-associative operator at precedence level 3/11. *)\n\n\nexternal ( || ) : bool -> bool -> bool = \"%sequor\"\n(** The boolean 'or'. Evaluation is sequential, left-to-right:\n   in [e1 || e2], [e1] is evaluated first, and if it returns [true],\n   [e2] is not evaluated at all.\n   Right-associative operator at precedence level 2/11.\n*)\n\n\n(** {1 Debugging} *)\n\nexternal __LOC__ : string = \"%loc_LOC\"\n(** [__LOC__] returns the location at which this expression appears in\n    the file currently being parsed by the compiler, with the standard\n    error format of OCaml: \"File %S, line %d, characters %d-%d\".\n    @since 4.02.0\n*)\n\nexternal __FILE__ : string = \"%loc_FILE\"\n(** [__FILE__] returns the name of the file currently being\n    parsed by the compiler.\n    @since 4.02.0\n*)\n\nexternal __LINE__ : int = \"%loc_LINE\"\n(** [__LINE__] returns the line number at which this expression\n    appears in the file currently being parsed by the compiler.\n    @since 4.02.0\n*)\n\nexternal __MODULE__ : string = \"%loc_MODULE\"\n(** [__MODULE__] returns the module name of the file being\n    parsed by the compiler.\n    @since 4.02.0\n*)\n\nexternal __POS__ : string * int * int * int = \"%loc_POS\"\n(** [__POS__] returns a tuple [(file,lnum,cnum,enum)], corresponding\n    to the location at which this expression appears in the file\n    currently being parsed by the compiler. [file] is the current\n    filename, [lnum] the line number, [cnum] the character position in\n    the line and [enum] the last character position in the line.\n    @since 4.02.0\n *)\n\nexternal __LOC_OF__ : 'a -> string * 'a = \"%loc_LOC\"\n(** [__LOC_OF__ expr] returns a pair [(loc, expr)] where [loc] is the\n    location of [expr] in the file currently being parsed by the\n    compiler, with the standard error format of OCaml: \"File %S, line\n    %d, characters %d-%d\".\n    @since 4.02.0\n*)\n\nexternal __LINE_OF__ : 'a -> int * 'a = \"%loc_LINE\"\n(** [__LINE__ expr] returns a pair [(line, expr)], where [line] is the\n    line number at which the expression [expr] appears in the file\n    currently being parsed by the compiler.\n    @since 4.02.0\n *)\n\nexternal __POS_OF__ : 'a -> (string * int * int * int) * 'a = \"%loc_POS\"\n(** [__POS_OF__ expr] returns a pair [(loc,expr)], where [loc] is a\n    tuple [(file,lnum,cnum,enum)] corresponding to the location at\n    which the expression [expr] appears in the file currently being\n    parsed by the compiler. [file] is the current filename, [lnum] the\n    line number, [cnum] the character position in the line and [enum]\n    the last character position in the line.\n    @since 4.02.0\n *)\n\n(** {1 Composition operators} *)\n\nexternal ( |> ) : 'a -> ('a -> 'b) -> 'b = \"%revapply\"\n(** Reverse-application operator: [x |> f |> g] is exactly equivalent\n to [g (f (x))].\n Left-associative operator at precedence level 4/11.\n   @since 4.01\n *)\n\nexternal ( @@ ) : ('a -> 'b) -> 'a -> 'b = \"%apply\"\n(** Application operator: [g @@ f @@ x] is exactly equivalent to\n [g (f (x))].\n Right-associative operator at precedence level 5/11.\n   @since 4.01\n*)\n\n(** {1 Integer arithmetic} *)\n\n(** Integers are 31 bits wide (or 63 bits on 64-bit processors).\n   All operations are taken modulo 2{^31} (or 2{^63}).\n   They do not fail on overflow. *)\n\nexternal ( ~- ) : int -> int = \"%negint\"\n(** Unary negation. You can also write [- e] instead of [~- e].\n    Unary operator at precedence level 9/11 for [- e]\n    and 11/11 for [~- e]. *)\n\nexternal ( ~+ ) : int -> int = \"%identity\"\n(** Unary addition. You can also write [+ e] instead of [~+ e].\n    Unary operator at precedence level 9/11 for [+ e]\n    and 11/11 for [~+ e].\n    @since 3.12.0\n*)\n\nexternal succ : int -> int = \"%succint\"\n(** [succ x] is [x + 1]. *)\n\nexternal pred : int -> int = \"%predint\"\n(** [pred x] is [x - 1]. *)\n\nexternal ( + ) : int -> int -> int = \"%addint\"\n(** Integer addition.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( - ) : int -> int -> int = \"%subint\"\n(** Integer subtraction.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( * ) : int -> int -> int = \"%mulint\"\n(** Integer multiplication.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( / ) : int -> int -> int = \"%divint\"\n(** Integer division.\n   Raise [Division_by_zero] if the second argument is 0.\n   Integer division rounds the real quotient of its arguments towards zero.\n   More precisely, if [x >= 0] and [y > 0], [x / y] is the greatest integer\n   less than or equal to the real quotient of [x] by [y].  Moreover,\n   [(- x) / y = x / (- y) = - (x / y)].\n   Left-associative operator at precedence level 7/11. *)\n\nexternal ( mod ) : int -> int -> int = \"%modint\"\n(** Integer remainder.  If [y] is not zero, the result\n   of [x mod y] satisfies the following properties:\n   [x = (x / y) * y + x mod y] and\n   [abs(x mod y) <= abs(y) - 1].\n   If [y = 0], [x mod y] raises [Division_by_zero].\n   Note that [x mod y] is negative only if [x < 0].\n   Raise [Division_by_zero] if [y] is zero.\n   Left-associative operator at precedence level 7/11. *)\n\nval abs : int -> int\n(** Return the absolute value of the argument.  Note that this may be\n  negative if the argument is [min_int]. *)\n\nval max_int : int\n(** The greatest representable integer. *)\n\nval min_int : int\n(** The smallest representable integer. *)\n\n\n(** {2 Bitwise operations} *)\n\nexternal ( land ) : int -> int -> int = \"%andint\"\n(** Bitwise logical and.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( lor ) : int -> int -> int = \"%orint\"\n(** Bitwise logical or.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( lxor ) : int -> int -> int = \"%xorint\"\n(** Bitwise logical exclusive or.\n    Left-associative operator at precedence level 7/11. *)\n\nval lnot : int -> int\n(** Bitwise logical negation. *)\n\nexternal ( lsl ) : int -> int -> int = \"%lslint\"\n(** [n lsl m] shifts [n] to the left by [m] bits.\n   The result is unspecified if [m < 0] or [m >= bitsize],\n   where [bitsize] is [32] on a 32-bit platform and\n   [64] on a 64-bit platform.\n   Right-associative operator at precedence level 8/11. *)\n\nexternal ( lsr ) : int -> int -> int = \"%lsrint\"\n(** [n lsr m] shifts [n] to the right by [m] bits.\n   This is a logical shift: zeroes are inserted regardless of\n   the sign of [n].\n   The result is unspecified if [m < 0] or [m >= bitsize].\n   Right-associative operator at precedence level 8/11. *)\n\nexternal ( asr ) : int -> int -> int = \"%asrint\"\n(** [n asr m] shifts [n] to the right by [m] bits.\n   This is an arithmetic shift: the sign bit of [n] is replicated.\n   The result is unspecified if [m < 0] or [m >= bitsize].\n   Right-associative operator at precedence level 8/11. *)\n\n\n(** {1 Floating-point arithmetic}\n\n   OCaml's floating-point numbers follow the\n   IEEE 754 standard, using double precision (64 bits) numbers.\n   Floating-point operations never raise an exception on overflow,\n   underflow, division by zero, etc.  Instead, special IEEE numbers\n   are returned as appropriate, such as [infinity] for [1.0 /. 0.0],\n   [neg_infinity] for [-1.0 /. 0.0], and [nan] ('not a number')\n   for [0.0 /. 0.0].  These special numbers then propagate through\n   floating-point computations as expected: for instance,\n   [1.0 /. infinity] is [0.0], and any arithmetic operation with [nan]\n   as argument returns [nan] as result.\n*)\n\nexternal ( ~-. ) : float -> float = \"%negfloat\"\n(** Unary negation. You can also write [-. e] instead of [~-. e].\n    Unary operator at precedence level 9/11 for [-. e]\n    and 11/11 for [~-. e]. *)\n\nexternal ( ~+. ) : float -> float = \"%identity\"\n(** Unary addition. You can also write [+. e] instead of [~+. e].\n    Unary operator at precedence level 9/11 for [+. e]\n    and 11/11 for [~+. e].\n    @since 3.12.0\n*)\n\nexternal ( +. ) : float -> float -> float = \"%addfloat\"\n(** Floating-point addition.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( -. ) : float -> float -> float = \"%subfloat\"\n(** Floating-point subtraction.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( *. ) : float -> float -> float = \"%mulfloat\"\n(** Floating-point multiplication.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( /. ) : float -> float -> float = \"%divfloat\"\n(** Floating-point division.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( ** ) : float -> float -> float =  \"pow\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Exponentiation. *)\n\nexternal sqrt : float -> float =  \"sqrt\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Square root. *)\n\nexternal exp : float -> float =  \"exp\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Exponential. *)\n\nexternal log : float -> float =  \"log\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Natural logarithm. *)\n\nexternal log10 : float -> float =  \"log10\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Base 10 logarithm. *)\n\nexternal expm1 : float -> float = \"?expm1_float\" \n(** [expm1 x] computes [exp x -. 1.0], giving numerically-accurate results\n    even if [x] is close to [0.0].\n    @since 3.12.0\n*)\n\nexternal log1p : float -> float =  \"log1p\" [@@bs.val] [@@bs.scope \"Math\"]\n(** [log1p x] computes [log(1.0 +. x)] (natural logarithm),\n    giving numerically-accurate results even if [x] is close to [0.0].\n    @since 3.12.0\n*)\n\nexternal cos : float -> float =  \"cos\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Cosine.  Argument is in radians. *)\n\nexternal sin : float -> float =  \"sin\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Sine.  Argument is in radians. *)\n\nexternal tan : float -> float =  \"tan\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Tangent.  Argument is in radians. *)\n\nexternal acos : float -> float =  \"acos\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Arc cosine.  The argument must fall within the range [[-1.0, 1.0]].\n    Result is in radians and is between [0.0] and [pi]. *)\n\nexternal asin : float -> float =  \"asin\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Arc sine.  The argument must fall within the range [[-1.0, 1.0]].\n    Result is in radians and is between [-pi/2] and [pi/2]. *)\n\nexternal atan : float -> float =  \"atan\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Arc tangent.\n    Result is in radians and is between [-pi/2] and [pi/2]. *)\n\nexternal atan2 : float -> float -> float =  \"atan2\" [@@bs.val] [@@bs.scope \"Math\"]\n(** [atan2 y x] returns the arc tangent of [y /. x].  The signs of [x]\n    and [y] are used to determine the quadrant of the result.\n    Result is in radians and is between [-pi] and [pi]. *)\n\nexternal hypot : float -> float -> float\n               = \"?hypot_float\"\n(** [hypot x y] returns [sqrt(x *. x + y *. y)], that is, the length\n  of the hypotenuse of a right-angled triangle with sides of length\n  [x] and [y], or, equivalently, the distance of the point [(x,y)]\n  to origin.\n  @since 4.00.0  *)\n\nexternal cosh : float -> float =  \"cosh\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Hyperbolic cosine.  Argument is in radians. *)\n\nexternal sinh : float -> float =  \"sinh\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Hyperbolic sine.  Argument is in radians. *)\n\nexternal tanh : float -> float =  \"tanh\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Hyperbolic tangent.  Argument is in radians. *)\n\nexternal ceil : float -> float =  \"ceil\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Round above to an integer value.\n    [ceil f] returns the least integer value greater than or equal to [f].\n    The result is returned as a float. *)\n\nexternal floor : float -> float =  \"floor\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Round below to an integer value.\n    [floor f] returns the greatest integer value less than or\n    equal to [f].\n    The result is returned as a float. *)\n\nexternal abs_float : float -> float = \"abs\" [@@bs.val] [@@bs.scope \"Math\"]\n(** [abs_float f] returns the absolute value of [f]. *)\n\nexternal copysign : float -> float -> float\n                  = \"?copysign_float\" \n(** [copysign x y] returns a float whose absolute value is that of [x]\n  and whose sign is that of [y].  If [x] is [nan], returns [nan].\n  If [y] is [nan], returns either [x] or [-. x], but it is not\n  specified which.\n  @since 4.00.0  *)\n\nexternal mod_float : float -> float -> float = \"?fmod_float\" \n(** [mod_float a b] returns the remainder of [a] with respect to\n   [b].  The returned value is [a -. n *. b], where [n]\n   is the quotient [a /. b] rounded towards zero to an integer. *)\n\nexternal frexp : float -> float * int = \"?frexp_float\"\n(** [frexp f] returns the pair of the significant\n   and the exponent of [f].  When [f] is zero, the\n   significant [x] and the exponent [n] of [f] are equal to\n   zero.  When [f] is non-zero, they are defined by\n   [f = x *. 2 ** n] and [0.5 <= x < 1.0]. *)\n\n\nexternal ldexp : float -> int -> float =\n  \"?ldexp_float\" \n(** [ldexp x n] returns [x *. 2 ** n]. *)\n\nexternal modf : float -> float * float = \"?modf_float\"\n(** [modf f] returns the pair of the fractional and integral\n   part of [f]. *)\n\nexternal float : int -> float = \"%floatofint\"\n(** Same as {!Pervasives.float_of_int}. *)\n\nexternal float_of_int : int -> float = \"%floatofint\"\n(** Convert an integer to floating-point. *)\n\nexternal truncate : float -> int = \"%intoffloat\"\n(** Same as {!Pervasives.int_of_float}. *)\n\nexternal int_of_float : float -> int = \"%intoffloat\"\n(** Truncate the given floating-point number to an integer.\n   The result is unspecified if the argument is [nan] or falls outside the\n   range of representable integers. *)\n\nval infinity : float\n(** Positive infinity. *)\n\nval neg_infinity : float\n(** Negative infinity. *)\n\n\nexternal nan : float = \"NaN\" [@@bs.val]  [@@bs.scope \"Number\"]\n(* we could also use [0.  /. 0.] *)\n(** A special floating-point value denoting the result of an\n   undefined operation such as [0.0 /. 0.0].  Stands for\n   'not a number'.  Any floating-point operation with [nan] as\n   argument returns [nan] as result.  As for floating-point comparisons,\n   [=], [<], [<=], [>] and [>=] return [false] and [<>] returns [true]\n   if one or both of their arguments is [nan]. *)\n\nval max_float : float\n(** The largest positive finite value of type [float]. *)\n\nval min_float : float\n(** The smallest positive, non-zero, non-denormalized value of type [float]. *)\n\nval epsilon_float : float\n(** The difference between [1.0] and the smallest exactly representable\n    floating-point number greater than [1.0]. *)\n\n\ntype fpclass =\n    FP_normal           (** Normal number, none of the below *)\n  | FP_subnormal        (** Number very close to 0.0, has reduced precision *)\n  | FP_zero             (** Number is 0.0 or -0.0 *)\n  | FP_infinite         (** Number is positive or negative infinity *)\n  | FP_nan              (** Not a number: result of an undefined operation *)\n(** The five classes of floating-point numbers, as determined by\n   the {!Pervasives.classify_float} function. *)\n\nval classify_float : float -> fpclass\n(** Return the class of the given floating-point number:\n   normal, subnormal, zero, infinite, or not a number. *)\n\n\n(** {1 String operations}\n\n   More string operations are provided in module {!String}.\n*)\nexternal (^) : string -> string -> string = \"#string_append\"\n(** String concatenation.\n    Right-associative operator at precedence level 5/11. *)\n\n\n(** {1 Character operations}\n\n   More character operations are provided in module {!Char}.\n*)\n\nexternal int_of_char : char -> int = \"%identity\"\n(** Return the ASCII code of the argument. *)\n\nval char_of_int : int -> char\n(** Return the character with the given ASCII code.\n   Raise [Invalid_argument \"char_of_int\"] if the argument is\n   outside the range 0--255. *)\n\n\n(** {1 Unit operations} *)\n\nexternal ignore : 'a -> unit = \"%ignore\"\n(** Discard the value of its argument and return [()].\n   For instance, [ignore(f x)] discards the result of\n   the side-effecting function [f].  It is equivalent to\n   [f x; ()], except that the latter may generate a\n   compiler warning; writing [ignore(f x)] instead\n   avoids the warning. *)\n\n\n(** {1 String conversion functions} *)\n\nval string_of_bool : bool -> string\n(** Return the string representation of a boolean. As the returned values\n   may be shared, the user should not modify them directly.\n*)\n\nval bool_of_string : string -> bool\n(** Convert the given string to a boolean.\n   Raise [Invalid_argument \"bool_of_string\"] if the string is not\n   [\"true\"] or [\"false\"]. *)\n\nval bool_of_string_opt: string -> bool option\n(** Convert the given string to a boolean.\n    Return [None] if the string is not\n    [\"true\"] or [\"false\"].\n    @since 4.05\n*)\n\n\nexternal string_of_int : int -> string = \"String\" [@@bs.val]\n(** Return the string representation of an integer, in decimal. *)\n\nexternal int_of_string : string -> int = \"?int_of_string\"\n(** Convert the given string to an integer.\n   The string is read in decimal (by default, or if the string \n   begins with [0u]), in hexadecimal (if it begins with [0x] or\n   [0X]), in octal (if it begins with [0o] or [0O]), or in binary\n   (if it begins with [0b] or [0B]).\n\n   The [0u] prefix reads the input as an unsigned integer in the range\n   [[0, 2*max_int+1]].  If the input exceeds {!max_int}\n   it is converted to the signed integer\n   [min_int + input - max_int - 1].\n\n   The [_] (underscore) character can appear anywhere in the string\n   and is ignored.\n   Raise [Failure \"int_of_string\"] if the given string is not\n   a valid representation of an integer, or if the integer represented\n   exceeds the range of integers representable in type [int]. *)\n\n\nval int_of_string_opt: string -> int option\n(** Same as [int_of_string], but returns [None] instead of raising.\n    @since 4.05\n*)\n\nval string_of_float : float -> string\n[@@ocaml.deprecated \"Please use Js.Float.toString instead, string_of_float generates unparseable floats\"]\n(** Return the string representation of a floating-point number. *)\n\nexternal float_of_string : string -> float = \"?float_of_string\"\n(** Convert the given string to a float.  The string is read in decimal\n   (by default) or in hexadecimal (marked by [0x] or [0X]).\n   The format of decimal floating-point numbers is\n   [ [-] dd.ddd (e|E) [+|-] dd ], where [d] stands for a decimal digit.\n   The format of hexadecimal floating-point numbers is\n   [ [-] 0(x|X) hh.hhh (p|P) [+|-] dd ], where [h] stands for an\n   hexadecimal digit and [d] for a decimal digit.\n   In both cases, at least one of the integer and fractional parts must be\n   given; the exponent part is optional.\n   The [_] (underscore) character can appear anywhere in the string\n   and is ignored.\n   Depending on the execution platforms, other representations of\n   floating-point numbers can be accepted, but should not be relied upon.\n   Raise [Failure \"float_of_string\"] if the given string is not a valid\n   representation of a float. *)\n\nval float_of_string_opt: string -> float option\n(** Same as [float_of_string], but returns [None] instead of raising.\n    @since 4.05\n*)\n\n(** {1 Pair operations} *)\n\nexternal fst : 'a * 'b -> 'a = \"%field0\"\n(** Return the first component of a pair. *)\n\nexternal snd : 'a * 'b -> 'b = \"%field1\"\n(** Return the second component of a pair. *)\n\n\n(** {1 List operations}\n\n   More list operations are provided in module {!List}.\n*)\n\nval ( @ ) : 'a list -> 'a list -> 'a list\n[@@ocaml.deprecated \"Use Belt.List.append instead\"]    \n(** List concatenation.  Tail-recursive (length of the first argument).\n    Right-associative operator at precedence level 5/11. *)\n\n\ntype int32 = int\n\n\n\n\n\nval print_string : string -> unit\n(** Print a string on standard output. *)\n\n\nval print_int : int -> unit\n(** Print an integer, in decimal, on standard output. *)\n\nval print_float : float -> unit\n(** Print a floating-point number, in decimal, on standard output. *)\nexternal print_endline : string -> unit = \"log\" \n[@@bs.val] [@@bs.scope \"console\"]\n(** Print a string, followed by a newline character, on\n   standard output and flush standard output. *)\n\nval print_newline : unit -> unit\n(** Print a newline character on standard output, and flush\n   standard output. This can be used to simulate line\n   buffering of standard output. *)\n\n\nexternal prerr_endline : string -> unit = \"error\" \n[@@bs.val] [@@bs.scope \"console\"]\n(** Print a string, followed by a newline character on standard\n   error and flush standard error. *)\n\nval prerr_newline : unit -> unit\n(** Print a newline character on standard error, and flush\n   standard error. *)\n\n\n\n\n\n(** {1 References} *)\n\ntype 'a ref = { mutable contents : 'a }\n(** The type of references (mutable indirection cells) containing\n   a value of type ['a]. *)\n\nexternal ref : 'a -> 'a ref = \"%makemutable\"\n(** Return a fresh reference containing the given value. *)\n\nexternal ( ! ) : 'a ref -> 'a = \"%bs_ref_field0\"\n(** [!r] returns the current contents of reference [r].\n   Equivalent to [fun r -> r.contents].\n   Unary operator at precedence level 11/11.*)\n\nexternal ( := ) : 'a ref -> 'a -> unit = \"%bs_ref_setfield0\"\n(** [r := a] stores the value of [a] in reference [r].\n   Equivalent to [fun r v -> r.contents <- v].\n   Right-associative operator at precedence level 1/11. *)\n\nexternal incr : int ref -> unit = \"%incr\"\n(** Increment the integer contained in the given reference.\n   Equivalent to [fun r -> r := succ !r]. *)\n\nexternal decr : int ref -> unit = \"%decr\"\n(** Decrement the integer contained in the given reference.\n   Equivalent to [fun r -> r := pred !r]. *)\n\n(** {1 Result type} *)\n\n(** @since 4.03.0 *)\ntype ('a, 'b) result = ('a, 'b) Belt.Result.t =\n  | Ok of 'a\n  | Error of 'b\n\n\n(** {1 Program termination} *)\n\nval exit : int -> 'a\n(** Terminate the process, returning the given status code\n   to the operating system: usually 0 to indicate no errors,\n   and a small positive integer to indicate failure.\n   All open output channels are flushed with [flush_all].\n   An implicit [exit 0] is performed each time a program\n   terminates normally.  An implicit [exit 2] is performed if the program\n   terminates early because of an uncaught exception. *)\n\nval at_exit : (unit -> unit) -> unit\n(** Register the given function to be called at program termination\n   time. The functions registered with [at_exit] will be called when\n   the program does any of the following:\n   - executes {!Pervasives.exit}\n   - terminates, either normally or because of an uncaught\n     exception\n   - executes the C function [caml_shutdown].\n   The functions are called in 'last in, first out' order: the\n   function most recently added with [at_exit] is called first. *)\n\n(**/**)\n\nval valid_float_lexem : string -> string\n"}}}
bs-platform could not be found
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/pervasives.mli"}}}
bs-platform could not be found
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/belt_Option.mli","languageId":"ocaml","version":1,"text":"(* Copyright (C) 2017 Authors of ReScript\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * In addition to the permissions granted to you by the LGPL, you may combine\n * or link a \"work that uses the Library\" with a publicly distributed version\n * of this file to produce a combined library or application, then distribute\n * that combined work under the terms of your choosing, with no requirement\n * to comply with the obligations normally placed on you by section 4 of the\n * LGPL version 3 (or the corresponding section of a later version of the LGPL\n * should you choose to use a later version).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)\n\n(**\n   In Belt we represent the existence and nonexistence of a value by wrapping it\n   with the `option` type.  In order to make it a bit more convenient to work with\n   option-types, Belt provides utility-functions for it.\n\n   The `option` type is a part of the ReScript standard library which is defined like this:\n\n   ```res sig\n   type option<'a> = None | Some('a)\n   ```\n\n   ```res example\n   let someString: option<string> = Some(\"hello\")\n   ```\n*)\n\n\nval keepU : 'a option -> ('a -> bool [@bs]) -> 'a option\n(** Uncurried version of `keep` *)\n\nval keep : 'a option -> ('a -> bool) -> 'a option\n(**\n   If `optionValue` is `Some(value)` and `p(value) = true`, it returns `Some(value)`; otherwise returns `None`\n\n   ```res example\n   Belt.Option.keep(Some(10), x => x > 5) /* returns `Some(10)` */\n   Belt.Option.keep(Some(4), x => x > 5) /* returns `None` */\n   Belt.Option.keep(None, x => x > 5) /* returns `None` */\n   ```\n*)\n\nval forEachU : 'a option -> ('a -> unit [@bs]) -> unit\n(** Uncurried version of `forEach` *)\n\nval forEach : 'a option -> ('a -> unit) -> unit\n(**\n   If `optionValue` is `Some(value`), it calls `f(value)`; otherwise returns `()`\n\n   ```res example\n   Belt.Option.forEach(Some(\"thing\"), x => Js.log(x)) /* logs \"thing\" */\n   Belt.Option.forEach(None, x => Js.log(x)) /* returns () */\n   ```\n*)\n\nval getExn : 'a option -> 'a\n(**\n   Raises an Error in case `None` is provided. Use with care.\n\n   ```res example\n   Belt.Option.getExn(Some(3)) /* 3 */\n\n   Belt.Option.getExn(None) /* Raises an Error */\n   ```\n*)\n\nexternal getUnsafe :\n  'a option -> 'a = \"%identity\"\n(**\n   `getUnsafe(x)` returns `x`\n\n   This is an unsafe operation, it assumes `x` is neither `None`\n   nor `Some(None(...)))`\n*)\n\nval mapWithDefaultU : 'a option -> 'b -> ('a -> 'b [@bs]) -> 'b\n(** Uncurried version of `mapWithDefault` *)\n\nval mapWithDefault : 'a option -> 'b -> ('a -> 'b) -> 'b\n(**\n   If `optionValue` is of `Some(value)`,\n   this function returns that value applied with `f`, in other words `f(value)`.\n\n   If `optionValue` is `None`, the default is returned.\n\n   ```res example\n   let someValue = Some(3)\n   someValue->Belt.Option.mapWithDefault(0, x => x + 5) /* 8 */\n\n   let noneValue = None\n   noneValue->Belt.Option.mapWithDefault(0, x => x + 5) /* 0 */\n   ```\n*)\n\nval mapU : 'a option -> ('a -> 'b [@bs]) -> 'b option\n(** Uncurried version of `map` *)\n\nval map : 'a option -> ('a -> 'b) -> 'b option\n(**\n   If `optionValue` is `Some(value)` this returns `f(value)`, otherwise it returns `None`.\n\n   ```res example\n   Belt.Option.map(Some(3), x => x * x) /* Some(9) */\n\n   Belt.Option.map(None, x => x * x) /* None */\n   ```\n*)\n\nval flatMapU : 'a option -> ('a -> 'b option [@bs]) -> 'b option\n(** Uncurried version of `flatMap` *)\n\nval flatMap : 'a option -> ('a -> 'b option) -> 'b option\n(**\n   If `optionValue` is `Some(value)`, returns `f(value)`, otherwise returns\n   `None`.<br/>\n   The function `f` must have a return type of `option<'b>`.\n\n   ```res example\n   let addIfAboveOne = value =>\n     if (value > 1) {\n       Some(value + 1)\n     } else {\n       None\n     }\n\n   Belt.Option.flatMap(Some(2), addIfAboveOne) /* Some(3) */\n\n   Belt.Option.flatMap(Some(-4), addIfAboveOne) /* None */\n\n   Belt.Option.flatMap(None, addIfAboveOne) /* None */\n   ```\n*)\n\nval getWithDefault : 'a option -> 'a -> 'a\n(**\n   If `optionalValue` is `Some(value)`, returns `value`, otherwise default.\n\n   ```res example\n   Belt.Option.getWithDefault(None, \"Banana\") /* Banana */\n\n   Belt.Option.getWithDefault(Some(\"Apple\"), \"Banana\") /* Apple */\n   ```\n\n   ```res example\n   let greet = (firstName: option<string>) =>\n     \"Greetings \" ++ firstName->Belt.Option.getWithDefault(\"Anonymous\")\n\n   Some(\"Jane\")->greet /* \"Greetings Jane\" */\n\n   None->greet /* \"Greetings Anonymous\" */\n   ```\n*)\n\nval orElse : 'a option -> 'a option -> 'a option\n(**\n   `orElse optionalValue otherOptional`\n\n   If `optionalValue` is `Some value`, returns `Some value`, otherwise `otherOptional`\n\n   ```\n   orElse (Some 1812) (Some 1066) = Some 1812;;\n   orElse None (Some 1066) = Some 1066;;\n   orElse None None = None;;\n   ```\n*)\n\nval isSome : 'a option -> bool\n(**\n   Returns `true` if the argument is `Some(value)`, `false` otherwise.\n\n   ```res example\n   Belt.Option.isSome(None) /* false */\n\n   Belt.Option.isSome(Some(1)) /* true */\n   ```\n*)\n\nval isNone : 'a option -> bool\n(**\n   Returns `true` if the argument is `None`, `false` otherwise.\n\n   ```res example\n   Belt.Option.isNone(None) /* true */\n\n   Belt.Option.isNone(Some(1)) /* false */\n   ```\n*)\n\nval eqU : 'a option -> 'b option -> ('a -> 'b -> bool [@bs]) -> bool\n(**\n   Uncurried version of `eq`\n*)\n\nval eq : 'a option -> 'b option -> ('a -> 'b -> bool) -> bool\n(**\n   Evaluates two optional values for equality with respect to a predicate\n   function. If both `optValue1` and `optValue2` are `None`, returns `true`.\n   If one of the arguments is `Some(value)` and the other is `None`, returns\n   `false`.\n\n   If arguments are `Some(value1)` and `Some(value2)`, returns the result of\n   `predicate(value1, value2)`; the predicate function must return a bool.\n\n   ```res example\n   let clockEqual = (a, b) => mod(a, 12) == mod(b, 12)\n\n   open Belt.Option\n\n   eq(Some(3), Some(15), clockEqual) /* true */\n\n   eq(Some(3), None, clockEqual) /* false */\n\n   eq(None, Some(3), clockEqual) /* false */\n\n   eq(None, None, clockEqual) /* true */\n   ```\n*)\n\nval cmpU : 'a option -> 'b option -> ('a -> 'b -> int [@bs]) -> int\n(** Uncurried version of `cmp` *)\n\nval cmp : 'a option -> 'b option -> ('a -> 'b -> int) -> int\n(**\n   `cmp(optValue1, optValue2, comparisonFunction)` compares two optional values\n   with respect to given `comparisonFunction`.\n\n   If both `optValue1` and `optValue2` are `None`, it returns `0`.\n\n   If the first argument is `Some(value1)` and the second is `None`, returns `1`\n   (something is greater than nothing).\n\n   If the first argument is `None` and the second is `Some(value2)`, returns `-1`\n   (nothing is less than something).\n\n   If the arguments are `Some(value1)` and `Some(value2)`, returns the result of\n   `comparisonFunction(value1, value2)`; comparisonFunction takes two arguments\n   and returns `-1` if the first argument is less than the second, `0` if the\n   arguments are equal, and `1` if the first argument is greater than the second.\n\n   ```res example\n   let clockCompare = (a, b) => compare(mod(a, 12), mod(b, 12))\n\n   open Belt.Option\n\n   cmp(Some(3), Some(15), clockCompare) /* 0 */\n\n   cmp(Some(3), Some(14), clockCompare) /* 1 */\n\n   cmp(Some(2), Some(15), clockCompare) /* (-1) */\n\n   cmp(None, Some(15), clockCompare) /* (-1) */\n\n   cmp(Some(14), None, clockCompare) /* 1 */\n\n   cmp(None, None, clockCompare) /* 0 */\n   ```\n*)\n"}}}
bs-platform could not be found
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/belt_Option.mli"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/belt_Option.mli","languageId":"ocaml","version":1,"text":"(* Copyright (C) 2017 Authors of ReScript\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * In addition to the permissions granted to you by the LGPL, you may combine\n * or link a \"work that uses the Library\" with a publicly distributed version\n * of this file to produce a combined library or application, then distribute\n * that combined work under the terms of your choosing, with no requirement\n * to comply with the obligations normally placed on you by section 4 of the\n * LGPL version 3 (or the corresponding section of a later version of the LGPL\n * should you choose to use a later version).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)\n\n(**\n   In Belt we represent the existence and nonexistence of a value by wrapping it\n   with the `option` type.  In order to make it a bit more convenient to work with\n   option-types, Belt provides utility-functions for it.\n\n   The `option` type is a part of the ReScript standard library which is defined like this:\n\n   ```res sig\n   type option<'a> = None | Some('a)\n   ```\n\n   ```res example\n   let someString: option<string> = Some(\"hello\")\n   ```\n*)\n\n\nval keepU : 'a option -> ('a -> bool [@bs]) -> 'a option\n(** Uncurried version of `keep` *)\n\nval keep : 'a option -> ('a -> bool) -> 'a option\n(**\n   If `optionValue` is `Some(value)` and `p(value) = true`, it returns `Some(value)`; otherwise returns `None`\n\n   ```res example\n   Belt.Option.keep(Some(10), x => x > 5) /* returns `Some(10)` */\n   Belt.Option.keep(Some(4), x => x > 5) /* returns `None` */\n   Belt.Option.keep(None, x => x > 5) /* returns `None` */\n   ```\n*)\n\nval forEachU : 'a option -> ('a -> unit [@bs]) -> unit\n(** Uncurried version of `forEach` *)\n\nval forEach : 'a option -> ('a -> unit) -> unit\n(**\n   If `optionValue` is `Some(value`), it calls `f(value)`; otherwise returns `()`\n\n   ```res example\n   Belt.Option.forEach(Some(\"thing\"), x => Js.log(x)) /* logs \"thing\" */\n   Belt.Option.forEach(None, x => Js.log(x)) /* returns () */\n   ```\n*)\n\nval getExn : 'a option -> 'a\n(**\n   Raises an Error in case `None` is provided. Use with care.\n\n   ```res example\n   Belt.Option.getExn(Some(3)) /* 3 */\n\n   Belt.Option.getExn(None) /* Raises an Error */\n   ```\n*)\n\nexternal getUnsafe :\n  'a option -> 'a = \"%identity\"\n(**\n   `getUnsafe(x)` returns `x`\n\n   This is an unsafe operation, it assumes `x` is neither `None`\n   nor `Some(None(...)))`\n*)\n\nval mapWithDefaultU : 'a option -> 'b -> ('a -> 'b [@bs]) -> 'b\n(** Uncurried version of `mapWithDefault` *)\n\nval mapWithDefault : 'a option -> 'b -> ('a -> 'b) -> 'b\n(**\n   If `optionValue` is of `Some(value)`,\n   this function returns that value applied with `f`, in other words `f(value)`.\n\n   If `optionValue` is `None`, the default is returned.\n\n   ```res example\n   let someValue = Some(3)\n   someValue->Belt.Option.mapWithDefault(0, x => x + 5) /* 8 */\n\n   let noneValue = None\n   noneValue->Belt.Option.mapWithDefault(0, x => x + 5) /* 0 */\n   ```\n*)\n\nval mapU : 'a option -> ('a -> 'b [@bs]) -> 'b option\n(** Uncurried version of `map` *)\n\nval map : 'a option -> ('a -> 'b) -> 'b option\n(**\n   If `optionValue` is `Some(value)` this returns `f(value)`, otherwise it returns `None`.\n\n   ```res example\n   Belt.Option.map(Some(3), x => x * x) /* Some(9) */\n\n   Belt.Option.map(None, x => x * x) /* None */\n   ```\n*)\n\nval flatMapU : 'a option -> ('a -> 'b option [@bs]) -> 'b option\n(** Uncurried version of `flatMap` *)\n\nval flatMap : 'a option -> ('a -> 'b option) -> 'b option\n(**\n   If `optionValue` is `Some(value)`, returns `f(value)`, otherwise returns\n   `None`.<br/>\n   The function `f` must have a return type of `option<'b>`.\n\n   ```res example\n   let addIfAboveOne = value =>\n     if (value > 1) {\n       Some(value + 1)\n     } else {\n       None\n     }\n\n   Belt.Option.flatMap(Some(2), addIfAboveOne) /* Some(3) */\n\n   Belt.Option.flatMap(Some(-4), addIfAboveOne) /* None */\n\n   Belt.Option.flatMap(None, addIfAboveOne) /* None */\n   ```\n*)\n\nval getWithDefault : 'a option -> 'a -> 'a\n(**\n   If `optionalValue` is `Some(value)`, returns `value`, otherwise default.\n\n   ```res example\n   Belt.Option.getWithDefault(None, \"Banana\") /* Banana */\n\n   Belt.Option.getWithDefault(Some(\"Apple\"), \"Banana\") /* Apple */\n   ```\n\n   ```res example\n   let greet = (firstName: option<string>) =>\n     \"Greetings \" ++ firstName->Belt.Option.getWithDefault(\"Anonymous\")\n\n   Some(\"Jane\")->greet /* \"Greetings Jane\" */\n\n   None->greet /* \"Greetings Anonymous\" */\n   ```\n*)\n\nval orElse : 'a option -> 'a option -> 'a option\n(**\n   `orElse optionalValue otherOptional`\n\n   If `optionalValue` is `Some value`, returns `Some value`, otherwise `otherOptional`\n\n   ```\n   orElse (Some 1812) (Some 1066) = Some 1812;;\n   orElse None (Some 1066) = Some 1066;;\n   orElse None None = None;;\n   ```\n*)\n\nval isSome : 'a option -> bool\n(**\n   Returns `true` if the argument is `Some(value)`, `false` otherwise.\n\n   ```res example\n   Belt.Option.isSome(None) /* false */\n\n   Belt.Option.isSome(Some(1)) /* true */\n   ```\n*)\n\nval isNone : 'a option -> bool\n(**\n   Returns `true` if the argument is `None`, `false` otherwise.\n\n   ```res example\n   Belt.Option.isNone(None) /* true */\n\n   Belt.Option.isNone(Some(1)) /* false */\n   ```\n*)\n\nval eqU : 'a option -> 'b option -> ('a -> 'b -> bool [@bs]) -> bool\n(**\n   Uncurried version of `eq`\n*)\n\nval eq : 'a option -> 'b option -> ('a -> 'b -> bool) -> bool\n(**\n   Evaluates two optional values for equality with respect to a predicate\n   function. If both `optValue1` and `optValue2` are `None`, returns `true`.\n   If one of the arguments is `Some(value)` and the other is `None`, returns\n   `false`.\n\n   If arguments are `Some(value1)` and `Some(value2)`, returns the result of\n   `predicate(value1, value2)`; the predicate function must return a bool.\n\n   ```res example\n   let clockEqual = (a, b) => mod(a, 12) == mod(b, 12)\n\n   open Belt.Option\n\n   eq(Some(3), Some(15), clockEqual) /* true */\n\n   eq(Some(3), None, clockEqual) /* false */\n\n   eq(None, Some(3), clockEqual) /* false */\n\n   eq(None, None, clockEqual) /* true */\n   ```\n*)\n\nval cmpU : 'a option -> 'b option -> ('a -> 'b -> int [@bs]) -> int\n(** Uncurried version of `cmp` *)\n\nval cmp : 'a option -> 'b option -> ('a -> 'b -> int) -> int\n(**\n   `cmp(optValue1, optValue2, comparisonFunction)` compares two optional values\n   with respect to given `comparisonFunction`.\n\n   If both `optValue1` and `optValue2` are `None`, it returns `0`.\n\n   If the first argument is `Some(value1)` and the second is `None`, returns `1`\n   (something is greater than nothing).\n\n   If the first argument is `None` and the second is `Some(value2)`, returns `-1`\n   (nothing is less than something).\n\n   If the arguments are `Some(value1)` and `Some(value2)`, returns the result of\n   `comparisonFunction(value1, value2)`; comparisonFunction takes two arguments\n   and returns `-1` if the first argument is less than the second, `0` if the\n   arguments are equal, and `1` if the first argument is greater than the second.\n\n   ```res example\n   let clockCompare = (a, b) => compare(mod(a, 12), mod(b, 12))\n\n   open Belt.Option\n\n   cmp(Some(3), Some(15), clockCompare) /* 0 */\n\n   cmp(Some(3), Some(14), clockCompare) /* 1 */\n\n   cmp(Some(2), Some(15), clockCompare) /* (-1) */\n\n   cmp(None, Some(15), clockCompare) /* (-1) */\n\n   cmp(Some(14), None, clockCompare) /* 1 */\n\n   cmp(None, None, clockCompare) /* 0 */\n   ```\n*)\n"}}}
bs-platform could not be found
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/belt_Option.mli"}}}
bs-platform could not be found
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/js_string2.ml","languageId":"ocaml","version":1,"text":"(* Copyright (C) 2015-2016 Bloomberg Finance L.P.\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * In addition to the permissions granted to you by the LGPL, you may combine\n * or link a \"work that uses the Library\" with a publicly distributed version\n * of this file to produce a combined library or application, then distribute\n * that combined work under the terms of your choosing, with no requirement\n * to comply with the obligations normally placed on you by section 4 of the\n * LGPL version 3 (or the corresponding section of a later version of the LGPL\n * should you choose to use a later version).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)\n\n(** Provide bindings to JS string. Optimized for pipe-first. *)\n\ntype t = string\n\nexternal make : 'a -> t = \"String\"\n  [@@bs.val]\n(**\n`make(value)` converts the given value to a `string`.\n\n```res example\nJs.String2.make(3.5) == \"3.5\"\nJs.String2.make([1, 2, 3]) == \"1,2,3\"\n```\n*)\n\nexternal fromCharCode : int -> t = \"String.fromCharCode\"\n  [@@bs.val]\n(**\n`fromCharCode(n)` creates a `string` containing the character corresponding to\nthat number; `n` ranges from 0 to 65535.If out of range, the lower 16 bits of\nthe value are used. Thus, `fromCharCode(0x1F63A)` gives the same result as\n`fromCharCode(0xF63A)`.\n\nSee [`String.fromCharCode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)\non MDN.\n\n```res example\nJs.String2.fromCharCode(65) == \"A\"\nJs.String2.fromCharCode(0x3c8) == `Ïˆ`\nJs.String2.fromCharCode(0xd55c) == `í•œ`\nJs.String2.fromCharCode(-64568) == `Ïˆ`\n```\n*)\n\nexternal fromCharCodeMany : int array -> t = \"String.fromCharCode\"\n  [@@bs.val] [@@bs.splice]\n(**\n`fromCharCodeMany([n1, n2, n3])` creates a `string` from the characters\ncorresponding to the given numbers, using the same rules as `fromCharCode`.\n\nSee [`String.fromCharCode`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode)\non MDN.\n*)\n\nexternal fromCodePoint : int -> t = \"String.fromCodePoint\"\n  [@@bs.val]\n(**\n`fromCodePoint(n)` creates a `string` containing the character corresponding to\nthat numeric code point. If the number is not a valid code point, it raises\n`RangeError`. Thus, `fromCodePoint(0x1F63A)` will produce a correct value,\nunlike `fromCharCode(0x1F63A)`, and `fromCodePoint(-5)` will raise a\n`RangeError`.\n\nSee [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\non MDN.\n\n```res example\nJs.String2.fromCodePoint(65) == \"A\"\nJs.String2.fromCodePoint(0x3c8) == `Ïˆ`\nJs.String2.fromCodePoint(0xd55c) == `í•œ`\nJs.String2.fromCodePoint(0x1f63a) == `ðŸ˜º`\n```\n*)\n\nexternal fromCodePointMany : int array -> t = \"String.fromCodePoint\"\n  [@@bs.val] [@@bs.splice]\n(**\n`fromCodePointMany([n1, n2, n3])` creates a `string` from the characters\ncorresponding to the given code point numbers, using the same rules as\n`fromCodePoint`.\n\nSee [`String.fromCodePoint`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCodePoint)\non MDN.\n\n```res example\nJs.String2.fromCodePointMany([0xd55c, 0xae00, 0x1f63a]) == `í•œê¸€ðŸ˜º`\n```\n*)\n\n(* String.raw: ES2015, meant to be used with template strings, not directly *)\n\nexternal length : t -> int = \"length\"\n  [@@bs.get]\n(**\n`length(s)` returns the length of the given `string`.\n\nSee [`String.length`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length)\non MDN.\n\n```res example\nJs.String2.length(\"abcd\") == 4\n```\n*)\n\nexternal get : t -> int -> t = \"\"\n  [@@bs.get_index]\n(**\n`get(s, n)` returns as a `string` the character at the given index number. If\n`n` is out of range, this function returns `undefined`,so at some point this\nfunction may be modified to return `option(string)`.\n\n```res example\nJs.String2.get(\"Reason\", 0) == \"R\"\nJs.String2.get(\"Reason\", 4) == \"o\"\nJs.String2.get(`Ráº½asÃ¶Å„`, 5) == `Å„`\n```\n*)\n\nexternal charAt : t -> int -> t = \"charAt\"\n  [@@bs.send]\n(**\n`charAt(s, n)` gets the character at index `n` within string `s`. If `n` is\nnegative or greater than the length of `s`, it returns the empty string. If the\nstring contains characters outside the range \\u0000-\\uffff, it will return the\nfirst 16-bit value at that position in the string.\n\nSee [`String.charAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charAt)\non MDN.\n\n```res example\nJs.String2.charAt(\"Reason\", 0) == \"R\"\nJs.String2.charAt(\"Reason\", 12) == \"\"\nJs.String2.charAt(`Ráº½asÃ¶Å„`, 5) == `Å„`\n```\n*)\n\nexternal charCodeAt : t -> int -> float = \"charCodeAt\"\n  [@@bs.send]\n(**\n`charCodeAt(s, n)` returns the character code at position `n` in string `s`;\nthe result is in the range 0-65535, unlke `codePointAt`, so it will not work\ncorrectly for characters with code points greater than or equal to 0x10000. The\nreturn type is `float` because this function returns NaN if `n` is less than\nzero or greater than the length of the string.\n\nSee [`String.charCodeAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt)\non MDN.\n\n```res example\nJs.String2.charCodeAt(`ðŸ˜º`, 0) == 0xd83d->Belt.Int.toFloat\nJs.String2.codePointAt(`ðŸ˜º`, 0) == Some(0x1f63a)\n```\n*)\n\nexternal codePointAt : t -> int -> int option = \"codePointAt\"\n  [@@bs.send]\n(**\n`codePointAt(s, n)` returns the code point at position `n` within string `s` as\na `Some(value)`. The return value handles code points greater than or equal to\n0x10000. If there is no code point at the given position, the function returns\n`None`.\n\nSee [`String.codePointAt`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/codePointAt)\non MDN.\n\n```res example\nJs.String2.codePointAt(`Â¿ðŸ˜º?`, 1) == Some(0x1f63a)\nJs.String2.codePointAt(\"abc\", 5) == None\n```\n*)\n\nexternal concat : t -> t -> t = \"concat\"\n  [@@bs.send]\n(**\n`concat(original, append)` returns a new `string` with `append` added after\n`original`.\n\nSee [`String.concat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat)\non MDN.\n\n```res example\nJs.String2.concat(\"cow\", \"bell\") == \"cowbell\"\n```\n*)\n\nexternal concatMany : t -> t array -> t = \"concat\"\n  [@@bs.send] [@@bs.splice]\n(**\n`concatMany(original, arr)` returns a new `string` consisting of each item of an\narray of strings added to the `original` string.\n\nSee [`String.concat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/concat)\non MDN.\n\n```res example\nJs.String2.concatMany(\"1st\", [\"2nd\", \"3rd\", \"4th\"]) == \"1st2nd3rd4th\"\n```\n*)\n\nexternal endsWith : t -> t -> bool = \"endsWith\"\n  [@@bs.send]\n(**\nES2015: `endsWith(str, substr)` returns `true` if the `str` ends with `substr`,\n`false` otherwise.\n\nSee [`String.endsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith)\non MDN.\n\n```res example\nJs.String2.endsWith(\"BuckleScript\", \"Script\") == true\nJs.String2.endsWith(\"BuckleShoes\", \"Script\") == false\n```\n*)\n\nexternal endsWithFrom : t -> t -> int -> bool = \"endsWith\"\n  [@@bs.send]\n(**\n`endsWithFrom(str, ending, len)` returns `true` if the first len characters of\n`str` end with `ending`, `false` otherwise. If `len` is greater than or equal\nto the length of `str`, then it works like `endsWith`. (Honestly, this should\nhave been named endsWithAt, but oh well).\n\nSee [`String.endsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith)\non MDN.\n\n```res example\nJs.String2.endsWithFrom(\"abcd\", \"cd\", 4) == true\nJs.String2.endsWithFrom(\"abcde\", \"cd\", 3) == false\nJs.String2.endsWithFrom(\"abcde\", \"cde\", 99) == true\nJs.String2.endsWithFrom(\"example.dat\", \"ple\", 7) == true\n```\n*)\n\nexternal includes : t -> t -> bool = \"includes\"\n  [@@bs.send]\n(**\nES2015: `includes(str, searchValue)` returns `true` if `searchValue` is found\nanywhere within `str`, false otherwise.\n\nSee [`String.includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes)\non MDN.\n\n```res example\nJs.String2.includes(\"programmer\", \"gram\") == true\nJs.String2.includes(\"programmer\", \"er\") == true\nJs.String2.includes(\"programmer\", \"pro\") == true\nJs.String2.includes(\"programmer.dat\", \"xyz\") == false\n```\n*)\n\nexternal includesFrom : t -> t -> int -> bool = \"includes\"\n  [@@bs.send]\n(**\nES2015: `includes(str, searchValue start)` returns `true` if `searchValue` is\nfound anywhere within `str` starting at character number `start` (where 0 is\nthe first character), `false` otherwise.\n\nSee [`String.includes`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes)\non MDN.\n\n```res example\nJs.String2.includesFrom(\"programmer\", \"gram\", 1) == true\nJs.String2.includesFrom(\"programmer\", \"gram\", 4) == false\nJs.String2.includesFrom(`ëŒ€í•œë¯¼êµ­`, `í•œ`, 1) == true\n```\n*)\n\nexternal indexOf : t -> t -> int = \"indexOf\"\n  [@@bs.send]\n(**\nES2015: `indexOf(str, searchValue)` returns the position at which `searchValue`\nwas first found within `str`, or -1 if `searchValue` is not in `str`.\n\nSee [`String.indexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf)\non MDN.\n\n```res example\nJs.String2.indexOf(\"bookseller\", \"ok\") == 2\nJs.String2.indexOf(\"bookseller\", \"sell\") == 4\nJs.String2.indexOf(\"beekeeper\", \"ee\") == 1\nJs.String2.indexOf(\"bookseller\", \"xyz\") == -1\n```\n*)\n\nexternal indexOfFrom : t -> t -> int -> int = \"indexOf\"\n  [@@bs.send]\n(**\n`indexOfFrom(str, searchValue, start)` returns the position at which\n`searchValue` was found within `str` starting at character position `start`, or\n-1 if `searchValue` is not found in that portion of `str`. The return value is\nrelative to the beginning of the string, no matter where the search started\nfrom.\n\nSee [`String.indexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf)\non MDN.\n\n```res example\nJs.String2.indexOfFrom(\"bookseller\", \"ok\", 1) == 2\nJs.String2.indexOfFrom(\"bookseller\", \"sell\", 2) == 4\nJs.String2.indexOfFrom(\"bookseller\", \"sell\", 5) == -1\n```\n*)\n\nexternal lastIndexOf : t -> t -> int = \"lastIndexOf\"\n  [@@bs.send]\n(**\n`lastIndexOf(str, searchValue)` returns the position of the last occurrence of\n`searchValue` within `str`, searching backwards from the end of the string.\nReturns -1 if `searchValue` is not in `str`. The return value is always\nrelative to the beginning of the string.\n\nSee [`String.lastIndexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf)\non MDN.\n\n```res example\nJs.String2.lastIndexOf(\"bookseller\", \"ok\") == 2\nJs.String2.lastIndexOf(\"beekeeper\", \"ee\") == 4\nJs.String2.lastIndexOf(\"abcdefg\", \"xyz\") == -1\n```\n*)\n\nexternal lastIndexOfFrom : t -> t -> int -> int = \"lastIndexOf\"\n  [@@bs.send]\n(**\n`lastIndexOfFrom(str, searchValue, start)` returns the position of the last\noccurrence of `searchValue` within `str`, searching backwards from the given\nstart position. Returns -1 if `searchValue` is not in `str`. The return value\nis always relative to the beginning of the string.\n\nSee [`String.lastIndexOf`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf)\non MDN.\n\n```res example\nJs.String2.lastIndexOfFrom(\"bookseller\", \"ok\", 6) == 2\nJs.String2.lastIndexOfFrom(\"beekeeper\", \"ee\", 8) == 4\nJs.String2.lastIndexOfFrom(\"beekeeper\", \"ee\", 3) == 1\nJs.String2.lastIndexOfFrom(\"abcdefg\", \"xyz\", 4) == -1\n```\n*)\n\n(* extended by ECMA-402 *)\n\nexternal localeCompare : t -> t -> float = \"localeCompare\"\n  [@@bs.send]\n(**\n`localeCompare(reference, comparison)` returns\n- a negative value if reference comes before comparison in sort order\n- zero if reference and comparison have the same sort order\n- a positive value if reference comes after comparison in sort order\n\nSee [`String.localeCompare`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/localeCompare) on MDN.\n\n```res example\nJs.String2.localeCompare(\"zebra\", \"ant\") > 0.0\nJs.String2.localeCompare(\"ant\", \"zebra\") < 0.0\nJs.String2.localeCompare(\"cat\", \"cat\") == 0.0\nJs.String2.localeCompare(\"CAT\", \"cat\") > 0.0\n```\n*)\n\nexternal match_ : t -> Js_re.t -> t option array option = \"match\"\n  [@@bs.send] [@@bs.return { null_to_opt }]\n(**\n`match(str, regexp)` matches a `string` against the given `regexp`. If there is\nno match, it returns `None`. For regular expressions without the g modifier, if\n  there is a match, the return value is `Some(array)` where the array contains:\n- The entire matched string\n- Any capture groups if the regexp had parentheses\nFor regular expressions with the g modifier, a matched expression returns\n`Some(array)` with all the matched substrings and no capture groups.\n\nSee [`String.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\non MDN.\n\n```res example\nJs.String2.match_(\"The better bats\", %re(\"/b[aeiou]t/\")) == Some([\"bet\"])\nJs.String2.match_(\"The better bats\", %re(\"/b[aeiou]t/g\")) == Some([\"bet\", \"bat\"])\nJs.String2.match_(\"Today is 2018-04-05.\", %re(\"/(\\d+)-(\\d+)-(\\d+)/\")) ==\n  Some([\"2018-04-05\", \"2018\", \"04\", \"05\"])\nJs.String2.match_(\"The large container.\", %re(\"/b[aeiou]g/\")) == None\n```\n*)\n\nexternal normalize : t -> t = \"normalize\"\n  [@@bs.send]\n(**\n`normalize(str)` returns the normalized Unicode string using Normalization Form\nCanonical (NFC) Composition. Consider the character Ã£, which can be represented\nas the single codepoint \\u00e3 or the combination of a lower case letter A\n\\u0061 and a combining tilde \\u0303. Normalization ensures that both can be\nstored in an equivalent binary representation.\n\nSee [`String.normalize`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize)\non MDN. See also [Unicode technical report\n#15](https://unicode.org/reports/tr15/) for details.\n*)\n\nexternal normalizeByForm : t -> t -> t = \"normalize\"\n  [@@bs.send]\n(**\nES2015: `normalize(str, form)` returns the normalized Unicode string using the\nspecified form of normalization, which may be one of:\n- \"NFC\" â€” Normalization Form Canonical Composition.\n- \"NFD\" â€” Normalization Form Canonical Decomposition.\n- \"NFKC\" â€” Normalization Form Compatibility Composition.\n- \"NFKD\" â€” Normalization Form Compatibility Decomposition.\n\nSee [`String.normalize`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/normalize) on MDN.\nSee also [Unicode technical report #15](https://unicode.org/reports/tr15/) for details.\n*)\n\nexternal repeat : t -> int -> t = \"repeat\"\n  [@@bs.send]\n(**\n`repeat(str, n)` returns a `string` that consists of `n` repetitions of `str`.\nRaises `RangeError` if `n` is negative.\n\nSee [`String.repeat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat)\non MDN.\n\n```res example\nJs.String2.repeat(\"ha\", 3) == \"hahaha\"\nJs.String2.repeat(\"empty\", 0) == \"\"\n```\n*)\n\nexternal replace : t -> t -> t -> t = \"replace\"\n  [@@bs.send]\n(**\nES2015: `replace(str, substr, newSubstr)` returns a new `string` which is\nidentical to `str` except with the first matching instance of `substr` replaced\nby `newSubstr`. `substr` is treated as a verbatim string to match, not a\nregular expression.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nJs.String2.replace(\"old string\", \"old\", \"new\") == \"new string\"\nJs.String2.replace(\"the cat and the dog\", \"the\", \"this\") == \"this cat and the dog\"\n```\n*)\n\nexternal replaceByRe : t -> Js_re.t -> t -> t = \"replace\"\n  [@@bs.send]\n(**\n`replaceByRe(str, regex, replacement)` returns a new `string` where occurrences\nmatching regex have been replaced by `replacement`.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nJs.String2.replaceByRe(\"vowels be gone\", %re(\"/[aeiou]/g\"), \"x\") == \"vxwxls bx gxnx\"\nJs.String2.replaceByRe(\"Juan Fulano\", %re(\"/(\\w+) (\\w+)/\"), \"$2, $1\") == \"Fulano, Juan\"\n```\n*)\n\nexternal unsafeReplaceBy0 :\n  t -> Js_re.t -> ((t -> int -> t -> t)[@bs.uncurry]) -> t = \"replace\"\n  [@@bs.send]\n(**\nReturns a new `string` with some or all matches of a pattern with no capturing\nparentheses replaced by the value returned from the given function. The\nfunction receives as its parameters the matched string, the offset at which the\nmatch begins, and the whole string being matched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nlet str = \"beautiful vowels\"\nlet re = %re(\"/[aeiou]/g\")\nlet matchFn = (matchPart, _offset, _wholeString) => Js.String2.toUpperCase(matchPart)\n\nJs.String2.unsafeReplaceBy0(str, re, matchFn) == \"bEAUtIfUl vOwEls\"\n```\n*)\n\nexternal unsafeReplaceBy1 :\n  t -> Js_re.t -> ((t -> t -> int -> t -> t)[@bs.uncurry]) -> t = \"replace\"\n  [@@bs.send]\n(**\nReturns a new `string` with some or all matches of a pattern with one set of\ncapturing parentheses replaced by the value returned from the given function.\nThe function receives as its parameters the matched string, the captured\nstring, the offset at which the match begins, and the whole string being\nmatched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nlet str = \"Jony is 40\"\nlet re = %re(\"/(Jony is )\\d+/g\")\nlet matchFn = (_match, part1, _offset, _wholeString) => {\n  part1 ++ \"41\"\n}\n\nJs.String2.unsafeReplaceBy1(str, re, matchFn) == \"Jony is 41\"\n```\n*)\n\nexternal unsafeReplaceBy2 :\n  t -> Js_re.t -> ((t -> t -> t -> int -> t -> t)[@bs.uncurry]) -> t = \"replace\"\n  [@@bs.send]\n(**\nReturns a new `string` with some or all matches of a pattern with two sets of\ncapturing parentheses replaced by the value returned from the given function.\nThe function receives as its parameters the matched string, the captured\nstrings, the offset at which the match begins, and the whole string being\nmatched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n\n```res example\nlet str = \"7 times 6\"\nlet re = %re(\"/(\\d+) times (\\d+)/\")\nlet matchFn = (_match, p1, p2, _offset, _wholeString) => {\n  switch (Belt.Int.fromString(p1), Belt.Int.fromString(p2)) {\n  | (Some(x), Some(y)) => Belt.Int.toString(x * y)\n  | _ => \"???\"\n  }\n}\n\nJs.String2.unsafeReplaceBy2(str, re, matchFn) == \"42\"\n```\n*)\n\nexternal unsafeReplaceBy3 :\n  t -> Js_re.t -> ((t -> t -> t -> t -> int -> t -> t)[@bs.uncurry]) -> t\n  = \"replace\"\n  [@@bs.send]\n(**\nReturns a new `string` with some or all matches of a pattern with three sets of\ncapturing parentheses replaced by the value returned from the given function.\nThe function receives as its parameters the matched string, the captured\nstrings, the offset at which the match begins, and the whole string being\nmatched.\n\nSee [`String.replace`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace)\non MDN.\n*)\n\nexternal search : t -> Js_re.t -> int = \"search\"\n  [@@bs.send]\n(**\n`search(str, regexp)` returns the starting position of the first match of\n`regexp` in the given `str`, or -1 if there is no match.\n\nSee [`String.search`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/search)\non MDN.\n\n```res example\nJs.String2.search(\"testing 1 2 3\", %re(\"/\\d+/\")) == 8\nJs.String2.search(\"no numbers\", %re(\"/\\d+/\")) == -1\n```\n*)\n\nexternal slice : t -> from:int -> to_:int -> t = \"slice\"\n  [@@bs.send]\n(**\n`slice(str, from:n1, to_:n2)` returns the substring of `str` starting at\ncharacter `n1` up to but not including `n2`.\n- If either `n1` or `n2` is negative, then it is evaluated as `length(str - n1)` or `length(str - n2)`.\n- If `n2` is greater than the length of `str`, then it is treated as `length(str)`.\n- If `n1` is greater than `n2`, slice returns the empty string.\n\nSee [`String.slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) on MDN.\n\n```res example\nJs.String2.slice(\"abcdefg\", ~from=2, ~to_=5) == \"cde\"\nJs.String2.slice(\"abcdefg\", ~from=2, ~to_=9) == \"cdefg\"\nJs.String2.slice(\"abcdefg\", ~from=-4, ~to_=-2) == \"de\"\nJs.String2.slice(\"abcdefg\", ~from=5, ~to_=1) == \"\"\n```\n*)\n\nexternal sliceToEnd : t -> from:int -> t = \"slice\"\n  [@@bs.send]\n(**\n`sliceToEnd(str, from:n)` returns the substring of `str` starting at character\n`n` to the end of the string.\n- If `n` is negative, then it is evaluated as `length(str - n)`.\n- If `n` is greater than the length of `str`, then sliceToEnd returns the empty string.\n\nSee [`String.slice`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice) on MDN.\n\n```res example\nJs.String2.sliceToEnd(\"abcdefg\", ~from=4) == \"efg\"\nJs.String2.sliceToEnd(\"abcdefg\", ~from=-2) == \"fg\"\nJs.String2.sliceToEnd(\"abcdefg\", ~from=7) == \"\"\n```\n*)\n\nexternal split : t -> t -> t array = \"split\"\n  [@@bs.send]\n(**\n`split(str, delimiter)` splits the given `str` at every occurrence of\n`delimiter` and returns an array of the resulting substrings.\n\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\non MDN.\n\n```res example\nJs.String2.split(\"2018-01-02\", \"-\") == [\"2018\", \"01\", \"02\"]\nJs.String2.split(\"a,b,,c\", \",\") == [\"a\", \"b\", \"\", \"c\"]\nJs.String2.split(\"good::bad as great::awful\", \"::\") == [\"good\", \"bad as great\", \"awful\"]\nJs.String2.split(\"has-no-delimiter\", \";\") == [\"has-no-delimiter\"]\n```\n*)\n\nexternal splitAtMost : t -> t -> limit:int -> t array = \"split\"\n  [@@bs.send]\n(**\n  `splitAtMost delimiter ~limit: n str` splits the given `str` at every occurrence of `delimiter` and returns an array of the first `n` resulting substrings. If `n` is negative or greater than the number of substrings, the array will contain all the substrings.\n\n```\nsplitAtMost \"ant/bee/cat/dog/elk\" \"/\" ~limit: 3 = [|\"ant\"; \"bee\"; \"cat\"|];;\nsplitAtMost \"ant/bee/cat/dog/elk\" \"/\" ~limit: 0 = [| |];;\nsplitAtMost \"ant/bee/cat/dog/elk\" \"/\" ~limit: 9 = [|\"ant\"; \"bee\"; \"cat\"; \"dog\"; \"elk\"|];;\n```\n*)\n\nexternal splitByRe : t -> Js_re.t -> t option array = \"split\"\n  [@@bs.send]\n(**\n`splitByRe(str, regex)` splits the given `str` at every occurrence of `regex`\nand returns an array of the resulting substrings.\n\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\non MDN.\n\n```res example\nJs.String2.splitByRe(\"art; bed , cog ;dad\", %re(\"/\\s*[,;]\\s*/\")) == [\n    Some(\"art\"),\n    Some(\"bed\"),\n    Some(\"cog\"),\n    Some(\"dad\"),\n  ]\n```\n*)\n\nexternal splitByReAtMost : t -> Js_re.t -> limit:int -> t option array = \"split\"\n  [@@bs.send]\n(**\n`splitByReAtMost(str, regex, ~limit:n)` splits the given `str` at every\noccurrence of `regex` and returns an array of the first `n` resulting\nsubstrings. If `n` is negative or greater than the number of substrings, the\narray will contain all the substrings.\n\nSee [`String.split`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split)\non MDN.\n\n```res example\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=3) == [\n    Some(\"one\"),\n    Some(\"two\"),\n    Some(\"three\"),\n  ]\n\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=0) == []\n\nJs.String2.splitByReAtMost(\"one: two: three: four\", %re(\"/\\s*:\\s*/\"), ~limit=8) == [\n    Some(\"one\"),\n    Some(\"two\"),\n    Some(\"three\"),\n    Some(\"four\"),\n  ]\n```\n*)\n\nexternal startsWith : t -> t -> bool = \"startsWith\"\n  [@@bs.send]\n(**\nES2015: `startsWith(str, substr)` returns `true` if the `str` starts with\n`substr`, `false` otherwise.\n\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\non MDN.\n\n```res example\nJs.String2.startsWith(\"BuckleScript\", \"Buckle\") == true\nJs.String2.startsWith(\"BuckleScript\", \"\") == true\nJs.String2.startsWith(\"JavaScript\", \"Buckle\") == false\n```\n*)\n\nexternal startsWithFrom : t -> t -> int -> bool = \"startsWith\"\n  [@@bs.send]\n(**\nES2015: `startsWithFrom(str, substr, n)` returns `true` if the `str` starts\nwith `substr` starting at position `n`, false otherwise. If `n` is negative,\nthe search starts at the beginning of `str`.\n\nSee [`String.startsWith`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith)\non MDN.\n\n```res example\nJs.String2.startsWithFrom(\"BuckleScript\", \"kle\", 3) == true\nJs.String2.startsWithFrom(\"BuckleScript\", \"\", 3) == true\nJs.String2.startsWithFrom(\"JavaScript\", \"Buckle\", 2) == false\n```\n*)\n\nexternal substr : t -> from:int -> t = \"substr\"\n  [@@bs.send]\n(**\n`substr(str, ~from:n)` returns the substring of `str` from position `n` to the\nend of the string.\n- If `n` is less than zero, the starting position is the length of `str - n`.\n- If `n` is greater than or equal to the length of `str`, returns the empty string.\n\nJavaScriptâ€™s `String.substr()` is a legacy function. When possible, use\n`substring()` instead.\n\nSee [`String.substr`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr)\non MDN.\n\n```res example\nJs.String2.substr(\"abcdefghij\", ~from=3) == \"defghij\"\nJs.String2.substr(\"abcdefghij\", ~from=-3) == \"hij\"\nJs.String2.substr(\"abcdefghij\", ~from=12) == \"\"\n```\n*)\n\nexternal substrAtMost : t -> from:int -> length:int -> t = \"substr\"\n  [@@bs.send]\n(**\n`substrAtMost(str, ~from: pos, ~length: n)` returns the substring of `str` of\nlength `n` starting at position `pos`.\n- If `pos` is less than zero, the starting position is the length of `str - pos`.\n- If `pos` is greater than or equal to the length of `str`, returns the empty string.\n- If `n` is less than or equal to zero, returns the empty string.\n\nJavaScriptâ€™s `String.substr()` is a legacy function. When possible, use\n`substring()` instead.\n\nSee [`String.substr`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr)\non MDN.\n\n```res example\nJs.String2.substrAtMost(\"abcdefghij\", ~from=3, ~length=4) == \"defg\"\nJs.String2.substrAtMost(\"abcdefghij\", ~from=-3, ~length=4) == \"hij\"\nJs.String2.substrAtMost(\"abcdefghij\", ~from=12, ~length=2) == \"\"\n```\n*)\n\nexternal substring : t -> from:int -> to_:int -> t = \"substring\"\n  [@@bs.send]\n(**\n`substring(str, ~from: start, ~to_: finish)` returns characters `start` up to\nbut not including finish from `str`.\n- If `start` is less than zero, it is treated as zero.\n- If `finish` is zero or negative, the empty string is returned.\n- If `start` is greater than `finish`, the `start` and `finish` points are swapped.\n\nSee [`String.substring`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring) on MDN.\n\n```res example\nJs.String2.substring(\"playground\", ~from=3, ~to_=6) == \"ygr\"\nJs.String2.substring(\"playground\", ~from=6, ~to_=3) == \"ygr\"\nJs.String2.substring(\"playground\", ~from=4, ~to_=12) == \"ground\"\n```\n*)\n\nexternal substringToEnd : t -> from:int -> t = \"substring\"\n  [@@bs.send]\n(**\n`substringToEnd(str, ~from: start)` returns the substring of `str` from\nposition `start` to the end.\n- If `start` is less than or equal to zero, the entire string is returned.\n- If `start` is greater than or equal to the length of `str`, the empty string is returned.\n\nSee [`String.substring`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substring) on MDN.\n\n```res example\nJs.String2.substringToEnd(\"playground\", ~from=4) == \"ground\"\nJs.String2.substringToEnd(\"playground\", ~from=-3) == \"playground\"\nJs.String2.substringToEnd(\"playground\", ~from=12) == \"\"\n```\n*)\n\nexternal toLowerCase : t -> t = \"toLowerCase\"\n  [@@bs.send]\n(**\n`toLowerCase(str)` converts `str` to lower case using the locale-insensitive\ncase mappings in the Unicode Character Database. Notice that the conversion can\ngive different results depending upon context, for example with the Greek\nletter sigma, which has two different lower case forms; one when it is the last\ncharacter in a string and another when it is not.\n\nSee [`String.toLowerCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase)\non MDN.\n\n```res example\nJs.String2.toLowerCase(\"ABC\") == \"abc\"\nJs.String2.toLowerCase(`Î£Î `) == `ÏƒÏ€`\nJs.String2.toLowerCase(`Î Î£`) == `Ï€Ï‚`\n```\n*)\n\nexternal toLocaleLowerCase : t -> t = \"toLocaleLowerCase\"\n  [@@bs.send]\n(**\n`toLocaleLowerCase(str)` converts `str` to lower case using the current locale.\nSee [`String.toLocaleLowerCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleLowerCase)\non MDN.\n*)\n\nexternal toUpperCase : t -> t = \"toUpperCase\"\n  [@@bs.send]\n(**\n`toUpperCase(str)` converts `str` to upper case using the locale-insensitive\ncase mappings in the Unicode Character Database. Notice that the conversion can\nexpand the number of letters in the result; for example the German ÃŸ\ncapitalizes to two Ses in a row.\n\nSee [`String.toUpperCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase)\non MDN.\n\n```res example\nJs.String2.toUpperCase(\"abc\") == \"ABC\"\nJs.String2.toUpperCase(`StraÃŸe`) == `STRASSE`\nJs.String2.toUpperCase(`Ï€Ï‚`) == `Î Î£`\n```\n*)\n\nexternal toLocaleUpperCase : t -> t = \"toLocaleUpperCase\"\n  [@@bs.send]\n(**\n`toLocaleUpperCase(str)` converts `str` to upper case using the current locale.\nSee [`String.to:LocaleUpperCase`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toLocaleUpperCase)\non MDN.\n*)\n\nexternal trim : t -> t = \"trim\"\n  [@@bs.send]\n(**\n`trim(str)` returns a string that is `str` with whitespace stripped from both\nends. Internal whitespace is not removed.\n\nSee [`String.trim`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/trim)\non MDN.\n\n```res example\nJs.String2.trim(\"   abc def   \") == \"abc def\"\nJs.String2.trim(\"\\n\\r\\t abc def \\n\\n\\t\\r \") == \"abc def\"\n```\n*)\n\n(* HTML wrappers *)\n\nexternal anchor : t -> t -> t = \"anchor\"\n  [@@bs.send]\n(**\n`anchor(anchorText, anchorName)` creates a string with an HTML `<a>` element\nwith name attribute of `anchorName` and `anchorText` as its content. Please do\nnot use this method, as it has been removed from the relevant web standards.\n\nSee [`String.anchor`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/anchor)\non MDN.\n\n```res example\nJs.String2.anchor(\"Page One\", \"page1\") == \"<a name=\\\"page1\\\">Page One</a>\"\n```\n*)\n\nexternal link : t -> t -> t = \"link\"\n  [@@bs.send]\n(**\nES2015: `link(linkText, urlText)` creates a string with an HTML `<a>` element\nwith href attribute of `urlText` and `linkText` as its content. Please do not\nuse this method, as it has been removed from the relevant web standards. See\n[`String.link`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/link)\non MDN.\n\n```res example\nJs.String2.link(\"Go to page two\", \"page2.html\") == \"<a href=\\\"page2.html\\\">Go to page two</a>\"\n```\n*)\n\n(* FIXME: we should not encourage people to use [%identity], better\n    to provide something using [@@bs.val] so that we can track such\n    casting\n*)\nexternal castToArrayLike : t -> t Js_array2.array_like = \"%identity\"\n(**\nCasts its argument to an `array_like` entity that can be processed by functions\nsuch as `Js.Array2.fromMap()`\n\n```res example\nlet s = \"abcde\"\nlet arr = Js.Array2.fromMap(Js.String2.castToArrayLike(s), x => x)\narr == [\"a\", \"b\", \"c\", \"d\", \"e\"]\n```\n*)\n"}}}
bs-platform could not be found
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/js_string2.ml"}}}
bs-platform could not be found
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/belt_Option.mli","languageId":"ocaml","version":1,"text":"(* Copyright (C) 2017 Authors of ReScript\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU Lesser General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * In addition to the permissions granted to you by the LGPL, you may combine\n * or link a \"work that uses the Library\" with a publicly distributed version\n * of this file to produce a combined library or application, then distribute\n * that combined work under the terms of your choosing, with no requirement\n * to comply with the obligations normally placed on you by section 4 of the\n * LGPL version 3 (or the corresponding section of a later version of the LGPL\n * should you choose to use a later version).\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA. *)\n\n(**\n   In Belt we represent the existence and nonexistence of a value by wrapping it\n   with the `option` type.  In order to make it a bit more convenient to work with\n   option-types, Belt provides utility-functions for it.\n\n   The `option` type is a part of the ReScript standard library which is defined like this:\n\n   ```res sig\n   type option<'a> = None | Some('a)\n   ```\n\n   ```res example\n   let someString: option<string> = Some(\"hello\")\n   ```\n*)\n\n\nval keepU : 'a option -> ('a -> bool [@bs]) -> 'a option\n(** Uncurried version of `keep` *)\n\nval keep : 'a option -> ('a -> bool) -> 'a option\n(**\n   If `optionValue` is `Some(value)` and `p(value) = true`, it returns `Some(value)`; otherwise returns `None`\n\n   ```res example\n   Belt.Option.keep(Some(10), x => x > 5) /* returns `Some(10)` */\n   Belt.Option.keep(Some(4), x => x > 5) /* returns `None` */\n   Belt.Option.keep(None, x => x > 5) /* returns `None` */\n   ```\n*)\n\nval forEachU : 'a option -> ('a -> unit [@bs]) -> unit\n(** Uncurried version of `forEach` *)\n\nval forEach : 'a option -> ('a -> unit) -> unit\n(**\n   If `optionValue` is `Some(value`), it calls `f(value)`; otherwise returns `()`\n\n   ```res example\n   Belt.Option.forEach(Some(\"thing\"), x => Js.log(x)) /* logs \"thing\" */\n   Belt.Option.forEach(None, x => Js.log(x)) /* returns () */\n   ```\n*)\n\nval getExn : 'a option -> 'a\n(**\n   Raises an Error in case `None` is provided. Use with care.\n\n   ```res example\n   Belt.Option.getExn(Some(3)) /* 3 */\n\n   Belt.Option.getExn(None) /* Raises an Error */\n   ```\n*)\n\nexternal getUnsafe :\n  'a option -> 'a = \"%identity\"\n(**\n   `getUnsafe(x)` returns `x`\n\n   This is an unsafe operation, it assumes `x` is neither `None`\n   nor `Some(None(...)))`\n*)\n\nval mapWithDefaultU : 'a option -> 'b -> ('a -> 'b [@bs]) -> 'b\n(** Uncurried version of `mapWithDefault` *)\n\nval mapWithDefault : 'a option -> 'b -> ('a -> 'b) -> 'b\n(**\n   If `optionValue` is of `Some(value)`,\n   this function returns that value applied with `f`, in other words `f(value)`.\n\n   If `optionValue` is `None`, the default is returned.\n\n   ```res example\n   let someValue = Some(3)\n   someValue->Belt.Option.mapWithDefault(0, x => x + 5) /* 8 */\n\n   let noneValue = None\n   noneValue->Belt.Option.mapWithDefault(0, x => x + 5) /* 0 */\n   ```\n*)\n\nval mapU : 'a option -> ('a -> 'b [@bs]) -> 'b option\n(** Uncurried version of `map` *)\n\nval map : 'a option -> ('a -> 'b) -> 'b option\n(**\n   If `optionValue` is `Some(value)` this returns `f(value)`, otherwise it returns `None`.\n\n   ```res example\n   Belt.Option.map(Some(3), x => x * x) /* Some(9) */\n\n   Belt.Option.map(None, x => x * x) /* None */\n   ```\n*)\n\nval flatMapU : 'a option -> ('a -> 'b option [@bs]) -> 'b option\n(** Uncurried version of `flatMap` *)\n\nval flatMap : 'a option -> ('a -> 'b option) -> 'b option\n(**\n   If `optionValue` is `Some(value)`, returns `f(value)`, otherwise returns\n   `None`.<br/>\n   The function `f` must have a return type of `option<'b>`.\n\n   ```res example\n   let addIfAboveOne = value =>\n     if (value > 1) {\n       Some(value + 1)\n     } else {\n       None\n     }\n\n   Belt.Option.flatMap(Some(2), addIfAboveOne) /* Some(3) */\n\n   Belt.Option.flatMap(Some(-4), addIfAboveOne) /* None */\n\n   Belt.Option.flatMap(None, addIfAboveOne) /* None */\n   ```\n*)\n\nval getWithDefault : 'a option -> 'a -> 'a\n(**\n   If `optionalValue` is `Some(value)`, returns `value`, otherwise default.\n\n   ```res example\n   Belt.Option.getWithDefault(None, \"Banana\") /* Banana */\n\n   Belt.Option.getWithDefault(Some(\"Apple\"), \"Banana\") /* Apple */\n   ```\n\n   ```res example\n   let greet = (firstName: option<string>) =>\n     \"Greetings \" ++ firstName->Belt.Option.getWithDefault(\"Anonymous\")\n\n   Some(\"Jane\")->greet /* \"Greetings Jane\" */\n\n   None->greet /* \"Greetings Anonymous\" */\n   ```\n*)\n\nval orElse : 'a option -> 'a option -> 'a option\n(**\n   `orElse optionalValue otherOptional`\n\n   If `optionalValue` is `Some value`, returns `Some value`, otherwise `otherOptional`\n\n   ```\n   orElse (Some 1812) (Some 1066) = Some 1812;;\n   orElse None (Some 1066) = Some 1066;;\n   orElse None None = None;;\n   ```\n*)\n\nval isSome : 'a option -> bool\n(**\n   Returns `true` if the argument is `Some(value)`, `false` otherwise.\n\n   ```res example\n   Belt.Option.isSome(None) /* false */\n\n   Belt.Option.isSome(Some(1)) /* true */\n   ```\n*)\n\nval isNone : 'a option -> bool\n(**\n   Returns `true` if the argument is `None`, `false` otherwise.\n\n   ```res example\n   Belt.Option.isNone(None) /* true */\n\n   Belt.Option.isNone(Some(1)) /* false */\n   ```\n*)\n\nval eqU : 'a option -> 'b option -> ('a -> 'b -> bool [@bs]) -> bool\n(**\n   Uncurried version of `eq`\n*)\n\nval eq : 'a option -> 'b option -> ('a -> 'b -> bool) -> bool\n(**\n   Evaluates two optional values for equality with respect to a predicate\n   function. If both `optValue1` and `optValue2` are `None`, returns `true`.\n   If one of the arguments is `Some(value)` and the other is `None`, returns\n   `false`.\n\n   If arguments are `Some(value1)` and `Some(value2)`, returns the result of\n   `predicate(value1, value2)`; the predicate function must return a bool.\n\n   ```res example\n   let clockEqual = (a, b) => mod(a, 12) == mod(b, 12)\n\n   open Belt.Option\n\n   eq(Some(3), Some(15), clockEqual) /* true */\n\n   eq(Some(3), None, clockEqual) /* false */\n\n   eq(None, Some(3), clockEqual) /* false */\n\n   eq(None, None, clockEqual) /* true */\n   ```\n*)\n\nval cmpU : 'a option -> 'b option -> ('a -> 'b -> int [@bs]) -> int\n(** Uncurried version of `cmp` *)\n\nval cmp : 'a option -> 'b option -> ('a -> 'b -> int) -> int\n(**\n   `cmp(optValue1, optValue2, comparisonFunction)` compares two optional values\n   with respect to given `comparisonFunction`.\n\n   If both `optValue1` and `optValue2` are `None`, it returns `0`.\n\n   If the first argument is `Some(value1)` and the second is `None`, returns `1`\n   (something is greater than nothing).\n\n   If the first argument is `None` and the second is `Some(value2)`, returns `-1`\n   (nothing is less than something).\n\n   If the arguments are `Some(value1)` and `Some(value2)`, returns the result of\n   `comparisonFunction(value1, value2)`; comparisonFunction takes two arguments\n   and returns `-1` if the first argument is less than the second, `0` if the\n   arguments are equal, and `1` if the first argument is greater than the second.\n\n   ```res example\n   let clockCompare = (a, b) => compare(mod(a, 12), mod(b, 12))\n\n   open Belt.Option\n\n   cmp(Some(3), Some(15), clockCompare) /* 0 */\n\n   cmp(Some(3), Some(14), clockCompare) /* 1 */\n\n   cmp(Some(2), Some(15), clockCompare) /* (-1) */\n\n   cmp(None, Some(15), clockCompare) /* (-1) */\n\n   cmp(Some(14), None, clockCompare) /* 1 */\n\n   cmp(None, None, clockCompare) /* 0 */\n   ```\n*)\n"}}}
bs-platform could not be found
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/belt_Option.mli"}}}
bs-platform could not be found
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/pervasives.mli","languageId":"ocaml","version":1,"text":"(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(** The initially opened module.\n\n   This module provides the basic operations over the built-in types\n   (numbers, booleans, byte sequences, strings, exceptions, references,\n   lists, arrays, input-output channels, ...).\n\n   This module is automatically opened at the beginning of each compilation.\n   All components of this module can therefore be referred by their short\n   name, without prefixing them by [Pervasives].\n*)\n\n\n(* Internal *)\nexternal __unsafe_cast : 'a -> 'b = \"%identity\"\n\n(** {1 Exceptions} *)\n\nexternal raise : exn -> 'a = \"%raise\"\n(** Raise the given exception value *)\n\nexternal raise_notrace : exn -> 'a = \"%raise_notrace\"\n(** A faster version [raise] which does not record the backtrace.\n    @since 4.02.0\n*)\n\nval invalid_arg : string -> 'a\n(** Raise exception [Invalid_argument] with the given string. *)\n\nval failwith : string -> 'a\n(** Raise exception [Failure] with the given string. *)\n\nexception Exit\n(** The [Exit] exception is not raised by any library function.  It is\n    provided for use in your programs. *)\n\n\n(** {1 Comparisons} *)\n\nexternal ( = ) : 'a -> 'a -> bool = \"%equal\"\n(** [e1 = e2] tests for structural equality of [e1] and [e2].\n   Mutable structures (e.g. references and arrays) are equal\n   if and only if their current contents are structurally equal,\n   even if the two mutable objects are not the same physical object.\n   Equality between functional values raises [Invalid_argument].\n   Equality between cyclic data structures may not terminate.\n   Left-associative operator at precedence level 4/11. *)\n\nexternal ( <> ) : 'a -> 'a -> bool = \"%notequal\"\n(** Negation of {!Pervasives.( = )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( < ) : 'a -> 'a -> bool = \"%lessthan\"\n(** See {!Pervasives.( >= )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( > ) : 'a -> 'a -> bool = \"%greaterthan\"\n(** See {!Pervasives.( >= )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( <= ) : 'a -> 'a -> bool = \"%lessequal\"\n(** See {!Pervasives.( >= )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( >= ) : 'a -> 'a -> bool = \"%greaterequal\"\n(** Structural ordering functions. These functions coincide with\n   the usual orderings over integers, characters, strings, byte sequences\n   and floating-point numbers, and extend them to a\n   total ordering over all types.\n   The ordering is compatible with [( = )]. As in the case\n   of [( = )], mutable structures are compared by contents.\n   Comparison between functional values raises [Invalid_argument].\n   Comparison between cyclic structures may not terminate.\n   Left-associative operator at precedence level 4/11. *)\n\nexternal compare : 'a -> 'a -> int = \"%compare\"\n(** [compare x y] returns [0] if [x] is equal to [y],\n   a negative integer if [x] is less than [y], and a positive integer\n   if [x] is greater than [y].  The ordering implemented by [compare]\n   is compatible with the comparison predicates [=], [<] and [>]\n   defined above,  with one difference on the treatment of the float value\n   {!Pervasives.nan}.  Namely, the comparison predicates treat [nan]\n   as different from any other float value, including itself;\n   while [compare] treats [nan] as equal to itself and less than any\n   other float value.  This treatment of [nan] ensures that [compare]\n   defines a total ordering relation.\n\n   [compare] applied to functional values may raise [Invalid_argument].\n   [compare] applied to cyclic structures may not terminate.\n\n   The [compare] function can be used as the comparison function\n   required by the {!Set.Make} and {!Map.Make} functors, as well as\n   the {!List.sort} and {!Array.sort} functions. *)\n\nexternal min : 'a -> 'a -> 'a = \"%bs_min\"\n(** Return the smaller of the two arguments.\n    The result is unspecified if one of the arguments contains\n    the float value [nan]. *)\n\nexternal max : 'a -> 'a -> 'a = \"%bs_max\"\n(** Return the greater of the two arguments.\n    The result is unspecified if one of the arguments contains\n    the float value [nan]. *)\n\nexternal ( == ) : 'a -> 'a -> bool = \"%eq\"\n(** [e1 == e2] tests for physical equality of [e1] and [e2].\n   On mutable types such as references, arrays, byte sequences, records with\n   mutable fields and objects with mutable instance variables,\n   [e1 == e2] is true if and only if physical modification of [e1]\n   also affects [e2].\n   On non-mutable types, the behavior of [( == )] is\n   implementation-dependent; however, it is guaranteed that\n   [e1 == e2] implies [compare e1 e2 = 0].\n   Left-associative operator at precedence level 4/11. *)\n\nexternal ( != ) : 'a -> 'a -> bool = \"%noteq\"\n(** Negation of {!Pervasives.( == )}.\n    Left-associative operator at precedence level 4/11. *)\n\n\n(** {1 Boolean operations} *)\n\nexternal not : bool -> bool = \"%boolnot\"\n(** The boolean negation. *)\n\nexternal ( && ) : bool -> bool -> bool = \"%sequand\"\n(** The boolean 'and'. Evaluation is sequential, left-to-right:\n   in [e1 && e2], [e1] is evaluated first, and if it returns [false],\n   [e2] is not evaluated at all.\n   Right-associative operator at precedence level 3/11. *)\n\n\nexternal ( || ) : bool -> bool -> bool = \"%sequor\"\n(** The boolean 'or'. Evaluation is sequential, left-to-right:\n   in [e1 || e2], [e1] is evaluated first, and if it returns [true],\n   [e2] is not evaluated at all.\n   Right-associative operator at precedence level 2/11.\n*)\n\n\n(** {1 Debugging} *)\n\nexternal __LOC__ : string = \"%loc_LOC\"\n(** [__LOC__] returns the location at which this expression appears in\n    the file currently being parsed by the compiler, with the standard\n    error format of OCaml: \"File %S, line %d, characters %d-%d\".\n    @since 4.02.0\n*)\n\nexternal __FILE__ : string = \"%loc_FILE\"\n(** [__FILE__] returns the name of the file currently being\n    parsed by the compiler.\n    @since 4.02.0\n*)\n\nexternal __LINE__ : int = \"%loc_LINE\"\n(** [__LINE__] returns the line number at which this expression\n    appears in the file currently being parsed by the compiler.\n    @since 4.02.0\n*)\n\nexternal __MODULE__ : string = \"%loc_MODULE\"\n(** [__MODULE__] returns the module name of the file being\n    parsed by the compiler.\n    @since 4.02.0\n*)\n\nexternal __POS__ : string * int * int * int = \"%loc_POS\"\n(** [__POS__] returns a tuple [(file,lnum,cnum,enum)], corresponding\n    to the location at which this expression appears in the file\n    currently being parsed by the compiler. [file] is the current\n    filename, [lnum] the line number, [cnum] the character position in\n    the line and [enum] the last character position in the line.\n    @since 4.02.0\n *)\n\nexternal __LOC_OF__ : 'a -> string * 'a = \"%loc_LOC\"\n(** [__LOC_OF__ expr] returns a pair [(loc, expr)] where [loc] is the\n    location of [expr] in the file currently being parsed by the\n    compiler, with the standard error format of OCaml: \"File %S, line\n    %d, characters %d-%d\".\n    @since 4.02.0\n*)\n\nexternal __LINE_OF__ : 'a -> int * 'a = \"%loc_LINE\"\n(** [__LINE__ expr] returns a pair [(line, expr)], where [line] is the\n    line number at which the expression [expr] appears in the file\n    currently being parsed by the compiler.\n    @since 4.02.0\n *)\n\nexternal __POS_OF__ : 'a -> (string * int * int * int) * 'a = \"%loc_POS\"\n(** [__POS_OF__ expr] returns a pair [(loc,expr)], where [loc] is a\n    tuple [(file,lnum,cnum,enum)] corresponding to the location at\n    which the expression [expr] appears in the file currently being\n    parsed by the compiler. [file] is the current filename, [lnum] the\n    line number, [cnum] the character position in the line and [enum]\n    the last character position in the line.\n    @since 4.02.0\n *)\n\n(** {1 Composition operators} *)\n\nexternal ( |> ) : 'a -> ('a -> 'b) -> 'b = \"%revapply\"\n(** Reverse-application operator: [x |> f |> g] is exactly equivalent\n to [g (f (x))].\n Left-associative operator at precedence level 4/11.\n   @since 4.01\n *)\n\nexternal ( @@ ) : ('a -> 'b) -> 'a -> 'b = \"%apply\"\n(** Application operator: [g @@ f @@ x] is exactly equivalent to\n [g (f (x))].\n Right-associative operator at precedence level 5/11.\n   @since 4.01\n*)\n\n(** {1 Integer arithmetic} *)\n\n(** Integers are 31 bits wide (or 63 bits on 64-bit processors).\n   All operations are taken modulo 2{^31} (or 2{^63}).\n   They do not fail on overflow. *)\n\nexternal ( ~- ) : int -> int = \"%negint\"\n(** Unary negation. You can also write [- e] instead of [~- e].\n    Unary operator at precedence level 9/11 for [- e]\n    and 11/11 for [~- e]. *)\n\nexternal ( ~+ ) : int -> int = \"%identity\"\n(** Unary addition. You can also write [+ e] instead of [~+ e].\n    Unary operator at precedence level 9/11 for [+ e]\n    and 11/11 for [~+ e].\n    @since 3.12.0\n*)\n\nexternal succ : int -> int = \"%succint\"\n(** [succ x] is [x + 1]. *)\n\nexternal pred : int -> int = \"%predint\"\n(** [pred x] is [x - 1]. *)\n\nexternal ( + ) : int -> int -> int = \"%addint\"\n(** Integer addition.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( - ) : int -> int -> int = \"%subint\"\n(** Integer subtraction.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( * ) : int -> int -> int = \"%mulint\"\n(** Integer multiplication.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( / ) : int -> int -> int = \"%divint\"\n(** Integer division.\n   Raise [Division_by_zero] if the second argument is 0.\n   Integer division rounds the real quotient of its arguments towards zero.\n   More precisely, if [x >= 0] and [y > 0], [x / y] is the greatest integer\n   less than or equal to the real quotient of [x] by [y].  Moreover,\n   [(- x) / y = x / (- y) = - (x / y)].\n   Left-associative operator at precedence level 7/11. *)\n\nexternal ( mod ) : int -> int -> int = \"%modint\"\n(** Integer remainder.  If [y] is not zero, the result\n   of [x mod y] satisfies the following properties:\n   [x = (x / y) * y + x mod y] and\n   [abs(x mod y) <= abs(y) - 1].\n   If [y = 0], [x mod y] raises [Division_by_zero].\n   Note that [x mod y] is negative only if [x < 0].\n   Raise [Division_by_zero] if [y] is zero.\n   Left-associative operator at precedence level 7/11. *)\n\nval abs : int -> int\n(** Return the absolute value of the argument.  Note that this may be\n  negative if the argument is [min_int]. *)\n\nval max_int : int\n(** The greatest representable integer. *)\n\nval min_int : int\n(** The smallest representable integer. *)\n\n\n(** {2 Bitwise operations} *)\n\nexternal ( land ) : int -> int -> int = \"%andint\"\n(** Bitwise logical and.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( lor ) : int -> int -> int = \"%orint\"\n(** Bitwise logical or.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( lxor ) : int -> int -> int = \"%xorint\"\n(** Bitwise logical exclusive or.\n    Left-associative operator at precedence level 7/11. *)\n\nval lnot : int -> int\n(** Bitwise logical negation. *)\n\nexternal ( lsl ) : int -> int -> int = \"%lslint\"\n(** [n lsl m] shifts [n] to the left by [m] bits.\n   The result is unspecified if [m < 0] or [m >= bitsize],\n   where [bitsize] is [32] on a 32-bit platform and\n   [64] on a 64-bit platform.\n   Right-associative operator at precedence level 8/11. *)\n\nexternal ( lsr ) : int -> int -> int = \"%lsrint\"\n(** [n lsr m] shifts [n] to the right by [m] bits.\n   This is a logical shift: zeroes are inserted regardless of\n   the sign of [n].\n   The result is unspecified if [m < 0] or [m >= bitsize].\n   Right-associative operator at precedence level 8/11. *)\n\nexternal ( asr ) : int -> int -> int = \"%asrint\"\n(** [n asr m] shifts [n] to the right by [m] bits.\n   This is an arithmetic shift: the sign bit of [n] is replicated.\n   The result is unspecified if [m < 0] or [m >= bitsize].\n   Right-associative operator at precedence level 8/11. *)\n\n\n(** {1 Floating-point arithmetic}\n\n   OCaml's floating-point numbers follow the\n   IEEE 754 standard, using double precision (64 bits) numbers.\n   Floating-point operations never raise an exception on overflow,\n   underflow, division by zero, etc.  Instead, special IEEE numbers\n   are returned as appropriate, such as [infinity] for [1.0 /. 0.0],\n   [neg_infinity] for [-1.0 /. 0.0], and [nan] ('not a number')\n   for [0.0 /. 0.0].  These special numbers then propagate through\n   floating-point computations as expected: for instance,\n   [1.0 /. infinity] is [0.0], and any arithmetic operation with [nan]\n   as argument returns [nan] as result.\n*)\n\nexternal ( ~-. ) : float -> float = \"%negfloat\"\n(** Unary negation. You can also write [-. e] instead of [~-. e].\n    Unary operator at precedence level 9/11 for [-. e]\n    and 11/11 for [~-. e]. *)\n\nexternal ( ~+. ) : float -> float = \"%identity\"\n(** Unary addition. You can also write [+. e] instead of [~+. e].\n    Unary operator at precedence level 9/11 for [+. e]\n    and 11/11 for [~+. e].\n    @since 3.12.0\n*)\n\nexternal ( +. ) : float -> float -> float = \"%addfloat\"\n(** Floating-point addition.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( -. ) : float -> float -> float = \"%subfloat\"\n(** Floating-point subtraction.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( *. ) : float -> float -> float = \"%mulfloat\"\n(** Floating-point multiplication.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( /. ) : float -> float -> float = \"%divfloat\"\n(** Floating-point division.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( ** ) : float -> float -> float =  \"pow\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Exponentiation. *)\n\nexternal sqrt : float -> float =  \"sqrt\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Square root. *)\n\nexternal exp : float -> float =  \"exp\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Exponential. *)\n\nexternal log : float -> float =  \"log\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Natural logarithm. *)\n\nexternal log10 : float -> float =  \"log10\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Base 10 logarithm. *)\n\nexternal expm1 : float -> float = \"?expm1_float\" \n(** [expm1 x] computes [exp x -. 1.0], giving numerically-accurate results\n    even if [x] is close to [0.0].\n    @since 3.12.0\n*)\n\nexternal log1p : float -> float =  \"log1p\" [@@bs.val] [@@bs.scope \"Math\"]\n(** [log1p x] computes [log(1.0 +. x)] (natural logarithm),\n    giving numerically-accurate results even if [x] is close to [0.0].\n    @since 3.12.0\n*)\n\nexternal cos : float -> float =  \"cos\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Cosine.  Argument is in radians. *)\n\nexternal sin : float -> float =  \"sin\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Sine.  Argument is in radians. *)\n\nexternal tan : float -> float =  \"tan\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Tangent.  Argument is in radians. *)\n\nexternal acos : float -> float =  \"acos\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Arc cosine.  The argument must fall within the range [[-1.0, 1.0]].\n    Result is in radians and is between [0.0] and [pi]. *)\n\nexternal asin : float -> float =  \"asin\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Arc sine.  The argument must fall within the range [[-1.0, 1.0]].\n    Result is in radians and is between [-pi/2] and [pi/2]. *)\n\nexternal atan : float -> float =  \"atan\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Arc tangent.\n    Result is in radians and is between [-pi/2] and [pi/2]. *)\n\nexternal atan2 : float -> float -> float =  \"atan2\" [@@bs.val] [@@bs.scope \"Math\"]\n(** [atan2 y x] returns the arc tangent of [y /. x].  The signs of [x]\n    and [y] are used to determine the quadrant of the result.\n    Result is in radians and is between [-pi] and [pi]. *)\n\nexternal hypot : float -> float -> float\n               = \"?hypot_float\"\n(** [hypot x y] returns [sqrt(x *. x + y *. y)], that is, the length\n  of the hypotenuse of a right-angled triangle with sides of length\n  [x] and [y], or, equivalently, the distance of the point [(x,y)]\n  to origin.\n  @since 4.00.0  *)\n\nexternal cosh : float -> float =  \"cosh\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Hyperbolic cosine.  Argument is in radians. *)\n\nexternal sinh : float -> float =  \"sinh\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Hyperbolic sine.  Argument is in radians. *)\n\nexternal tanh : float -> float =  \"tanh\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Hyperbolic tangent.  Argument is in radians. *)\n\nexternal ceil : float -> float =  \"ceil\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Round above to an integer value.\n    [ceil f] returns the least integer value greater than or equal to [f].\n    The result is returned as a float. *)\n\nexternal floor : float -> float =  \"floor\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Round below to an integer value.\n    [floor f] returns the greatest integer value less than or\n    equal to [f].\n    The result is returned as a float. *)\n\nexternal abs_float : float -> float = \"abs\" [@@bs.val] [@@bs.scope \"Math\"]\n(** [abs_float f] returns the absolute value of [f]. *)\n\nexternal copysign : float -> float -> float\n                  = \"?copysign_float\" \n(** [copysign x y] returns a float whose absolute value is that of [x]\n  and whose sign is that of [y].  If [x] is [nan], returns [nan].\n  If [y] is [nan], returns either [x] or [-. x], but it is not\n  specified which.\n  @since 4.00.0  *)\n\nexternal mod_float : float -> float -> float = \"?fmod_float\" \n(** [mod_float a b] returns the remainder of [a] with respect to\n   [b].  The returned value is [a -. n *. b], where [n]\n   is the quotient [a /. b] rounded towards zero to an integer. *)\n\nexternal frexp : float -> float * int = \"?frexp_float\"\n(** [frexp f] returns the pair of the significant\n   and the exponent of [f].  When [f] is zero, the\n   significant [x] and the exponent [n] of [f] are equal to\n   zero.  When [f] is non-zero, they are defined by\n   [f = x *. 2 ** n] and [0.5 <= x < 1.0]. *)\n\n\nexternal ldexp : float -> int -> float =\n  \"?ldexp_float\" \n(** [ldexp x n] returns [x *. 2 ** n]. *)\n\nexternal modf : float -> float * float = \"?modf_float\"\n(** [modf f] returns the pair of the fractional and integral\n   part of [f]. *)\n\nexternal float : int -> float = \"%floatofint\"\n(** Same as {!Pervasives.float_of_int}. *)\n\nexternal float_of_int : int -> float = \"%floatofint\"\n(** Convert an integer to floating-point. *)\n\nexternal truncate : float -> int = \"%intoffloat\"\n(** Same as {!Pervasives.int_of_float}. *)\n\nexternal int_of_float : float -> int = \"%intoffloat\"\n(** Truncate the given floating-point number to an integer.\n   The result is unspecified if the argument is [nan] or falls outside the\n   range of representable integers. *)\n\nval infinity : float\n(** Positive infinity. *)\n\nval neg_infinity : float\n(** Negative infinity. *)\n\n\nexternal nan : float = \"NaN\" [@@bs.val]  [@@bs.scope \"Number\"]\n(* we could also use [0.  /. 0.] *)\n(** A special floating-point value denoting the result of an\n   undefined operation such as [0.0 /. 0.0].  Stands for\n   'not a number'.  Any floating-point operation with [nan] as\n   argument returns [nan] as result.  As for floating-point comparisons,\n   [=], [<], [<=], [>] and [>=] return [false] and [<>] returns [true]\n   if one or both of their arguments is [nan]. *)\n\nval max_float : float\n(** The largest positive finite value of type [float]. *)\n\nval min_float : float\n(** The smallest positive, non-zero, non-denormalized value of type [float]. *)\n\nval epsilon_float : float\n(** The difference between [1.0] and the smallest exactly representable\n    floating-point number greater than [1.0]. *)\n\n\ntype fpclass =\n    FP_normal           (** Normal number, none of the below *)\n  | FP_subnormal        (** Number very close to 0.0, has reduced precision *)\n  | FP_zero             (** Number is 0.0 or -0.0 *)\n  | FP_infinite         (** Number is positive or negative infinity *)\n  | FP_nan              (** Not a number: result of an undefined operation *)\n(** The five classes of floating-point numbers, as determined by\n   the {!Pervasives.classify_float} function. *)\n\nval classify_float : float -> fpclass\n(** Return the class of the given floating-point number:\n   normal, subnormal, zero, infinite, or not a number. *)\n\n\n(** {1 String operations}\n\n   More string operations are provided in module {!String}.\n*)\nexternal (^) : string -> string -> string = \"#string_append\"\n(** String concatenation.\n    Right-associative operator at precedence level 5/11. *)\n\n\n(** {1 Character operations}\n\n   More character operations are provided in module {!Char}.\n*)\n\nexternal int_of_char : char -> int = \"%identity\"\n(** Return the ASCII code of the argument. *)\n\nval char_of_int : int -> char\n(** Return the character with the given ASCII code.\n   Raise [Invalid_argument \"char_of_int\"] if the argument is\n   outside the range 0--255. *)\n\n\n(** {1 Unit operations} *)\n\nexternal ignore : 'a -> unit = \"%ignore\"\n(** Discard the value of its argument and return [()].\n   For instance, [ignore(f x)] discards the result of\n   the side-effecting function [f].  It is equivalent to\n   [f x; ()], except that the latter may generate a\n   compiler warning; writing [ignore(f x)] instead\n   avoids the warning. *)\n\n\n(** {1 String conversion functions} *)\n\nval string_of_bool : bool -> string\n(** Return the string representation of a boolean. As the returned values\n   may be shared, the user should not modify them directly.\n*)\n\nval bool_of_string : string -> bool\n(** Convert the given string to a boolean.\n   Raise [Invalid_argument \"bool_of_string\"] if the string is not\n   [\"true\"] or [\"false\"]. *)\n\nval bool_of_string_opt: string -> bool option\n(** Convert the given string to a boolean.\n    Return [None] if the string is not\n    [\"true\"] or [\"false\"].\n    @since 4.05\n*)\n\n\nexternal string_of_int : int -> string = \"String\" [@@bs.val]\n(** Return the string representation of an integer, in decimal. *)\n\nexternal int_of_string : string -> int = \"?int_of_string\"\n(** Convert the given string to an integer.\n   The string is read in decimal (by default, or if the string \n   begins with [0u]), in hexadecimal (if it begins with [0x] or\n   [0X]), in octal (if it begins with [0o] or [0O]), or in binary\n   (if it begins with [0b] or [0B]).\n\n   The [0u] prefix reads the input as an unsigned integer in the range\n   [[0, 2*max_int+1]].  If the input exceeds {!max_int}\n   it is converted to the signed integer\n   [min_int + input - max_int - 1].\n\n   The [_] (underscore) character can appear anywhere in the string\n   and is ignored.\n   Raise [Failure \"int_of_string\"] if the given string is not\n   a valid representation of an integer, or if the integer represented\n   exceeds the range of integers representable in type [int]. *)\n\n\nval int_of_string_opt: string -> int option\n(** Same as [int_of_string], but returns [None] instead of raising.\n    @since 4.05\n*)\n\nval string_of_float : float -> string\n[@@ocaml.deprecated \"Please use Js.Float.toString instead, string_of_float generates unparseable floats\"]\n(** Return the string representation of a floating-point number. *)\n\nexternal float_of_string : string -> float = \"?float_of_string\"\n(** Convert the given string to a float.  The string is read in decimal\n   (by default) or in hexadecimal (marked by [0x] or [0X]).\n   The format of decimal floating-point numbers is\n   [ [-] dd.ddd (e|E) [+|-] dd ], where [d] stands for a decimal digit.\n   The format of hexadecimal floating-point numbers is\n   [ [-] 0(x|X) hh.hhh (p|P) [+|-] dd ], where [h] stands for an\n   hexadecimal digit and [d] for a decimal digit.\n   In both cases, at least one of the integer and fractional parts must be\n   given; the exponent part is optional.\n   The [_] (underscore) character can appear anywhere in the string\n   and is ignored.\n   Depending on the execution platforms, other representations of\n   floating-point numbers can be accepted, but should not be relied upon.\n   Raise [Failure \"float_of_string\"] if the given string is not a valid\n   representation of a float. *)\n\nval float_of_string_opt: string -> float option\n(** Same as [float_of_string], but returns [None] instead of raising.\n    @since 4.05\n*)\n\n(** {1 Pair operations} *)\n\nexternal fst : 'a * 'b -> 'a = \"%field0\"\n(** Return the first component of a pair. *)\n\nexternal snd : 'a * 'b -> 'b = \"%field1\"\n(** Return the second component of a pair. *)\n\n\n(** {1 List operations}\n\n   More list operations are provided in module {!List}.\n*)\n\nval ( @ ) : 'a list -> 'a list -> 'a list\n[@@ocaml.deprecated \"Use Belt.List.append instead\"]    \n(** List concatenation.  Tail-recursive (length of the first argument).\n    Right-associative operator at precedence level 5/11. *)\n\n\ntype int32 = int\n\n\n\n\n\nval print_string : string -> unit\n(** Print a string on standard output. *)\n\n\nval print_int : int -> unit\n(** Print an integer, in decimal, on standard output. *)\n\nval print_float : float -> unit\n(** Print a floating-point number, in decimal, on standard output. *)\nexternal print_endline : string -> unit = \"log\" \n[@@bs.val] [@@bs.scope \"console\"]\n(** Print a string, followed by a newline character, on\n   standard output and flush standard output. *)\n\nval print_newline : unit -> unit\n(** Print a newline character on standard output, and flush\n   standard output. This can be used to simulate line\n   buffering of standard output. *)\n\n\nexternal prerr_endline : string -> unit = \"error\" \n[@@bs.val] [@@bs.scope \"console\"]\n(** Print a string, followed by a newline character on standard\n   error and flush standard error. *)\n\nval prerr_newline : unit -> unit\n(** Print a newline character on standard error, and flush\n   standard error. *)\n\n\n\n\n\n(** {1 References} *)\n\ntype 'a ref = { mutable contents : 'a }\n(** The type of references (mutable indirection cells) containing\n   a value of type ['a]. *)\n\nexternal ref : 'a -> 'a ref = \"%makemutable\"\n(** Return a fresh reference containing the given value. *)\n\nexternal ( ! ) : 'a ref -> 'a = \"%bs_ref_field0\"\n(** [!r] returns the current contents of reference [r].\n   Equivalent to [fun r -> r.contents].\n   Unary operator at precedence level 11/11.*)\n\nexternal ( := ) : 'a ref -> 'a -> unit = \"%bs_ref_setfield0\"\n(** [r := a] stores the value of [a] in reference [r].\n   Equivalent to [fun r v -> r.contents <- v].\n   Right-associative operator at precedence level 1/11. *)\n\nexternal incr : int ref -> unit = \"%incr\"\n(** Increment the integer contained in the given reference.\n   Equivalent to [fun r -> r := succ !r]. *)\n\nexternal decr : int ref -> unit = \"%decr\"\n(** Decrement the integer contained in the given reference.\n   Equivalent to [fun r -> r := pred !r]. *)\n\n(** {1 Result type} *)\n\n(** @since 4.03.0 *)\ntype ('a, 'b) result = ('a, 'b) Belt.Result.t =\n  | Ok of 'a\n  | Error of 'b\n\n\n(** {1 Program termination} *)\n\nval exit : int -> 'a\n(** Terminate the process, returning the given status code\n   to the operating system: usually 0 to indicate no errors,\n   and a small positive integer to indicate failure.\n   All open output channels are flushed with [flush_all].\n   An implicit [exit 0] is performed each time a program\n   terminates normally.  An implicit [exit 2] is performed if the program\n   terminates early because of an uncaught exception. *)\n\nval at_exit : (unit -> unit) -> unit\n(** Register the given function to be called at program termination\n   time. The functions registered with [at_exit] will be called when\n   the program does any of the following:\n   - executes {!Pervasives.exit}\n   - terminates, either normally or because of an uncaught\n     exception\n   - executes the C function [caml_shutdown].\n   The functions are called in 'last in, first out' order: the\n   function most recently added with [at_exit] is called first. *)\n\n(**/**)\n\nval valid_float_lexem : string -> string\n"}}}
bs-platform could not be found
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/pervasives.mli"}}}
bs-platform could not be found
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/pervasives.mli","languageId":"ocaml","version":1,"text":"(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(** The initially opened module.\n\n   This module provides the basic operations over the built-in types\n   (numbers, booleans, byte sequences, strings, exceptions, references,\n   lists, arrays, input-output channels, ...).\n\n   This module is automatically opened at the beginning of each compilation.\n   All components of this module can therefore be referred by their short\n   name, without prefixing them by [Pervasives].\n*)\n\n\n(* Internal *)\nexternal __unsafe_cast : 'a -> 'b = \"%identity\"\n\n(** {1 Exceptions} *)\n\nexternal raise : exn -> 'a = \"%raise\"\n(** Raise the given exception value *)\n\nexternal raise_notrace : exn -> 'a = \"%raise_notrace\"\n(** A faster version [raise] which does not record the backtrace.\n    @since 4.02.0\n*)\n\nval invalid_arg : string -> 'a\n(** Raise exception [Invalid_argument] with the given string. *)\n\nval failwith : string -> 'a\n(** Raise exception [Failure] with the given string. *)\n\nexception Exit\n(** The [Exit] exception is not raised by any library function.  It is\n    provided for use in your programs. *)\n\n\n(** {1 Comparisons} *)\n\nexternal ( = ) : 'a -> 'a -> bool = \"%equal\"\n(** [e1 = e2] tests for structural equality of [e1] and [e2].\n   Mutable structures (e.g. references and arrays) are equal\n   if and only if their current contents are structurally equal,\n   even if the two mutable objects are not the same physical object.\n   Equality between functional values raises [Invalid_argument].\n   Equality between cyclic data structures may not terminate.\n   Left-associative operator at precedence level 4/11. *)\n\nexternal ( <> ) : 'a -> 'a -> bool = \"%notequal\"\n(** Negation of {!Pervasives.( = )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( < ) : 'a -> 'a -> bool = \"%lessthan\"\n(** See {!Pervasives.( >= )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( > ) : 'a -> 'a -> bool = \"%greaterthan\"\n(** See {!Pervasives.( >= )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( <= ) : 'a -> 'a -> bool = \"%lessequal\"\n(** See {!Pervasives.( >= )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( >= ) : 'a -> 'a -> bool = \"%greaterequal\"\n(** Structural ordering functions. These functions coincide with\n   the usual orderings over integers, characters, strings, byte sequences\n   and floating-point numbers, and extend them to a\n   total ordering over all types.\n   The ordering is compatible with [( = )]. As in the case\n   of [( = )], mutable structures are compared by contents.\n   Comparison between functional values raises [Invalid_argument].\n   Comparison between cyclic structures may not terminate.\n   Left-associative operator at precedence level 4/11. *)\n\nexternal compare : 'a -> 'a -> int = \"%compare\"\n(** [compare x y] returns [0] if [x] is equal to [y],\n   a negative integer if [x] is less than [y], and a positive integer\n   if [x] is greater than [y].  The ordering implemented by [compare]\n   is compatible with the comparison predicates [=], [<] and [>]\n   defined above,  with one difference on the treatment of the float value\n   {!Pervasives.nan}.  Namely, the comparison predicates treat [nan]\n   as different from any other float value, including itself;\n   while [compare] treats [nan] as equal to itself and less than any\n   other float value.  This treatment of [nan] ensures that [compare]\n   defines a total ordering relation.\n\n   [compare] applied to functional values may raise [Invalid_argument].\n   [compare] applied to cyclic structures may not terminate.\n\n   The [compare] function can be used as the comparison function\n   required by the {!Set.Make} and {!Map.Make} functors, as well as\n   the {!List.sort} and {!Array.sort} functions. *)\n\nexternal min : 'a -> 'a -> 'a = \"%bs_min\"\n(** Return the smaller of the two arguments.\n    The result is unspecified if one of the arguments contains\n    the float value [nan]. *)\n\nexternal max : 'a -> 'a -> 'a = \"%bs_max\"\n(** Return the greater of the two arguments.\n    The result is unspecified if one of the arguments contains\n    the float value [nan]. *)\n\nexternal ( == ) : 'a -> 'a -> bool = \"%eq\"\n(** [e1 == e2] tests for physical equality of [e1] and [e2].\n   On mutable types such as references, arrays, byte sequences, records with\n   mutable fields and objects with mutable instance variables,\n   [e1 == e2] is true if and only if physical modification of [e1]\n   also affects [e2].\n   On non-mutable types, the behavior of [( == )] is\n   implementation-dependent; however, it is guaranteed that\n   [e1 == e2] implies [compare e1 e2 = 0].\n   Left-associative operator at precedence level 4/11. *)\n\nexternal ( != ) : 'a -> 'a -> bool = \"%noteq\"\n(** Negation of {!Pervasives.( == )}.\n    Left-associative operator at precedence level 4/11. *)\n\n\n(** {1 Boolean operations} *)\n\nexternal not : bool -> bool = \"%boolnot\"\n(** The boolean negation. *)\n\nexternal ( && ) : bool -> bool -> bool = \"%sequand\"\n(** The boolean 'and'. Evaluation is sequential, left-to-right:\n   in [e1 && e2], [e1] is evaluated first, and if it returns [false],\n   [e2] is not evaluated at all.\n   Right-associative operator at precedence level 3/11. *)\n\n\nexternal ( || ) : bool -> bool -> bool = \"%sequor\"\n(** The boolean 'or'. Evaluation is sequential, left-to-right:\n   in [e1 || e2], [e1] is evaluated first, and if it returns [true],\n   [e2] is not evaluated at all.\n   Right-associative operator at precedence level 2/11.\n*)\n\n\n(** {1 Debugging} *)\n\nexternal __LOC__ : string = \"%loc_LOC\"\n(** [__LOC__] returns the location at which this expression appears in\n    the file currently being parsed by the compiler, with the standard\n    error format of OCaml: \"File %S, line %d, characters %d-%d\".\n    @since 4.02.0\n*)\n\nexternal __FILE__ : string = \"%loc_FILE\"\n(** [__FILE__] returns the name of the file currently being\n    parsed by the compiler.\n    @since 4.02.0\n*)\n\nexternal __LINE__ : int = \"%loc_LINE\"\n(** [__LINE__] returns the line number at which this expression\n    appears in the file currently being parsed by the compiler.\n    @since 4.02.0\n*)\n\nexternal __MODULE__ : string = \"%loc_MODULE\"\n(** [__MODULE__] returns the module name of the file being\n    parsed by the compiler.\n    @since 4.02.0\n*)\n\nexternal __POS__ : string * int * int * int = \"%loc_POS\"\n(** [__POS__] returns a tuple [(file,lnum,cnum,enum)], corresponding\n    to the location at which this expression appears in the file\n    currently being parsed by the compiler. [file] is the current\n    filename, [lnum] the line number, [cnum] the character position in\n    the line and [enum] the last character position in the line.\n    @since 4.02.0\n *)\n\nexternal __LOC_OF__ : 'a -> string * 'a = \"%loc_LOC\"\n(** [__LOC_OF__ expr] returns a pair [(loc, expr)] where [loc] is the\n    location of [expr] in the file currently being parsed by the\n    compiler, with the standard error format of OCaml: \"File %S, line\n    %d, characters %d-%d\".\n    @since 4.02.0\n*)\n\nexternal __LINE_OF__ : 'a -> int * 'a = \"%loc_LINE\"\n(** [__LINE__ expr] returns a pair [(line, expr)], where [line] is the\n    line number at which the expression [expr] appears in the file\n    currently being parsed by the compiler.\n    @since 4.02.0\n *)\n\nexternal __POS_OF__ : 'a -> (string * int * int * int) * 'a = \"%loc_POS\"\n(** [__POS_OF__ expr] returns a pair [(loc,expr)], where [loc] is a\n    tuple [(file,lnum,cnum,enum)] corresponding to the location at\n    which the expression [expr] appears in the file currently being\n    parsed by the compiler. [file] is the current filename, [lnum] the\n    line number, [cnum] the character position in the line and [enum]\n    the last character position in the line.\n    @since 4.02.0\n *)\n\n(** {1 Composition operators} *)\n\nexternal ( |> ) : 'a -> ('a -> 'b) -> 'b = \"%revapply\"\n(** Reverse-application operator: [x |> f |> g] is exactly equivalent\n to [g (f (x))].\n Left-associative operator at precedence level 4/11.\n   @since 4.01\n *)\n\nexternal ( @@ ) : ('a -> 'b) -> 'a -> 'b = \"%apply\"\n(** Application operator: [g @@ f @@ x] is exactly equivalent to\n [g (f (x))].\n Right-associative operator at precedence level 5/11.\n   @since 4.01\n*)\n\n(** {1 Integer arithmetic} *)\n\n(** Integers are 31 bits wide (or 63 bits on 64-bit processors).\n   All operations are taken modulo 2{^31} (or 2{^63}).\n   They do not fail on overflow. *)\n\nexternal ( ~- ) : int -> int = \"%negint\"\n(** Unary negation. You can also write [- e] instead of [~- e].\n    Unary operator at precedence level 9/11 for [- e]\n    and 11/11 for [~- e]. *)\n\nexternal ( ~+ ) : int -> int = \"%identity\"\n(** Unary addition. You can also write [+ e] instead of [~+ e].\n    Unary operator at precedence level 9/11 for [+ e]\n    and 11/11 for [~+ e].\n    @since 3.12.0\n*)\n\nexternal succ : int -> int = \"%succint\"\n(** [succ x] is [x + 1]. *)\n\nexternal pred : int -> int = \"%predint\"\n(** [pred x] is [x - 1]. *)\n\nexternal ( + ) : int -> int -> int = \"%addint\"\n(** Integer addition.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( - ) : int -> int -> int = \"%subint\"\n(** Integer subtraction.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( * ) : int -> int -> int = \"%mulint\"\n(** Integer multiplication.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( / ) : int -> int -> int = \"%divint\"\n(** Integer division.\n   Raise [Division_by_zero] if the second argument is 0.\n   Integer division rounds the real quotient of its arguments towards zero.\n   More precisely, if [x >= 0] and [y > 0], [x / y] is the greatest integer\n   less than or equal to the real quotient of [x] by [y].  Moreover,\n   [(- x) / y = x / (- y) = - (x / y)].\n   Left-associative operator at precedence level 7/11. *)\n\nexternal ( mod ) : int -> int -> int = \"%modint\"\n(** Integer remainder.  If [y] is not zero, the result\n   of [x mod y] satisfies the following properties:\n   [x = (x / y) * y + x mod y] and\n   [abs(x mod y) <= abs(y) - 1].\n   If [y = 0], [x mod y] raises [Division_by_zero].\n   Note that [x mod y] is negative only if [x < 0].\n   Raise [Division_by_zero] if [y] is zero.\n   Left-associative operator at precedence level 7/11. *)\n\nval abs : int -> int\n(** Return the absolute value of the argument.  Note that this may be\n  negative if the argument is [min_int]. *)\n\nval max_int : int\n(** The greatest representable integer. *)\n\nval min_int : int\n(** The smallest representable integer. *)\n\n\n(** {2 Bitwise operations} *)\n\nexternal ( land ) : int -> int -> int = \"%andint\"\n(** Bitwise logical and.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( lor ) : int -> int -> int = \"%orint\"\n(** Bitwise logical or.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( lxor ) : int -> int -> int = \"%xorint\"\n(** Bitwise logical exclusive or.\n    Left-associative operator at precedence level 7/11. *)\n\nval lnot : int -> int\n(** Bitwise logical negation. *)\n\nexternal ( lsl ) : int -> int -> int = \"%lslint\"\n(** [n lsl m] shifts [n] to the left by [m] bits.\n   The result is unspecified if [m < 0] or [m >= bitsize],\n   where [bitsize] is [32] on a 32-bit platform and\n   [64] on a 64-bit platform.\n   Right-associative operator at precedence level 8/11. *)\n\nexternal ( lsr ) : int -> int -> int = \"%lsrint\"\n(** [n lsr m] shifts [n] to the right by [m] bits.\n   This is a logical shift: zeroes are inserted regardless of\n   the sign of [n].\n   The result is unspecified if [m < 0] or [m >= bitsize].\n   Right-associative operator at precedence level 8/11. *)\n\nexternal ( asr ) : int -> int -> int = \"%asrint\"\n(** [n asr m] shifts [n] to the right by [m] bits.\n   This is an arithmetic shift: the sign bit of [n] is replicated.\n   The result is unspecified if [m < 0] or [m >= bitsize].\n   Right-associative operator at precedence level 8/11. *)\n\n\n(** {1 Floating-point arithmetic}\n\n   OCaml's floating-point numbers follow the\n   IEEE 754 standard, using double precision (64 bits) numbers.\n   Floating-point operations never raise an exception on overflow,\n   underflow, division by zero, etc.  Instead, special IEEE numbers\n   are returned as appropriate, such as [infinity] for [1.0 /. 0.0],\n   [neg_infinity] for [-1.0 /. 0.0], and [nan] ('not a number')\n   for [0.0 /. 0.0].  These special numbers then propagate through\n   floating-point computations as expected: for instance,\n   [1.0 /. infinity] is [0.0], and any arithmetic operation with [nan]\n   as argument returns [nan] as result.\n*)\n\nexternal ( ~-. ) : float -> float = \"%negfloat\"\n(** Unary negation. You can also write [-. e] instead of [~-. e].\n    Unary operator at precedence level 9/11 for [-. e]\n    and 11/11 for [~-. e]. *)\n\nexternal ( ~+. ) : float -> float = \"%identity\"\n(** Unary addition. You can also write [+. e] instead of [~+. e].\n    Unary operator at precedence level 9/11 for [+. e]\n    and 11/11 for [~+. e].\n    @since 3.12.0\n*)\n\nexternal ( +. ) : float -> float -> float = \"%addfloat\"\n(** Floating-point addition.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( -. ) : float -> float -> float = \"%subfloat\"\n(** Floating-point subtraction.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( *. ) : float -> float -> float = \"%mulfloat\"\n(** Floating-point multiplication.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( /. ) : float -> float -> float = \"%divfloat\"\n(** Floating-point division.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( ** ) : float -> float -> float =  \"pow\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Exponentiation. *)\n\nexternal sqrt : float -> float =  \"sqrt\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Square root. *)\n\nexternal exp : float -> float =  \"exp\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Exponential. *)\n\nexternal log : float -> float =  \"log\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Natural logarithm. *)\n\nexternal log10 : float -> float =  \"log10\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Base 10 logarithm. *)\n\nexternal expm1 : float -> float = \"?expm1_float\" \n(** [expm1 x] computes [exp x -. 1.0], giving numerically-accurate results\n    even if [x] is close to [0.0].\n    @since 3.12.0\n*)\n\nexternal log1p : float -> float =  \"log1p\" [@@bs.val] [@@bs.scope \"Math\"]\n(** [log1p x] computes [log(1.0 +. x)] (natural logarithm),\n    giving numerically-accurate results even if [x] is close to [0.0].\n    @since 3.12.0\n*)\n\nexternal cos : float -> float =  \"cos\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Cosine.  Argument is in radians. *)\n\nexternal sin : float -> float =  \"sin\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Sine.  Argument is in radians. *)\n\nexternal tan : float -> float =  \"tan\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Tangent.  Argument is in radians. *)\n\nexternal acos : float -> float =  \"acos\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Arc cosine.  The argument must fall within the range [[-1.0, 1.0]].\n    Result is in radians and is between [0.0] and [pi]. *)\n\nexternal asin : float -> float =  \"asin\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Arc sine.  The argument must fall within the range [[-1.0, 1.0]].\n    Result is in radians and is between [-pi/2] and [pi/2]. *)\n\nexternal atan : float -> float =  \"atan\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Arc tangent.\n    Result is in radians and is between [-pi/2] and [pi/2]. *)\n\nexternal atan2 : float -> float -> float =  \"atan2\" [@@bs.val] [@@bs.scope \"Math\"]\n(** [atan2 y x] returns the arc tangent of [y /. x].  The signs of [x]\n    and [y] are used to determine the quadrant of the result.\n    Result is in radians and is between [-pi] and [pi]. *)\n\nexternal hypot : float -> float -> float\n               = \"?hypot_float\"\n(** [hypot x y] returns [sqrt(x *. x + y *. y)], that is, the length\n  of the hypotenuse of a right-angled triangle with sides of length\n  [x] and [y], or, equivalently, the distance of the point [(x,y)]\n  to origin.\n  @since 4.00.0  *)\n\nexternal cosh : float -> float =  \"cosh\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Hyperbolic cosine.  Argument is in radians. *)\n\nexternal sinh : float -> float =  \"sinh\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Hyperbolic sine.  Argument is in radians. *)\n\nexternal tanh : float -> float =  \"tanh\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Hyperbolic tangent.  Argument is in radians. *)\n\nexternal ceil : float -> float =  \"ceil\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Round above to an integer value.\n    [ceil f] returns the least integer value greater than or equal to [f].\n    The result is returned as a float. *)\n\nexternal floor : float -> float =  \"floor\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Round below to an integer value.\n    [floor f] returns the greatest integer value less than or\n    equal to [f].\n    The result is returned as a float. *)\n\nexternal abs_float : float -> float = \"abs\" [@@bs.val] [@@bs.scope \"Math\"]\n(** [abs_float f] returns the absolute value of [f]. *)\n\nexternal copysign : float -> float -> float\n                  = \"?copysign_float\" \n(** [copysign x y] returns a float whose absolute value is that of [x]\n  and whose sign is that of [y].  If [x] is [nan], returns [nan].\n  If [y] is [nan], returns either [x] or [-. x], but it is not\n  specified which.\n  @since 4.00.0  *)\n\nexternal mod_float : float -> float -> float = \"?fmod_float\" \n(** [mod_float a b] returns the remainder of [a] with respect to\n   [b].  The returned value is [a -. n *. b], where [n]\n   is the quotient [a /. b] rounded towards zero to an integer. *)\n\nexternal frexp : float -> float * int = \"?frexp_float\"\n(** [frexp f] returns the pair of the significant\n   and the exponent of [f].  When [f] is zero, the\n   significant [x] and the exponent [n] of [f] are equal to\n   zero.  When [f] is non-zero, they are defined by\n   [f = x *. 2 ** n] and [0.5 <= x < 1.0]. *)\n\n\nexternal ldexp : float -> int -> float =\n  \"?ldexp_float\" \n(** [ldexp x n] returns [x *. 2 ** n]. *)\n\nexternal modf : float -> float * float = \"?modf_float\"\n(** [modf f] returns the pair of the fractional and integral\n   part of [f]. *)\n\nexternal float : int -> float = \"%floatofint\"\n(** Same as {!Pervasives.float_of_int}. *)\n\nexternal float_of_int : int -> float = \"%floatofint\"\n(** Convert an integer to floating-point. *)\n\nexternal truncate : float -> int = \"%intoffloat\"\n(** Same as {!Pervasives.int_of_float}. *)\n\nexternal int_of_float : float -> int = \"%intoffloat\"\n(** Truncate the given floating-point number to an integer.\n   The result is unspecified if the argument is [nan] or falls outside the\n   range of representable integers. *)\n\nval infinity : float\n(** Positive infinity. *)\n\nval neg_infinity : float\n(** Negative infinity. *)\n\n\nexternal nan : float = \"NaN\" [@@bs.val]  [@@bs.scope \"Number\"]\n(* we could also use [0.  /. 0.] *)\n(** A special floating-point value denoting the result of an\n   undefined operation such as [0.0 /. 0.0].  Stands for\n   'not a number'.  Any floating-point operation with [nan] as\n   argument returns [nan] as result.  As for floating-point comparisons,\n   [=], [<], [<=], [>] and [>=] return [false] and [<>] returns [true]\n   if one or both of their arguments is [nan]. *)\n\nval max_float : float\n(** The largest positive finite value of type [float]. *)\n\nval min_float : float\n(** The smallest positive, non-zero, non-denormalized value of type [float]. *)\n\nval epsilon_float : float\n(** The difference between [1.0] and the smallest exactly representable\n    floating-point number greater than [1.0]. *)\n\n\ntype fpclass =\n    FP_normal           (** Normal number, none of the below *)\n  | FP_subnormal        (** Number very close to 0.0, has reduced precision *)\n  | FP_zero             (** Number is 0.0 or -0.0 *)\n  | FP_infinite         (** Number is positive or negative infinity *)\n  | FP_nan              (** Not a number: result of an undefined operation *)\n(** The five classes of floating-point numbers, as determined by\n   the {!Pervasives.classify_float} function. *)\n\nval classify_float : float -> fpclass\n(** Return the class of the given floating-point number:\n   normal, subnormal, zero, infinite, or not a number. *)\n\n\n(** {1 String operations}\n\n   More string operations are provided in module {!String}.\n*)\nexternal (^) : string -> string -> string = \"#string_append\"\n(** String concatenation.\n    Right-associative operator at precedence level 5/11. *)\n\n\n(** {1 Character operations}\n\n   More character operations are provided in module {!Char}.\n*)\n\nexternal int_of_char : char -> int = \"%identity\"\n(** Return the ASCII code of the argument. *)\n\nval char_of_int : int -> char\n(** Return the character with the given ASCII code.\n   Raise [Invalid_argument \"char_of_int\"] if the argument is\n   outside the range 0--255. *)\n\n\n(** {1 Unit operations} *)\n\nexternal ignore : 'a -> unit = \"%ignore\"\n(** Discard the value of its argument and return [()].\n   For instance, [ignore(f x)] discards the result of\n   the side-effecting function [f].  It is equivalent to\n   [f x; ()], except that the latter may generate a\n   compiler warning; writing [ignore(f x)] instead\n   avoids the warning. *)\n\n\n(** {1 String conversion functions} *)\n\nval string_of_bool : bool -> string\n(** Return the string representation of a boolean. As the returned values\n   may be shared, the user should not modify them directly.\n*)\n\nval bool_of_string : string -> bool\n(** Convert the given string to a boolean.\n   Raise [Invalid_argument \"bool_of_string\"] if the string is not\n   [\"true\"] or [\"false\"]. *)\n\nval bool_of_string_opt: string -> bool option\n(** Convert the given string to a boolean.\n    Return [None] if the string is not\n    [\"true\"] or [\"false\"].\n    @since 4.05\n*)\n\n\nexternal string_of_int : int -> string = \"String\" [@@bs.val]\n(** Return the string representation of an integer, in decimal. *)\n\nexternal int_of_string : string -> int = \"?int_of_string\"\n(** Convert the given string to an integer.\n   The string is read in decimal (by default, or if the string \n   begins with [0u]), in hexadecimal (if it begins with [0x] or\n   [0X]), in octal (if it begins with [0o] or [0O]), or in binary\n   (if it begins with [0b] or [0B]).\n\n   The [0u] prefix reads the input as an unsigned integer in the range\n   [[0, 2*max_int+1]].  If the input exceeds {!max_int}\n   it is converted to the signed integer\n   [min_int + input - max_int - 1].\n\n   The [_] (underscore) character can appear anywhere in the string\n   and is ignored.\n   Raise [Failure \"int_of_string\"] if the given string is not\n   a valid representation of an integer, or if the integer represented\n   exceeds the range of integers representable in type [int]. *)\n\n\nval int_of_string_opt: string -> int option\n(** Same as [int_of_string], but returns [None] instead of raising.\n    @since 4.05\n*)\n\nval string_of_float : float -> string\n[@@ocaml.deprecated \"Please use Js.Float.toString instead, string_of_float generates unparseable floats\"]\n(** Return the string representation of a floating-point number. *)\n\nexternal float_of_string : string -> float = \"?float_of_string\"\n(** Convert the given string to a float.  The string is read in decimal\n   (by default) or in hexadecimal (marked by [0x] or [0X]).\n   The format of decimal floating-point numbers is\n   [ [-] dd.ddd (e|E) [+|-] dd ], where [d] stands for a decimal digit.\n   The format of hexadecimal floating-point numbers is\n   [ [-] 0(x|X) hh.hhh (p|P) [+|-] dd ], where [h] stands for an\n   hexadecimal digit and [d] for a decimal digit.\n   In both cases, at least one of the integer and fractional parts must be\n   given; the exponent part is optional.\n   The [_] (underscore) character can appear anywhere in the string\n   and is ignored.\n   Depending on the execution platforms, other representations of\n   floating-point numbers can be accepted, but should not be relied upon.\n   Raise [Failure \"float_of_string\"] if the given string is not a valid\n   representation of a float. *)\n\nval float_of_string_opt: string -> float option\n(** Same as [float_of_string], but returns [None] instead of raising.\n    @since 4.05\n*)\n\n(** {1 Pair operations} *)\n\nexternal fst : 'a * 'b -> 'a = \"%field0\"\n(** Return the first component of a pair. *)\n\nexternal snd : 'a * 'b -> 'b = \"%field1\"\n(** Return the second component of a pair. *)\n\n\n(** {1 List operations}\n\n   More list operations are provided in module {!List}.\n*)\n\nval ( @ ) : 'a list -> 'a list -> 'a list\n[@@ocaml.deprecated \"Use Belt.List.append instead\"]    \n(** List concatenation.  Tail-recursive (length of the first argument).\n    Right-associative operator at precedence level 5/11. *)\n\n\ntype int32 = int\n\n\n\n\n\nval print_string : string -> unit\n(** Print a string on standard output. *)\n\n\nval print_int : int -> unit\n(** Print an integer, in decimal, on standard output. *)\n\nval print_float : float -> unit\n(** Print a floating-point number, in decimal, on standard output. *)\nexternal print_endline : string -> unit = \"log\" \n[@@bs.val] [@@bs.scope \"console\"]\n(** Print a string, followed by a newline character, on\n   standard output and flush standard output. *)\n\nval print_newline : unit -> unit\n(** Print a newline character on standard output, and flush\n   standard output. This can be used to simulate line\n   buffering of standard output. *)\n\n\nexternal prerr_endline : string -> unit = \"error\" \n[@@bs.val] [@@bs.scope \"console\"]\n(** Print a string, followed by a newline character on standard\n   error and flush standard error. *)\n\nval prerr_newline : unit -> unit\n(** Print a newline character on standard error, and flush\n   standard error. *)\n\n\n\n\n\n(** {1 References} *)\n\ntype 'a ref = { mutable contents : 'a }\n(** The type of references (mutable indirection cells) containing\n   a value of type ['a]. *)\n\nexternal ref : 'a -> 'a ref = \"%makemutable\"\n(** Return a fresh reference containing the given value. *)\n\nexternal ( ! ) : 'a ref -> 'a = \"%bs_ref_field0\"\n(** [!r] returns the current contents of reference [r].\n   Equivalent to [fun r -> r.contents].\n   Unary operator at precedence level 11/11.*)\n\nexternal ( := ) : 'a ref -> 'a -> unit = \"%bs_ref_setfield0\"\n(** [r := a] stores the value of [a] in reference [r].\n   Equivalent to [fun r v -> r.contents <- v].\n   Right-associative operator at precedence level 1/11. *)\n\nexternal incr : int ref -> unit = \"%incr\"\n(** Increment the integer contained in the given reference.\n   Equivalent to [fun r -> r := succ !r]. *)\n\nexternal decr : int ref -> unit = \"%decr\"\n(** Decrement the integer contained in the given reference.\n   Equivalent to [fun r -> r := pred !r]. *)\n\n(** {1 Result type} *)\n\n(** @since 4.03.0 *)\ntype ('a, 'b) result = ('a, 'b) Belt.Result.t =\n  | Ok of 'a\n  | Error of 'b\n\n\n(** {1 Program termination} *)\n\nval exit : int -> 'a\n(** Terminate the process, returning the given status code\n   to the operating system: usually 0 to indicate no errors,\n   and a small positive integer to indicate failure.\n   All open output channels are flushed with [flush_all].\n   An implicit [exit 0] is performed each time a program\n   terminates normally.  An implicit [exit 2] is performed if the program\n   terminates early because of an uncaught exception. *)\n\nval at_exit : (unit -> unit) -> unit\n(** Register the given function to be called at program termination\n   time. The functions registered with [at_exit] will be called when\n   the program does any of the following:\n   - executes {!Pervasives.exit}\n   - terminates, either normally or because of an uncaught\n     exception\n   - executes the C function [caml_shutdown].\n   The functions are called in 'last in, first out' order: the\n   function most recently added with [at_exit] is called first. *)\n\n(**/**)\n\nval valid_float_lexem : string -> string\n"}}}
bs-platform could not be found
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/pervasives.mli"}}}
bs-platform could not be found
Read message 
{"jsonrpc":"2.0","method":"$/setTraceNotification","params":{"value":"off"}}
Read message 
{"jsonrpc":"2.0","method":"workspace/didChangeConfiguration","params":{"settings":{"reason_language_server":{"location":"","build_system_override_by_root":{},"refmt":"","lispRefmt":"","mlfmt":"","format_width":80,"per_value_codelens":false,"dependencies_codelens":true,"opens_codelens":true,"show_module_path_on_hover":true,"reloadOnChange":false,"show_debug_errors":false,"autoRebuild":true}}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/pervasives.mli","languageId":"ocaml","version":1,"text":"(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(** The initially opened module.\n\n   This module provides the basic operations over the built-in types\n   (numbers, booleans, byte sequences, strings, exceptions, references,\n   lists, arrays, input-output channels, ...).\n\n   This module is automatically opened at the beginning of each compilation.\n   All components of this module can therefore be referred by their short\n   name, without prefixing them by [Pervasives].\n*)\n\n\n(* Internal *)\nexternal __unsafe_cast : 'a -> 'b = \"%identity\"\n\n(** {1 Exceptions} *)\n\nexternal raise : exn -> 'a = \"%raise\"\n(** Raise the given exception value *)\n\nexternal raise_notrace : exn -> 'a = \"%raise_notrace\"\n(** A faster version [raise] which does not record the backtrace.\n    @since 4.02.0\n*)\n\nval invalid_arg : string -> 'a\n(** Raise exception [Invalid_argument] with the given string. *)\n\nval failwith : string -> 'a\n(** Raise exception [Failure] with the given string. *)\n\nexception Exit\n(** The [Exit] exception is not raised by any library function.  It is\n    provided for use in your programs. *)\n\n\n(** {1 Comparisons} *)\n\nexternal ( = ) : 'a -> 'a -> bool = \"%equal\"\n(** [e1 = e2] tests for structural equality of [e1] and [e2].\n   Mutable structures (e.g. references and arrays) are equal\n   if and only if their current contents are structurally equal,\n   even if the two mutable objects are not the same physical object.\n   Equality between functional values raises [Invalid_argument].\n   Equality between cyclic data structures may not terminate.\n   Left-associative operator at precedence level 4/11. *)\n\nexternal ( <> ) : 'a -> 'a -> bool = \"%notequal\"\n(** Negation of {!Pervasives.( = )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( < ) : 'a -> 'a -> bool = \"%lessthan\"\n(** See {!Pervasives.( >= )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( > ) : 'a -> 'a -> bool = \"%greaterthan\"\n(** See {!Pervasives.( >= )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( <= ) : 'a -> 'a -> bool = \"%lessequal\"\n(** See {!Pervasives.( >= )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( >= ) : 'a -> 'a -> bool = \"%greaterequal\"\n(** Structural ordering functions. These functions coincide with\n   the usual orderings over integers, characters, strings, byte sequences\n   and floating-point numbers, and extend them to a\n   total ordering over all types.\n   The ordering is compatible with [( = )]. As in the case\n   of [( = )], mutable structures are compared by contents.\n   Comparison between functional values raises [Invalid_argument].\n   Comparison between cyclic structures may not terminate.\n   Left-associative operator at precedence level 4/11. *)\n\nexternal compare : 'a -> 'a -> int = \"%compare\"\n(** [compare x y] returns [0] if [x] is equal to [y],\n   a negative integer if [x] is less than [y], and a positive integer\n   if [x] is greater than [y].  The ordering implemented by [compare]\n   is compatible with the comparison predicates [=], [<] and [>]\n   defined above,  with one difference on the treatment of the float value\n   {!Pervasives.nan}.  Namely, the comparison predicates treat [nan]\n   as different from any other float value, including itself;\n   while [compare] treats [nan] as equal to itself and less than any\n   other float value.  This treatment of [nan] ensures that [compare]\n   defines a total ordering relation.\n\n   [compare] applied to functional values may raise [Invalid_argument].\n   [compare] applied to cyclic structures may not terminate.\n\n   The [compare] function can be used as the comparison function\n   required by the {!Set.Make} and {!Map.Make} functors, as well as\n   the {!List.sort} and {!Array.sort} functions. *)\n\nexternal min : 'a -> 'a -> 'a = \"%bs_min\"\n(** Return the smaller of the two arguments.\n    The result is unspecified if one of the arguments contains\n    the float value [nan]. *)\n\nexternal max : 'a -> 'a -> 'a = \"%bs_max\"\n(** Return the greater of the two arguments.\n    The result is unspecified if one of the arguments contains\n    the float value [nan]. *)\n\nexternal ( == ) : 'a -> 'a -> bool = \"%eq\"\n(** [e1 == e2] tests for physical equality of [e1] and [e2].\n   On mutable types such as references, arrays, byte sequences, records with\n   mutable fields and objects with mutable instance variables,\n   [e1 == e2] is true if and only if physical modification of [e1]\n   also affects [e2].\n   On non-mutable types, the behavior of [( == )] is\n   implementation-dependent; however, it is guaranteed that\n   [e1 == e2] implies [compare e1 e2 = 0].\n   Left-associative operator at precedence level 4/11. *)\n\nexternal ( != ) : 'a -> 'a -> bool = \"%noteq\"\n(** Negation of {!Pervasives.( == )}.\n    Left-associative operator at precedence level 4/11. *)\n\n\n(** {1 Boolean operations} *)\n\nexternal not : bool -> bool = \"%boolnot\"\n(** The boolean negation. *)\n\nexternal ( && ) : bool -> bool -> bool = \"%sequand\"\n(** The boolean 'and'. Evaluation is sequential, left-to-right:\n   in [e1 && e2], [e1] is evaluated first, and if it returns [false],\n   [e2] is not evaluated at all.\n   Right-associative operator at precedence level 3/11. *)\n\n\nexternal ( || ) : bool -> bool -> bool = \"%sequor\"\n(** The boolean 'or'. Evaluation is sequential, left-to-right:\n   in [e1 || e2], [e1] is evaluated first, and if it returns [true],\n   [e2] is not evaluated at all.\n   Right-associative operator at precedence level 2/11.\n*)\n\n\n(** {1 Debugging} *)\n\nexternal __LOC__ : string = \"%loc_LOC\"\n(** [__LOC__] returns the location at which this expression appears in\n    the file currently being parsed by the compiler, with the standard\n    error format of OCaml: \"File %S, line %d, characters %d-%d\".\n    @since 4.02.0\n*)\n\nexternal __FILE__ : string = \"%loc_FILE\"\n(** [__FILE__] returns the name of the file currently being\n    parsed by the compiler.\n    @since 4.02.0\n*)\n\nexternal __LINE__ : int = \"%loc_LINE\"\n(** [__LINE__] returns the line number at which this expression\n    appears in the file currently being parsed by the compiler.\n    @since 4.02.0\n*)\n\nexternal __MODULE__ : string = \"%loc_MODULE\"\n(** [__MODULE__] returns the module name of the file being\n    parsed by the compiler.\n    @since 4.02.0\n*)\n\nexternal __POS__ : string * int * int * int = \"%loc_POS\"\n(** [__POS__] returns a tuple [(file,lnum,cnum,enum)], corresponding\n    to the location at which this expression appears in the file\n    currently being parsed by the compiler. [file] is the current\n    filename, [lnum] the line number, [cnum] the character position in\n    the line and [enum] the last character position in the line.\n    @since 4.02.0\n *)\n\nexternal __LOC_OF__ : 'a -> string * 'a = \"%loc_LOC\"\n(** [__LOC_OF__ expr] returns a pair [(loc, expr)] where [loc] is the\n    location of [expr] in the file currently being parsed by the\n    compiler, with the standard error format of OCaml: \"File %S, line\n    %d, characters %d-%d\".\n    @since 4.02.0\n*)\n\nexternal __LINE_OF__ : 'a -> int * 'a = \"%loc_LINE\"\n(** [__LINE__ expr] returns a pair [(line, expr)], where [line] is the\n    line number at which the expression [expr] appears in the file\n    currently being parsed by the compiler.\n    @since 4.02.0\n *)\n\nexternal __POS_OF__ : 'a -> (string * int * int * int) * 'a = \"%loc_POS\"\n(** [__POS_OF__ expr] returns a pair [(loc,expr)], where [loc] is a\n    tuple [(file,lnum,cnum,enum)] corresponding to the location at\n    which the expression [expr] appears in the file currently being\n    parsed by the compiler. [file] is the current filename, [lnum] the\n    line number, [cnum] the character position in the line and [enum]\n    the last character position in the line.\n    @since 4.02.0\n *)\n\n(** {1 Composition operators} *)\n\nexternal ( |> ) : 'a -> ('a -> 'b) -> 'b = \"%revapply\"\n(** Reverse-application operator: [x |> f |> g] is exactly equivalent\n to [g (f (x))].\n Left-associative operator at precedence level 4/11.\n   @since 4.01\n *)\n\nexternal ( @@ ) : ('a -> 'b) -> 'a -> 'b = \"%apply\"\n(** Application operator: [g @@ f @@ x] is exactly equivalent to\n [g (f (x))].\n Right-associative operator at precedence level 5/11.\n   @since 4.01\n*)\n\n(** {1 Integer arithmetic} *)\n\n(** Integers are 31 bits wide (or 63 bits on 64-bit processors).\n   All operations are taken modulo 2{^31} (or 2{^63}).\n   They do not fail on overflow. *)\n\nexternal ( ~- ) : int -> int = \"%negint\"\n(** Unary negation. You can also write [- e] instead of [~- e].\n    Unary operator at precedence level 9/11 for [- e]\n    and 11/11 for [~- e]. *)\n\nexternal ( ~+ ) : int -> int = \"%identity\"\n(** Unary addition. You can also write [+ e] instead of [~+ e].\n    Unary operator at precedence level 9/11 for [+ e]\n    and 11/11 for [~+ e].\n    @since 3.12.0\n*)\n\nexternal succ : int -> int = \"%succint\"\n(** [succ x] is [x + 1]. *)\n\nexternal pred : int -> int = \"%predint\"\n(** [pred x] is [x - 1]. *)\n\nexternal ( + ) : int -> int -> int = \"%addint\"\n(** Integer addition.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( - ) : int -> int -> int = \"%subint\"\n(** Integer subtraction.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( * ) : int -> int -> int = \"%mulint\"\n(** Integer multiplication.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( / ) : int -> int -> int = \"%divint\"\n(** Integer division.\n   Raise [Division_by_zero] if the second argument is 0.\n   Integer division rounds the real quotient of its arguments towards zero.\n   More precisely, if [x >= 0] and [y > 0], [x / y] is the greatest integer\n   less than or equal to the real quotient of [x] by [y].  Moreover,\n   [(- x) / y = x / (- y) = - (x / y)].\n   Left-associative operator at precedence level 7/11. *)\n\nexternal ( mod ) : int -> int -> int = \"%modint\"\n(** Integer remainder.  If [y] is not zero, the result\n   of [x mod y] satisfies the following properties:\n   [x = (x / y) * y + x mod y] and\n   [abs(x mod y) <= abs(y) - 1].\n   If [y = 0], [x mod y] raises [Division_by_zero].\n   Note that [x mod y] is negative only if [x < 0].\n   Raise [Division_by_zero] if [y] is zero.\n   Left-associative operator at precedence level 7/11. *)\n\nval abs : int -> int\n(** Return the absolute value of the argument.  Note that this may be\n  negative if the argument is [min_int]. *)\n\nval max_int : int\n(** The greatest representable integer. *)\n\nval min_int : int\n(** The smallest representable integer. *)\n\n\n(** {2 Bitwise operations} *)\n\nexternal ( land ) : int -> int -> int = \"%andint\"\n(** Bitwise logical and.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( lor ) : int -> int -> int = \"%orint\"\n(** Bitwise logical or.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( lxor ) : int -> int -> int = \"%xorint\"\n(** Bitwise logical exclusive or.\n    Left-associative operator at precedence level 7/11. *)\n\nval lnot : int -> int\n(** Bitwise logical negation. *)\n\nexternal ( lsl ) : int -> int -> int = \"%lslint\"\n(** [n lsl m] shifts [n] to the left by [m] bits.\n   The result is unspecified if [m < 0] or [m >= bitsize],\n   where [bitsize] is [32] on a 32-bit platform and\n   [64] on a 64-bit platform.\n   Right-associative operator at precedence level 8/11. *)\n\nexternal ( lsr ) : int -> int -> int = \"%lsrint\"\n(** [n lsr m] shifts [n] to the right by [m] bits.\n   This is a logical shift: zeroes are inserted regardless of\n   the sign of [n].\n   The result is unspecified if [m < 0] or [m >= bitsize].\n   Right-associative operator at precedence level 8/11. *)\n\nexternal ( asr ) : int -> int -> int = \"%asrint\"\n(** [n asr m] shifts [n] to the right by [m] bits.\n   This is an arithmetic shift: the sign bit of [n] is replicated.\n   The result is unspecified if [m < 0] or [m >= bitsize].\n   Right-associative operator at precedence level 8/11. *)\n\n\n(** {1 Floating-point arithmetic}\n\n   OCaml's floating-point numbers follow the\n   IEEE 754 standard, using double precision (64 bits) numbers.\n   Floating-point operations never raise an exception on overflow,\n   underflow, division by zero, etc.  Instead, special IEEE numbers\n   are returned as appropriate, such as [infinity] for [1.0 /. 0.0],\n   [neg_infinity] for [-1.0 /. 0.0], and [nan] ('not a number')\n   for [0.0 /. 0.0].  These special numbers then propagate through\n   floating-point computations as expected: for instance,\n   [1.0 /. infinity] is [0.0], and any arithmetic operation with [nan]\n   as argument returns [nan] as result.\n*)\n\nexternal ( ~-. ) : float -> float = \"%negfloat\"\n(** Unary negation. You can also write [-. e] instead of [~-. e].\n    Unary operator at precedence level 9/11 for [-. e]\n    and 11/11 for [~-. e]. *)\n\nexternal ( ~+. ) : float -> float = \"%identity\"\n(** Unary addition. You can also write [+. e] instead of [~+. e].\n    Unary operator at precedence level 9/11 for [+. e]\n    and 11/11 for [~+. e].\n    @since 3.12.0\n*)\n\nexternal ( +. ) : float -> float -> float = \"%addfloat\"\n(** Floating-point addition.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( -. ) : float -> float -> float = \"%subfloat\"\n(** Floating-point subtraction.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( *. ) : float -> float -> float = \"%mulfloat\"\n(** Floating-point multiplication.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( /. ) : float -> float -> float = \"%divfloat\"\n(** Floating-point division.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( ** ) : float -> float -> float =  \"pow\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Exponentiation. *)\n\nexternal sqrt : float -> float =  \"sqrt\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Square root. *)\n\nexternal exp : float -> float =  \"exp\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Exponential. *)\n\nexternal log : float -> float =  \"log\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Natural logarithm. *)\n\nexternal log10 : float -> float =  \"log10\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Base 10 logarithm. *)\n\nexternal expm1 : float -> float = \"?expm1_float\" \n(** [expm1 x] computes [exp x -. 1.0], giving numerically-accurate results\n    even if [x] is close to [0.0].\n    @since 3.12.0\n*)\n\nexternal log1p : float -> float =  \"log1p\" [@@bs.val] [@@bs.scope \"Math\"]\n(** [log1p x] computes [log(1.0 +. x)] (natural logarithm),\n    giving numerically-accurate results even if [x] is close to [0.0].\n    @since 3.12.0\n*)\n\nexternal cos : float -> float =  \"cos\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Cosine.  Argument is in radians. *)\n\nexternal sin : float -> float =  \"sin\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Sine.  Argument is in radians. *)\n\nexternal tan : float -> float =  \"tan\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Tangent.  Argument is in radians. *)\n\nexternal acos : float -> float =  \"acos\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Arc cosine.  The argument must fall within the range [[-1.0, 1.0]].\n    Result is in radians and is between [0.0] and [pi]. *)\n\nexternal asin : float -> float =  \"asin\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Arc sine.  The argument must fall within the range [[-1.0, 1.0]].\n    Result is in radians and is between [-pi/2] and [pi/2]. *)\n\nexternal atan : float -> float =  \"atan\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Arc tangent.\n    Result is in radians and is between [-pi/2] and [pi/2]. *)\n\nexternal atan2 : float -> float -> float =  \"atan2\" [@@bs.val] [@@bs.scope \"Math\"]\n(** [atan2 y x] returns the arc tangent of [y /. x].  The signs of [x]\n    and [y] are used to determine the quadrant of the result.\n    Result is in radians and is between [-pi] and [pi]. *)\n\nexternal hypot : float -> float -> float\n               = \"?hypot_float\"\n(** [hypot x y] returns [sqrt(x *. x + y *. y)], that is, the length\n  of the hypotenuse of a right-angled triangle with sides of length\n  [x] and [y], or, equivalently, the distance of the point [(x,y)]\n  to origin.\n  @since 4.00.0  *)\n\nexternal cosh : float -> float =  \"cosh\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Hyperbolic cosine.  Argument is in radians. *)\n\nexternal sinh : float -> float =  \"sinh\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Hyperbolic sine.  Argument is in radians. *)\n\nexternal tanh : float -> float =  \"tanh\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Hyperbolic tangent.  Argument is in radians. *)\n\nexternal ceil : float -> float =  \"ceil\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Round above to an integer value.\n    [ceil f] returns the least integer value greater than or equal to [f].\n    The result is returned as a float. *)\n\nexternal floor : float -> float =  \"floor\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Round below to an integer value.\n    [floor f] returns the greatest integer value less than or\n    equal to [f].\n    The result is returned as a float. *)\n\nexternal abs_float : float -> float = \"abs\" [@@bs.val] [@@bs.scope \"Math\"]\n(** [abs_float f] returns the absolute value of [f]. *)\n\nexternal copysign : float -> float -> float\n                  = \"?copysign_float\" \n(** [copysign x y] returns a float whose absolute value is that of [x]\n  and whose sign is that of [y].  If [x] is [nan], returns [nan].\n  If [y] is [nan], returns either [x] or [-. x], but it is not\n  specified which.\n  @since 4.00.0  *)\n\nexternal mod_float : float -> float -> float = \"?fmod_float\" \n(** [mod_float a b] returns the remainder of [a] with respect to\n   [b].  The returned value is [a -. n *. b], where [n]\n   is the quotient [a /. b] rounded towards zero to an integer. *)\n\nexternal frexp : float -> float * int = \"?frexp_float\"\n(** [frexp f] returns the pair of the significant\n   and the exponent of [f].  When [f] is zero, the\n   significant [x] and the exponent [n] of [f] are equal to\n   zero.  When [f] is non-zero, they are defined by\n   [f = x *. 2 ** n] and [0.5 <= x < 1.0]. *)\n\n\nexternal ldexp : float -> int -> float =\n  \"?ldexp_float\" \n(** [ldexp x n] returns [x *. 2 ** n]. *)\n\nexternal modf : float -> float * float = \"?modf_float\"\n(** [modf f] returns the pair of the fractional and integral\n   part of [f]. *)\n\nexternal float : int -> float = \"%floatofint\"\n(** Same as {!Pervasives.float_of_int}. *)\n\nexternal float_of_int : int -> float = \"%floatofint\"\n(** Convert an integer to floating-point. *)\n\nexternal truncate : float -> int = \"%intoffloat\"\n(** Same as {!Pervasives.int_of_float}. *)\n\nexternal int_of_float : float -> int = \"%intoffloat\"\n(** Truncate the given floating-point number to an integer.\n   The result is unspecified if the argument is [nan] or falls outside the\n   range of representable integers. *)\n\nval infinity : float\n(** Positive infinity. *)\n\nval neg_infinity : float\n(** Negative infinity. *)\n\n\nexternal nan : float = \"NaN\" [@@bs.val]  [@@bs.scope \"Number\"]\n(* we could also use [0.  /. 0.] *)\n(** A special floating-point value denoting the result of an\n   undefined operation such as [0.0 /. 0.0].  Stands for\n   'not a number'.  Any floating-point operation with [nan] as\n   argument returns [nan] as result.  As for floating-point comparisons,\n   [=], [<], [<=], [>] and [>=] return [false] and [<>] returns [true]\n   if one or both of their arguments is [nan]. *)\n\nval max_float : float\n(** The largest positive finite value of type [float]. *)\n\nval min_float : float\n(** The smallest positive, non-zero, non-denormalized value of type [float]. *)\n\nval epsilon_float : float\n(** The difference between [1.0] and the smallest exactly representable\n    floating-point number greater than [1.0]. *)\n\n\ntype fpclass =\n    FP_normal           (** Normal number, none of the below *)\n  | FP_subnormal        (** Number very close to 0.0, has reduced precision *)\n  | FP_zero             (** Number is 0.0 or -0.0 *)\n  | FP_infinite         (** Number is positive or negative infinity *)\n  | FP_nan              (** Not a number: result of an undefined operation *)\n(** The five classes of floating-point numbers, as determined by\n   the {!Pervasives.classify_float} function. *)\n\nval classify_float : float -> fpclass\n(** Return the class of the given floating-point number:\n   normal, subnormal, zero, infinite, or not a number. *)\n\n\n(** {1 String operations}\n\n   More string operations are provided in module {!String}.\n*)\nexternal (^) : string -> string -> string = \"#string_append\"\n(** String concatenation.\n    Right-associative operator at precedence level 5/11. *)\n\n\n(** {1 Character operations}\n\n   More character operations are provided in module {!Char}.\n*)\n\nexternal int_of_char : char -> int = \"%identity\"\n(** Return the ASCII code of the argument. *)\n\nval char_of_int : int -> char\n(** Return the character with the given ASCII code.\n   Raise [Invalid_argument \"char_of_int\"] if the argument is\n   outside the range 0--255. *)\n\n\n(** {1 Unit operations} *)\n\nexternal ignore : 'a -> unit = \"%ignore\"\n(** Discard the value of its argument and return [()].\n   For instance, [ignore(f x)] discards the result of\n   the side-effecting function [f].  It is equivalent to\n   [f x; ()], except that the latter may generate a\n   compiler warning; writing [ignore(f x)] instead\n   avoids the warning. *)\n\n\n(** {1 String conversion functions} *)\n\nval string_of_bool : bool -> string\n(** Return the string representation of a boolean. As the returned values\n   may be shared, the user should not modify them directly.\n*)\n\nval bool_of_string : string -> bool\n(** Convert the given string to a boolean.\n   Raise [Invalid_argument \"bool_of_string\"] if the string is not\n   [\"true\"] or [\"false\"]. *)\n\nval bool_of_string_opt: string -> bool option\n(** Convert the given string to a boolean.\n    Return [None] if the string is not\n    [\"true\"] or [\"false\"].\n    @since 4.05\n*)\n\n\nexternal string_of_int : int -> string = \"String\" [@@bs.val]\n(** Return the string representation of an integer, in decimal. *)\n\nexternal int_of_string : string -> int = \"?int_of_string\"\n(** Convert the given string to an integer.\n   The string is read in decimal (by default, or if the string \n   begins with [0u]), in hexadecimal (if it begins with [0x] or\n   [0X]), in octal (if it begins with [0o] or [0O]), or in binary\n   (if it begins with [0b] or [0B]).\n\n   The [0u] prefix reads the input as an unsigned integer in the range\n   [[0, 2*max_int+1]].  If the input exceeds {!max_int}\n   it is converted to the signed integer\n   [min_int + input - max_int - 1].\n\n   The [_] (underscore) character can appear anywhere in the string\n   and is ignored.\n   Raise [Failure \"int_of_string\"] if the given string is not\n   a valid representation of an integer, or if the integer represented\n   exceeds the range of integers representable in type [int]. *)\n\n\nval int_of_string_opt: string -> int option\n(** Same as [int_of_string], but returns [None] instead of raising.\n    @since 4.05\n*)\n\nval string_of_float : float -> string\n[@@ocaml.deprecated \"Please use Js.Float.toString instead, string_of_float generates unparseable floats\"]\n(** Return the string representation of a floating-point number. *)\n\nexternal float_of_string : string -> float = \"?float_of_string\"\n(** Convert the given string to a float.  The string is read in decimal\n   (by default) or in hexadecimal (marked by [0x] or [0X]).\n   The format of decimal floating-point numbers is\n   [ [-] dd.ddd (e|E) [+|-] dd ], where [d] stands for a decimal digit.\n   The format of hexadecimal floating-point numbers is\n   [ [-] 0(x|X) hh.hhh (p|P) [+|-] dd ], where [h] stands for an\n   hexadecimal digit and [d] for a decimal digit.\n   In both cases, at least one of the integer and fractional parts must be\n   given; the exponent part is optional.\n   The [_] (underscore) character can appear anywhere in the string\n   and is ignored.\n   Depending on the execution platforms, other representations of\n   floating-point numbers can be accepted, but should not be relied upon.\n   Raise [Failure \"float_of_string\"] if the given string is not a valid\n   representation of a float. *)\n\nval float_of_string_opt: string -> float option\n(** Same as [float_of_string], but returns [None] instead of raising.\n    @since 4.05\n*)\n\n(** {1 Pair operations} *)\n\nexternal fst : 'a * 'b -> 'a = \"%field0\"\n(** Return the first component of a pair. *)\n\nexternal snd : 'a * 'b -> 'b = \"%field1\"\n(** Return the second component of a pair. *)\n\n\n(** {1 List operations}\n\n   More list operations are provided in module {!List}.\n*)\n\nval ( @ ) : 'a list -> 'a list -> 'a list\n[@@ocaml.deprecated \"Use Belt.List.append instead\"]    \n(** List concatenation.  Tail-recursive (length of the first argument).\n    Right-associative operator at precedence level 5/11. *)\n\n\ntype int32 = int\n\n\n\n\n\nval print_string : string -> unit\n(** Print a string on standard output. *)\n\n\nval print_int : int -> unit\n(** Print an integer, in decimal, on standard output. *)\n\nval print_float : float -> unit\n(** Print a floating-point number, in decimal, on standard output. *)\nexternal print_endline : string -> unit = \"log\" \n[@@bs.val] [@@bs.scope \"console\"]\n(** Print a string, followed by a newline character, on\n   standard output and flush standard output. *)\n\nval print_newline : unit -> unit\n(** Print a newline character on standard output, and flush\n   standard output. This can be used to simulate line\n   buffering of standard output. *)\n\n\nexternal prerr_endline : string -> unit = \"error\" \n[@@bs.val] [@@bs.scope \"console\"]\n(** Print a string, followed by a newline character on standard\n   error and flush standard error. *)\n\nval prerr_newline : unit -> unit\n(** Print a newline character on standard error, and flush\n   standard error. *)\n\n\n\n\n\n(** {1 References} *)\n\ntype 'a ref = { mutable contents : 'a }\n(** The type of references (mutable indirection cells) containing\n   a value of type ['a]. *)\n\nexternal ref : 'a -> 'a ref = \"%makemutable\"\n(** Return a fresh reference containing the given value. *)\n\nexternal ( ! ) : 'a ref -> 'a = \"%bs_ref_field0\"\n(** [!r] returns the current contents of reference [r].\n   Equivalent to [fun r -> r.contents].\n   Unary operator at precedence level 11/11.*)\n\nexternal ( := ) : 'a ref -> 'a -> unit = \"%bs_ref_setfield0\"\n(** [r := a] stores the value of [a] in reference [r].\n   Equivalent to [fun r v -> r.contents <- v].\n   Right-associative operator at precedence level 1/11. *)\n\nexternal incr : int ref -> unit = \"%incr\"\n(** Increment the integer contained in the given reference.\n   Equivalent to [fun r -> r := succ !r]. *)\n\nexternal decr : int ref -> unit = \"%decr\"\n(** Decrement the integer contained in the given reference.\n   Equivalent to [fun r -> r := pred !r]. *)\n\n(** {1 Result type} *)\n\n(** @since 4.03.0 *)\ntype ('a, 'b) result = ('a, 'b) Belt.Result.t =\n  | Ok of 'a\n  | Error of 'b\n\n\n(** {1 Program termination} *)\n\nval exit : int -> 'a\n(** Terminate the process, returning the given status code\n   to the operating system: usually 0 to indicate no errors,\n   and a small positive integer to indicate failure.\n   All open output channels are flushed with [flush_all].\n   An implicit [exit 0] is performed each time a program\n   terminates normally.  An implicit [exit 2] is performed if the program\n   terminates early because of an uncaught exception. *)\n\nval at_exit : (unit -> unit) -> unit\n(** Register the given function to be called at program termination\n   time. The functions registered with [at_exit] will be called when\n   the program does any of the following:\n   - executes {!Pervasives.exit}\n   - terminates, either normally or because of an uncaught\n     exception\n   - executes the C function [caml_shutdown].\n   The functions are called in 'last in, first out' order: the\n   function most recently added with [at_exit] is called first. *)\n\n(**/**)\n\nval valid_float_lexem : string -> string\n"}}}
bs-platform could not be found
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/pervasives.mli"}}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didOpen","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/pervasives.mli","languageId":"ocaml","version":1,"text":"(**************************************************************************)\n(*                                                                        *)\n(*                                 OCaml                                  *)\n(*                                                                        *)\n(*             Xavier Leroy, projet Cristal, INRIA Rocquencourt           *)\n(*                                                                        *)\n(*   Copyright 1996 Institut National de Recherche en Informatique et     *)\n(*     en Automatique.                                                    *)\n(*                                                                        *)\n(*   All rights reserved.  This file is distributed under the terms of    *)\n(*   the GNU Lesser General Public License version 2.1, with the          *)\n(*   special exception on linking described in the file LICENSE.          *)\n(*                                                                        *)\n(**************************************************************************)\n\n(** The initially opened module.\n\n   This module provides the basic operations over the built-in types\n   (numbers, booleans, byte sequences, strings, exceptions, references,\n   lists, arrays, input-output channels, ...).\n\n   This module is automatically opened at the beginning of each compilation.\n   All components of this module can therefore be referred by their short\n   name, without prefixing them by [Pervasives].\n*)\n\n\n(* Internal *)\nexternal __unsafe_cast : 'a -> 'b = \"%identity\"\n\n(** {1 Exceptions} *)\n\nexternal raise : exn -> 'a = \"%raise\"\n(** Raise the given exception value *)\n\nexternal raise_notrace : exn -> 'a = \"%raise_notrace\"\n(** A faster version [raise] which does not record the backtrace.\n    @since 4.02.0\n*)\n\nval invalid_arg : string -> 'a\n(** Raise exception [Invalid_argument] with the given string. *)\n\nval failwith : string -> 'a\n(** Raise exception [Failure] with the given string. *)\n\nexception Exit\n(** The [Exit] exception is not raised by any library function.  It is\n    provided for use in your programs. *)\n\n\n(** {1 Comparisons} *)\n\nexternal ( = ) : 'a -> 'a -> bool = \"%equal\"\n(** [e1 = e2] tests for structural equality of [e1] and [e2].\n   Mutable structures (e.g. references and arrays) are equal\n   if and only if their current contents are structurally equal,\n   even if the two mutable objects are not the same physical object.\n   Equality between functional values raises [Invalid_argument].\n   Equality between cyclic data structures may not terminate.\n   Left-associative operator at precedence level 4/11. *)\n\nexternal ( <> ) : 'a -> 'a -> bool = \"%notequal\"\n(** Negation of {!Pervasives.( = )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( < ) : 'a -> 'a -> bool = \"%lessthan\"\n(** See {!Pervasives.( >= )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( > ) : 'a -> 'a -> bool = \"%greaterthan\"\n(** See {!Pervasives.( >= )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( <= ) : 'a -> 'a -> bool = \"%lessequal\"\n(** See {!Pervasives.( >= )}.\n    Left-associative operator at precedence level 4/11. *)\n\nexternal ( >= ) : 'a -> 'a -> bool = \"%greaterequal\"\n(** Structural ordering functions. These functions coincide with\n   the usual orderings over integers, characters, strings, byte sequences\n   and floating-point numbers, and extend them to a\n   total ordering over all types.\n   The ordering is compatible with [( = )]. As in the case\n   of [( = )], mutable structures are compared by contents.\n   Comparison between functional values raises [Invalid_argument].\n   Comparison between cyclic structures may not terminate.\n   Left-associative operator at precedence level 4/11. *)\n\nexternal compare : 'a -> 'a -> int = \"%compare\"\n(** [compare x y] returns [0] if [x] is equal to [y],\n   a negative integer if [x] is less than [y], and a positive integer\n   if [x] is greater than [y].  The ordering implemented by [compare]\n   is compatible with the comparison predicates [=], [<] and [>]\n   defined above,  with one difference on the treatment of the float value\n   {!Pervasives.nan}.  Namely, the comparison predicates treat [nan]\n   as different from any other float value, including itself;\n   while [compare] treats [nan] as equal to itself and less than any\n   other float value.  This treatment of [nan] ensures that [compare]\n   defines a total ordering relation.\n\n   [compare] applied to functional values may raise [Invalid_argument].\n   [compare] applied to cyclic structures may not terminate.\n\n   The [compare] function can be used as the comparison function\n   required by the {!Set.Make} and {!Map.Make} functors, as well as\n   the {!List.sort} and {!Array.sort} functions. *)\n\nexternal min : 'a -> 'a -> 'a = \"%bs_min\"\n(** Return the smaller of the two arguments.\n    The result is unspecified if one of the arguments contains\n    the float value [nan]. *)\n\nexternal max : 'a -> 'a -> 'a = \"%bs_max\"\n(** Return the greater of the two arguments.\n    The result is unspecified if one of the arguments contains\n    the float value [nan]. *)\n\nexternal ( == ) : 'a -> 'a -> bool = \"%eq\"\n(** [e1 == e2] tests for physical equality of [e1] and [e2].\n   On mutable types such as references, arrays, byte sequences, records with\n   mutable fields and objects with mutable instance variables,\n   [e1 == e2] is true if and only if physical modification of [e1]\n   also affects [e2].\n   On non-mutable types, the behavior of [( == )] is\n   implementation-dependent; however, it is guaranteed that\n   [e1 == e2] implies [compare e1 e2 = 0].\n   Left-associative operator at precedence level 4/11. *)\n\nexternal ( != ) : 'a -> 'a -> bool = \"%noteq\"\n(** Negation of {!Pervasives.( == )}.\n    Left-associative operator at precedence level 4/11. *)\n\n\n(** {1 Boolean operations} *)\n\nexternal not : bool -> bool = \"%boolnot\"\n(** The boolean negation. *)\n\nexternal ( && ) : bool -> bool -> bool = \"%sequand\"\n(** The boolean 'and'. Evaluation is sequential, left-to-right:\n   in [e1 && e2], [e1] is evaluated first, and if it returns [false],\n   [e2] is not evaluated at all.\n   Right-associative operator at precedence level 3/11. *)\n\n\nexternal ( || ) : bool -> bool -> bool = \"%sequor\"\n(** The boolean 'or'. Evaluation is sequential, left-to-right:\n   in [e1 || e2], [e1] is evaluated first, and if it returns [true],\n   [e2] is not evaluated at all.\n   Right-associative operator at precedence level 2/11.\n*)\n\n\n(** {1 Debugging} *)\n\nexternal __LOC__ : string = \"%loc_LOC\"\n(** [__LOC__] returns the location at which this expression appears in\n    the file currently being parsed by the compiler, with the standard\n    error format of OCaml: \"File %S, line %d, characters %d-%d\".\n    @since 4.02.0\n*)\n\nexternal __FILE__ : string = \"%loc_FILE\"\n(** [__FILE__] returns the name of the file currently being\n    parsed by the compiler.\n    @since 4.02.0\n*)\n\nexternal __LINE__ : int = \"%loc_LINE\"\n(** [__LINE__] returns the line number at which this expression\n    appears in the file currently being parsed by the compiler.\n    @since 4.02.0\n*)\n\nexternal __MODULE__ : string = \"%loc_MODULE\"\n(** [__MODULE__] returns the module name of the file being\n    parsed by the compiler.\n    @since 4.02.0\n*)\n\nexternal __POS__ : string * int * int * int = \"%loc_POS\"\n(** [__POS__] returns a tuple [(file,lnum,cnum,enum)], corresponding\n    to the location at which this expression appears in the file\n    currently being parsed by the compiler. [file] is the current\n    filename, [lnum] the line number, [cnum] the character position in\n    the line and [enum] the last character position in the line.\n    @since 4.02.0\n *)\n\nexternal __LOC_OF__ : 'a -> string * 'a = \"%loc_LOC\"\n(** [__LOC_OF__ expr] returns a pair [(loc, expr)] where [loc] is the\n    location of [expr] in the file currently being parsed by the\n    compiler, with the standard error format of OCaml: \"File %S, line\n    %d, characters %d-%d\".\n    @since 4.02.0\n*)\n\nexternal __LINE_OF__ : 'a -> int * 'a = \"%loc_LINE\"\n(** [__LINE__ expr] returns a pair [(line, expr)], where [line] is the\n    line number at which the expression [expr] appears in the file\n    currently being parsed by the compiler.\n    @since 4.02.0\n *)\n\nexternal __POS_OF__ : 'a -> (string * int * int * int) * 'a = \"%loc_POS\"\n(** [__POS_OF__ expr] returns a pair [(loc,expr)], where [loc] is a\n    tuple [(file,lnum,cnum,enum)] corresponding to the location at\n    which the expression [expr] appears in the file currently being\n    parsed by the compiler. [file] is the current filename, [lnum] the\n    line number, [cnum] the character position in the line and [enum]\n    the last character position in the line.\n    @since 4.02.0\n *)\n\n(** {1 Composition operators} *)\n\nexternal ( |> ) : 'a -> ('a -> 'b) -> 'b = \"%revapply\"\n(** Reverse-application operator: [x |> f |> g] is exactly equivalent\n to [g (f (x))].\n Left-associative operator at precedence level 4/11.\n   @since 4.01\n *)\n\nexternal ( @@ ) : ('a -> 'b) -> 'a -> 'b = \"%apply\"\n(** Application operator: [g @@ f @@ x] is exactly equivalent to\n [g (f (x))].\n Right-associative operator at precedence level 5/11.\n   @since 4.01\n*)\n\n(** {1 Integer arithmetic} *)\n\n(** Integers are 31 bits wide (or 63 bits on 64-bit processors).\n   All operations are taken modulo 2{^31} (or 2{^63}).\n   They do not fail on overflow. *)\n\nexternal ( ~- ) : int -> int = \"%negint\"\n(** Unary negation. You can also write [- e] instead of [~- e].\n    Unary operator at precedence level 9/11 for [- e]\n    and 11/11 for [~- e]. *)\n\nexternal ( ~+ ) : int -> int = \"%identity\"\n(** Unary addition. You can also write [+ e] instead of [~+ e].\n    Unary operator at precedence level 9/11 for [+ e]\n    and 11/11 for [~+ e].\n    @since 3.12.0\n*)\n\nexternal succ : int -> int = \"%succint\"\n(** [succ x] is [x + 1]. *)\n\nexternal pred : int -> int = \"%predint\"\n(** [pred x] is [x - 1]. *)\n\nexternal ( + ) : int -> int -> int = \"%addint\"\n(** Integer addition.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( - ) : int -> int -> int = \"%subint\"\n(** Integer subtraction.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( * ) : int -> int -> int = \"%mulint\"\n(** Integer multiplication.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( / ) : int -> int -> int = \"%divint\"\n(** Integer division.\n   Raise [Division_by_zero] if the second argument is 0.\n   Integer division rounds the real quotient of its arguments towards zero.\n   More precisely, if [x >= 0] and [y > 0], [x / y] is the greatest integer\n   less than or equal to the real quotient of [x] by [y].  Moreover,\n   [(- x) / y = x / (- y) = - (x / y)].\n   Left-associative operator at precedence level 7/11. *)\n\nexternal ( mod ) : int -> int -> int = \"%modint\"\n(** Integer remainder.  If [y] is not zero, the result\n   of [x mod y] satisfies the following properties:\n   [x = (x / y) * y + x mod y] and\n   [abs(x mod y) <= abs(y) - 1].\n   If [y = 0], [x mod y] raises [Division_by_zero].\n   Note that [x mod y] is negative only if [x < 0].\n   Raise [Division_by_zero] if [y] is zero.\n   Left-associative operator at precedence level 7/11. *)\n\nval abs : int -> int\n(** Return the absolute value of the argument.  Note that this may be\n  negative if the argument is [min_int]. *)\n\nval max_int : int\n(** The greatest representable integer. *)\n\nval min_int : int\n(** The smallest representable integer. *)\n\n\n(** {2 Bitwise operations} *)\n\nexternal ( land ) : int -> int -> int = \"%andint\"\n(** Bitwise logical and.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( lor ) : int -> int -> int = \"%orint\"\n(** Bitwise logical or.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( lxor ) : int -> int -> int = \"%xorint\"\n(** Bitwise logical exclusive or.\n    Left-associative operator at precedence level 7/11. *)\n\nval lnot : int -> int\n(** Bitwise logical negation. *)\n\nexternal ( lsl ) : int -> int -> int = \"%lslint\"\n(** [n lsl m] shifts [n] to the left by [m] bits.\n   The result is unspecified if [m < 0] or [m >= bitsize],\n   where [bitsize] is [32] on a 32-bit platform and\n   [64] on a 64-bit platform.\n   Right-associative operator at precedence level 8/11. *)\n\nexternal ( lsr ) : int -> int -> int = \"%lsrint\"\n(** [n lsr m] shifts [n] to the right by [m] bits.\n   This is a logical shift: zeroes are inserted regardless of\n   the sign of [n].\n   The result is unspecified if [m < 0] or [m >= bitsize].\n   Right-associative operator at precedence level 8/11. *)\n\nexternal ( asr ) : int -> int -> int = \"%asrint\"\n(** [n asr m] shifts [n] to the right by [m] bits.\n   This is an arithmetic shift: the sign bit of [n] is replicated.\n   The result is unspecified if [m < 0] or [m >= bitsize].\n   Right-associative operator at precedence level 8/11. *)\n\n\n(** {1 Floating-point arithmetic}\n\n   OCaml's floating-point numbers follow the\n   IEEE 754 standard, using double precision (64 bits) numbers.\n   Floating-point operations never raise an exception on overflow,\n   underflow, division by zero, etc.  Instead, special IEEE numbers\n   are returned as appropriate, such as [infinity] for [1.0 /. 0.0],\n   [neg_infinity] for [-1.0 /. 0.0], and [nan] ('not a number')\n   for [0.0 /. 0.0].  These special numbers then propagate through\n   floating-point computations as expected: for instance,\n   [1.0 /. infinity] is [0.0], and any arithmetic operation with [nan]\n   as argument returns [nan] as result.\n*)\n\nexternal ( ~-. ) : float -> float = \"%negfloat\"\n(** Unary negation. You can also write [-. e] instead of [~-. e].\n    Unary operator at precedence level 9/11 for [-. e]\n    and 11/11 for [~-. e]. *)\n\nexternal ( ~+. ) : float -> float = \"%identity\"\n(** Unary addition. You can also write [+. e] instead of [~+. e].\n    Unary operator at precedence level 9/11 for [+. e]\n    and 11/11 for [~+. e].\n    @since 3.12.0\n*)\n\nexternal ( +. ) : float -> float -> float = \"%addfloat\"\n(** Floating-point addition.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( -. ) : float -> float -> float = \"%subfloat\"\n(** Floating-point subtraction.\n    Left-associative operator at precedence level 6/11. *)\n\nexternal ( *. ) : float -> float -> float = \"%mulfloat\"\n(** Floating-point multiplication.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( /. ) : float -> float -> float = \"%divfloat\"\n(** Floating-point division.\n    Left-associative operator at precedence level 7/11. *)\n\nexternal ( ** ) : float -> float -> float =  \"pow\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Exponentiation. *)\n\nexternal sqrt : float -> float =  \"sqrt\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Square root. *)\n\nexternal exp : float -> float =  \"exp\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Exponential. *)\n\nexternal log : float -> float =  \"log\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Natural logarithm. *)\n\nexternal log10 : float -> float =  \"log10\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Base 10 logarithm. *)\n\nexternal expm1 : float -> float = \"?expm1_float\" \n(** [expm1 x] computes [exp x -. 1.0], giving numerically-accurate results\n    even if [x] is close to [0.0].\n    @since 3.12.0\n*)\n\nexternal log1p : float -> float =  \"log1p\" [@@bs.val] [@@bs.scope \"Math\"]\n(** [log1p x] computes [log(1.0 +. x)] (natural logarithm),\n    giving numerically-accurate results even if [x] is close to [0.0].\n    @since 3.12.0\n*)\n\nexternal cos : float -> float =  \"cos\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Cosine.  Argument is in radians. *)\n\nexternal sin : float -> float =  \"sin\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Sine.  Argument is in radians. *)\n\nexternal tan : float -> float =  \"tan\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Tangent.  Argument is in radians. *)\n\nexternal acos : float -> float =  \"acos\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Arc cosine.  The argument must fall within the range [[-1.0, 1.0]].\n    Result is in radians and is between [0.0] and [pi]. *)\n\nexternal asin : float -> float =  \"asin\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Arc sine.  The argument must fall within the range [[-1.0, 1.0]].\n    Result is in radians and is between [-pi/2] and [pi/2]. *)\n\nexternal atan : float -> float =  \"atan\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Arc tangent.\n    Result is in radians and is between [-pi/2] and [pi/2]. *)\n\nexternal atan2 : float -> float -> float =  \"atan2\" [@@bs.val] [@@bs.scope \"Math\"]\n(** [atan2 y x] returns the arc tangent of [y /. x].  The signs of [x]\n    and [y] are used to determine the quadrant of the result.\n    Result is in radians and is between [-pi] and [pi]. *)\n\nexternal hypot : float -> float -> float\n               = \"?hypot_float\"\n(** [hypot x y] returns [sqrt(x *. x + y *. y)], that is, the length\n  of the hypotenuse of a right-angled triangle with sides of length\n  [x] and [y], or, equivalently, the distance of the point [(x,y)]\n  to origin.\n  @since 4.00.0  *)\n\nexternal cosh : float -> float =  \"cosh\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Hyperbolic cosine.  Argument is in radians. *)\n\nexternal sinh : float -> float =  \"sinh\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Hyperbolic sine.  Argument is in radians. *)\n\nexternal tanh : float -> float =  \"tanh\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Hyperbolic tangent.  Argument is in radians. *)\n\nexternal ceil : float -> float =  \"ceil\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Round above to an integer value.\n    [ceil f] returns the least integer value greater than or equal to [f].\n    The result is returned as a float. *)\n\nexternal floor : float -> float =  \"floor\" [@@bs.val] [@@bs.scope \"Math\"]\n(** Round below to an integer value.\n    [floor f] returns the greatest integer value less than or\n    equal to [f].\n    The result is returned as a float. *)\n\nexternal abs_float : float -> float = \"abs\" [@@bs.val] [@@bs.scope \"Math\"]\n(** [abs_float f] returns the absolute value of [f]. *)\n\nexternal copysign : float -> float -> float\n                  = \"?copysign_float\" \n(** [copysign x y] returns a float whose absolute value is that of [x]\n  and whose sign is that of [y].  If [x] is [nan], returns [nan].\n  If [y] is [nan], returns either [x] or [-. x], but it is not\n  specified which.\n  @since 4.00.0  *)\n\nexternal mod_float : float -> float -> float = \"?fmod_float\" \n(** [mod_float a b] returns the remainder of [a] with respect to\n   [b].  The returned value is [a -. n *. b], where [n]\n   is the quotient [a /. b] rounded towards zero to an integer. *)\n\nexternal frexp : float -> float * int = \"?frexp_float\"\n(** [frexp f] returns the pair of the significant\n   and the exponent of [f].  When [f] is zero, the\n   significant [x] and the exponent [n] of [f] are equal to\n   zero.  When [f] is non-zero, they are defined by\n   [f = x *. 2 ** n] and [0.5 <= x < 1.0]. *)\n\n\nexternal ldexp : float -> int -> float =\n  \"?ldexp_float\" \n(** [ldexp x n] returns [x *. 2 ** n]. *)\n\nexternal modf : float -> float * float = \"?modf_float\"\n(** [modf f] returns the pair of the fractional and integral\n   part of [f]. *)\n\nexternal float : int -> float = \"%floatofint\"\n(** Same as {!Pervasives.float_of_int}. *)\n\nexternal float_of_int : int -> float = \"%floatofint\"\n(** Convert an integer to floating-point. *)\n\nexternal truncate : float -> int = \"%intoffloat\"\n(** Same as {!Pervasives.int_of_float}. *)\n\nexternal int_of_float : float -> int = \"%intoffloat\"\n(** Truncate the given floating-point number to an integer.\n   The result is unspecified if the argument is [nan] or falls outside the\n   range of representable integers. *)\n\nval infinity : float\n(** Positive infinity. *)\n\nval neg_infinity : float\n(** Negative infinity. *)\n\n\nexternal nan : float = \"NaN\" [@@bs.val]  [@@bs.scope \"Number\"]\n(* we could also use [0.  /. 0.] *)\n(** A special floating-point value denoting the result of an\n   undefined operation such as [0.0 /. 0.0].  Stands for\n   'not a number'.  Any floating-point operation with [nan] as\n   argument returns [nan] as result.  As for floating-point comparisons,\n   [=], [<], [<=], [>] and [>=] return [false] and [<>] returns [true]\n   if one or both of their arguments is [nan]. *)\n\nval max_float : float\n(** The largest positive finite value of type [float]. *)\n\nval min_float : float\n(** The smallest positive, non-zero, non-denormalized value of type [float]. *)\n\nval epsilon_float : float\n(** The difference between [1.0] and the smallest exactly representable\n    floating-point number greater than [1.0]. *)\n\n\ntype fpclass =\n    FP_normal           (** Normal number, none of the below *)\n  | FP_subnormal        (** Number very close to 0.0, has reduced precision *)\n  | FP_zero             (** Number is 0.0 or -0.0 *)\n  | FP_infinite         (** Number is positive or negative infinity *)\n  | FP_nan              (** Not a number: result of an undefined operation *)\n(** The five classes of floating-point numbers, as determined by\n   the {!Pervasives.classify_float} function. *)\n\nval classify_float : float -> fpclass\n(** Return the class of the given floating-point number:\n   normal, subnormal, zero, infinite, or not a number. *)\n\n\n(** {1 String operations}\n\n   More string operations are provided in module {!String}.\n*)\nexternal (^) : string -> string -> string = \"#string_append\"\n(** String concatenation.\n    Right-associative operator at precedence level 5/11. *)\n\n\n(** {1 Character operations}\n\n   More character operations are provided in module {!Char}.\n*)\n\nexternal int_of_char : char -> int = \"%identity\"\n(** Return the ASCII code of the argument. *)\n\nval char_of_int : int -> char\n(** Return the character with the given ASCII code.\n   Raise [Invalid_argument \"char_of_int\"] if the argument is\n   outside the range 0--255. *)\n\n\n(** {1 Unit operations} *)\n\nexternal ignore : 'a -> unit = \"%ignore\"\n(** Discard the value of its argument and return [()].\n   For instance, [ignore(f x)] discards the result of\n   the side-effecting function [f].  It is equivalent to\n   [f x; ()], except that the latter may generate a\n   compiler warning; writing [ignore(f x)] instead\n   avoids the warning. *)\n\n\n(** {1 String conversion functions} *)\n\nval string_of_bool : bool -> string\n(** Return the string representation of a boolean. As the returned values\n   may be shared, the user should not modify them directly.\n*)\n\nval bool_of_string : string -> bool\n(** Convert the given string to a boolean.\n   Raise [Invalid_argument \"bool_of_string\"] if the string is not\n   [\"true\"] or [\"false\"]. *)\n\nval bool_of_string_opt: string -> bool option\n(** Convert the given string to a boolean.\n    Return [None] if the string is not\n    [\"true\"] or [\"false\"].\n    @since 4.05\n*)\n\n\nexternal string_of_int : int -> string = \"String\" [@@bs.val]\n(** Return the string representation of an integer, in decimal. *)\n\nexternal int_of_string : string -> int = \"?int_of_string\"\n(** Convert the given string to an integer.\n   The string is read in decimal (by default, or if the string \n   begins with [0u]), in hexadecimal (if it begins with [0x] or\n   [0X]), in octal (if it begins with [0o] or [0O]), or in binary\n   (if it begins with [0b] or [0B]).\n\n   The [0u] prefix reads the input as an unsigned integer in the range\n   [[0, 2*max_int+1]].  If the input exceeds {!max_int}\n   it is converted to the signed integer\n   [min_int + input - max_int - 1].\n\n   The [_] (underscore) character can appear anywhere in the string\n   and is ignored.\n   Raise [Failure \"int_of_string\"] if the given string is not\n   a valid representation of an integer, or if the integer represented\n   exceeds the range of integers representable in type [int]. *)\n\n\nval int_of_string_opt: string -> int option\n(** Same as [int_of_string], but returns [None] instead of raising.\n    @since 4.05\n*)\n\nval string_of_float : float -> string\n[@@ocaml.deprecated \"Please use Js.Float.toString instead, string_of_float generates unparseable floats\"]\n(** Return the string representation of a floating-point number. *)\n\nexternal float_of_string : string -> float = \"?float_of_string\"\n(** Convert the given string to a float.  The string is read in decimal\n   (by default) or in hexadecimal (marked by [0x] or [0X]).\n   The format of decimal floating-point numbers is\n   [ [-] dd.ddd (e|E) [+|-] dd ], where [d] stands for a decimal digit.\n   The format of hexadecimal floating-point numbers is\n   [ [-] 0(x|X) hh.hhh (p|P) [+|-] dd ], where [h] stands for an\n   hexadecimal digit and [d] for a decimal digit.\n   In both cases, at least one of the integer and fractional parts must be\n   given; the exponent part is optional.\n   The [_] (underscore) character can appear anywhere in the string\n   and is ignored.\n   Depending on the execution platforms, other representations of\n   floating-point numbers can be accepted, but should not be relied upon.\n   Raise [Failure \"float_of_string\"] if the given string is not a valid\n   representation of a float. *)\n\nval float_of_string_opt: string -> float option\n(** Same as [float_of_string], but returns [None] instead of raising.\n    @since 4.05\n*)\n\n(** {1 Pair operations} *)\n\nexternal fst : 'a * 'b -> 'a = \"%field0\"\n(** Return the first component of a pair. *)\n\nexternal snd : 'a * 'b -> 'b = \"%field1\"\n(** Return the second component of a pair. *)\n\n\n(** {1 List operations}\n\n   More list operations are provided in module {!List}.\n*)\n\nval ( @ ) : 'a list -> 'a list -> 'a list\n[@@ocaml.deprecated \"Use Belt.List.append instead\"]    \n(** List concatenation.  Tail-recursive (length of the first argument).\n    Right-associative operator at precedence level 5/11. *)\n\n\ntype int32 = int\n\n\n\n\n\nval print_string : string -> unit\n(** Print a string on standard output. *)\n\n\nval print_int : int -> unit\n(** Print an integer, in decimal, on standard output. *)\n\nval print_float : float -> unit\n(** Print a floating-point number, in decimal, on standard output. *)\nexternal print_endline : string -> unit = \"log\" \n[@@bs.val] [@@bs.scope \"console\"]\n(** Print a string, followed by a newline character, on\n   standard output and flush standard output. *)\n\nval print_newline : unit -> unit\n(** Print a newline character on standard output, and flush\n   standard output. This can be used to simulate line\n   buffering of standard output. *)\n\n\nexternal prerr_endline : string -> unit = \"error\" \n[@@bs.val] [@@bs.scope \"console\"]\n(** Print a string, followed by a newline character on standard\n   error and flush standard error. *)\n\nval prerr_newline : unit -> unit\n(** Print a newline character on standard error, and flush\n   standard error. *)\n\n\n\n\n\n(** {1 References} *)\n\ntype 'a ref = { mutable contents : 'a }\n(** The type of references (mutable indirection cells) containing\n   a value of type ['a]. *)\n\nexternal ref : 'a -> 'a ref = \"%makemutable\"\n(** Return a fresh reference containing the given value. *)\n\nexternal ( ! ) : 'a ref -> 'a = \"%bs_ref_field0\"\n(** [!r] returns the current contents of reference [r].\n   Equivalent to [fun r -> r.contents].\n   Unary operator at precedence level 11/11.*)\n\nexternal ( := ) : 'a ref -> 'a -> unit = \"%bs_ref_setfield0\"\n(** [r := a] stores the value of [a] in reference [r].\n   Equivalent to [fun r v -> r.contents <- v].\n   Right-associative operator at precedence level 1/11. *)\n\nexternal incr : int ref -> unit = \"%incr\"\n(** Increment the integer contained in the given reference.\n   Equivalent to [fun r -> r := succ !r]. *)\n\nexternal decr : int ref -> unit = \"%decr\"\n(** Decrement the integer contained in the given reference.\n   Equivalent to [fun r -> r := pred !r]. *)\n\n(** {1 Result type} *)\n\n(** @since 4.03.0 *)\ntype ('a, 'b) result = ('a, 'b) Belt.Result.t =\n  | Ok of 'a\n  | Error of 'b\n\n\n(** {1 Program termination} *)\n\nval exit : int -> 'a\n(** Terminate the process, returning the given status code\n   to the operating system: usually 0 to indicate no errors,\n   and a small positive integer to indicate failure.\n   All open output channels are flushed with [flush_all].\n   An implicit [exit 0] is performed each time a program\n   terminates normally.  An implicit [exit 2] is performed if the program\n   terminates early because of an uncaught exception. *)\n\nval at_exit : (unit -> unit) -> unit\n(** Register the given function to be called at program termination\n   time. The functions registered with [at_exit] will be called when\n   the program does any of the following:\n   - executes {!Pervasives.exit}\n   - terminates, either normally or because of an uncaught\n     exception\n   - executes the C function [caml_shutdown].\n   The functions are called in 'last in, first out' order: the\n   function most recently added with [at_exit] is called first. *)\n\n(**/**)\n\nval valid_float_lexem : string -> string\n"}}}
bs-platform could not be found
Sending notification {"jsonrpc": "2.0", "method": "window/showMessage", "params": {"type": 1, "message": "bs-platform could not be found"}}
Read message 
{"jsonrpc":"2.0","method":"textDocument/didClose","params":{"textDocument":{"uri":"file:///Users/greenlabs/Desktop/Project/bootcamp-aoc/rescript/node_modules/rescript/lib/ocaml/pervasives.mli"}}}
bs-platform could not be found
