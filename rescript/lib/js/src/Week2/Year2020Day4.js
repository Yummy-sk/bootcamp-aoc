// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Input = require("../Input.js");
var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function covertTypeToInt(value) {
  return Belt_Option.getExn(Belt_Int.fromString(value));
}

function formatPassportInfoToRecord(line) {
  return Belt_Array.reduce(line.split(" "), {
              byr: 0,
              iyr: 0,
              eyr: 0,
              hcl: /* None */0,
              hgt: /* None */1,
              ecl: /* None */8,
              pid: /* None */0
            }, (function (acc, info) {
                var match = info.split(":");
                if (match.length !== 2) {
                  return acc;
                }
                var key = match[0];
                var value = match[1];
                switch (key) {
                  case "byr" :
                      var newrecord = Caml_obj.obj_dup(acc);
                      newrecord.byr = Belt_Option.getExn(Belt_Int.fromString(value));
                      return newrecord;
                  case "cid" :
                      var newrecord$1 = Caml_obj.obj_dup(acc);
                      newrecord$1.cid = Belt_Option.getExn(Belt_Int.fromString(value));
                      return newrecord$1;
                  case "ecl" :
                      var newrecord$2 = Caml_obj.obj_dup(acc);
                      var tmp;
                      switch (value) {
                        case "amb" :
                            tmp = /* Amb */0;
                            break;
                        case "blu" :
                            tmp = /* Blu */1;
                            break;
                        case "brn" :
                            tmp = /* Brn */6;
                            break;
                        case "grn" :
                            tmp = /* Grn */2;
                            break;
                        case "gry" :
                            tmp = /* Gry */3;
                            break;
                        case "hzl" :
                            tmp = /* Hzl */4;
                            break;
                        case "oth" :
                            tmp = /* Oth */5;
                            break;
                        default:
                          tmp = /* Unknown */7;
                      }
                      newrecord$2.ecl = tmp;
                      return newrecord$2;
                  case "eyr" :
                      var newrecord$3 = Caml_obj.obj_dup(acc);
                      newrecord$3.eyr = Belt_Option.getExn(Belt_Int.fromString(value));
                      return newrecord$3;
                  case "hcl" :
                      var newrecord$4 = Caml_obj.obj_dup(acc);
                      newrecord$4.hcl = /* Hcl */{
                        _0: value
                      };
                      return newrecord$4;
                  case "hgt" :
                      var unit = value.slice(-2);
                      var height = value.slice(0, -2);
                      switch (unit) {
                        case "cm" :
                            var newrecord$5 = Caml_obj.obj_dup(acc);
                            newrecord$5.hgt = {
                              TAG: /* Cm */0,
                              _0: Belt_Option.getExn(Belt_Int.fromString(height))
                            };
                            return newrecord$5;
                        case "in" :
                            var newrecord$6 = Caml_obj.obj_dup(acc);
                            newrecord$6.hgt = {
                              TAG: /* In */1,
                              _0: Belt_Option.getExn(Belt_Int.fromString(height))
                            };
                            return newrecord$6;
                        default:
                          var newrecord$7 = Caml_obj.obj_dup(acc);
                          newrecord$7.hgt = /* Unknown */0;
                          return newrecord$7;
                      }
                  case "iyr" :
                      var newrecord$8 = Caml_obj.obj_dup(acc);
                      newrecord$8.iyr = Belt_Option.getExn(Belt_Int.fromString(value));
                      return newrecord$8;
                  case "pid" :
                      var newrecord$9 = Caml_obj.obj_dup(acc);
                      newrecord$9.pid = /* Pid */{
                        _0: value
                      };
                      return newrecord$9;
                  default:
                    return acc;
                }
              }));
}

function parsePassport(param) {
  return Belt_Array.map(Belt_Array.map(Input.readFile("input/Week2/Year2020Day4.sample.txt").split("\n\n"), (function (line) {
                    return line.replace(/\n/g, " ").trim();
                  })), formatPassportInfoToRecord);
}

function getPassportWhichFieldAreAllExist(passports) {
  return Belt_Array.keep(passports, (function (passport) {
                if (passport.byr > 0 && passport.iyr > 0 && passport.eyr > 0 && passport.hgt !== /* None */1 && passport.hcl !== /* None */0 && passport.ecl !== /* None */8) {
                  return passport.pid !== /* None */0;
                } else {
                  return false;
                }
              }));
}

function rangeValidator(min, max, value) {
  if (Caml_obj.greaterequal(value, min)) {
    return Caml_obj.lessequal(value, max);
  } else {
    return false;
  }
}

function getPassportWhichValueAreAllValid(passports) {
  return Belt_Array.keep(passports, (function (passport) {
                var pid = passport.pid;
                var hgt = passport.hgt;
                var hcl = passport.hcl;
                var tmp = false;
                if (rangeValidator(1920, 2002, passport.byr) && rangeValidator(2010, 2020, passport.iyr) && rangeValidator(2020, 2030, passport.eyr)) {
                  var tmp$1;
                  tmp$1 = typeof hgt === "number" ? false : (
                      hgt.TAG === /* Cm */0 ? rangeValidator(150, 193, hgt._0) : rangeValidator(59, 76, hgt._0)
                    );
                  tmp = tmp$1;
                }
                if (tmp && (
                    hcl ? /^#[0-9a-f]{6}$/.test(hcl._0) : false
                  ) && passport.ecl < 7 && pid) {
                  return /^[0-9]{9}$/.test(pid._0);
                } else {
                  return false;
                }
              }));
}

function countPassport(passports) {
  return passports.length;
}

function solution(part) {
  var passports = parsePassport(undefined);
  console.log((
        part ? getPassportWhichValueAreAllValid(passports) : getPassportWhichFieldAreAllExist(passports)
      ).length);
}

solution(/* Part1 */0);

solution(/* Part2 */1);

exports.covertTypeToInt = covertTypeToInt;
exports.formatPassportInfoToRecord = formatPassportInfoToRecord;
exports.parsePassport = parsePassport;
exports.getPassportWhichFieldAreAllExist = getPassportWhichFieldAreAllExist;
exports.rangeValidator = rangeValidator;
exports.getPassportWhichValueAreAllValid = getPassportWhichValueAreAllValid;
exports.countPassport = countPassport;
exports.solution = solution;
/*  Not a pure module */
